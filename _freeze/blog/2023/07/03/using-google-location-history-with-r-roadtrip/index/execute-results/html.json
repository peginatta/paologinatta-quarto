{
  "hash": "8767c2193acd3969595dd15279d50b72",
  "result": {
    "markdown": "---\ntitle: \"Road trip analysis! How to use and play with Google Location History in R\"\ndate: 2023-07-03\ndescription: \"Learn how to use R to load and clean and play with all the location history data Google keeps about you and look at some neat plots and tables about our 5,000-mile summer road trip along the way\"\nimage: index_files/figure-html/fig-map-with-dates-1.png\ntwitter-card:\n  image: \"index_files/figure-html/fig-map-with-dates-1.png\"\nopen-graph:\n  image: \"index_files/figure-html/fig-map-with-dates-1.png\"\ncategories:\n  - r\n  - tidyverse\n  - ggplot\n  - gis\n  - maps\nformat:\n  html:\n    fig-cap-location: bottom\nresources: \n  - clean-data-real.R\n---\n\n\n\n\nAs I explained [in my previous blog post](https://www.andrewheiss.com/blog/2023/06/01/geocoding-routing-openstreetmap-r/), in June 2023 I drove my family across the country in a 5,000-mile roundtrip odyssey from Atlanta, Georgia to just-south-of-Salt Lake City, Utah, and back again. Instead of taking a direct path through the middle the United States, we decided to hit as many tourist-y stops along the way, making a big circle along the southern US on the way out and along the northern US on the way back, stopping at a dozen really neat places, including:\n\n- [The French Quarter](https://en.wikipedia.org/wiki/French_Quarter) in New Orleans, Louisiana\n- [The Alamo](https://en.wikipedia.org/wiki/Alamo_Mission) in San Antonio, Texas\n- [Carlsbad Caverns National Park](https://en.wikipedia.org/wiki/Carlsbad_Caverns_National_Park) in New Mexico\n- [Grand Canyon National Park](https://en.wikipedia.org/wiki/Grand_Canyon) in Arizona\n- [Capitol Reef National Park](https://en.wikipedia.org/wiki/Capitol_Reef_National_Park) in southern Utah (staying at [my aunt's cabin](https://www.heissatopia.com/search?q=Grover) in Grover, Utah)\n- [Goblin Valley](https://en.wikipedia.org/wiki/Goblin_Valley_State_Park) in southern Utah\n- [Yellowstone National Park](https://en.wikipedia.org/wiki/Yellowstone_National_Park) in Wyoming\n- [Devil's Tower National Monument](https://en.wikipedia.org/wiki/Devils_Tower) in Wyoming\n- [Mount Rushmore National Memorial](https://en.wikipedia.org/wiki/Mount_Rushmore) in South Dakota\n- [Nauvoo, Illinois](https://en.wikipedia.org/wiki/Nauvoo,_Illinois) and other [LDS history](https://www.churchofjesuschrist.org/learn/locations/historic-nauvoo) locations like the [Smith Family Cemetery](https://en.wikipedia.org/wiki/Smith_Family_Cemetery), [Winter Quarters](https://en.wikipedia.org/wiki/Winter_Quarters_(North_Omaha,_Nebraska)), and [Carthage Jail](https://en.wikipedia.org/wiki/Carthage_Jail)\n\n::: {.callout-tip}\n### Pictures!\n\nCheck out the [#Roadtrip2023 tag on our blog](https://www.heissatopia.com/search/label/%23Roadtrip2023) for photos and details of all these places.\n:::\n\nIn an effort to stay On Brand™, I wanted to keep a log of all our stops so I could go back and analyze the trip. How many miles would we drive? How much time would we spend in the car? How long would each gas stop and bathroom break be? Could I make some sort of map showing our journey?\n\nSo, at the first gas station we stopped at in Alabama, I started a new file in my phone's Notes app and dutifully wrote down the arrival time, name and address of the gas station, and departure time. I had a nascent data file and was ready to use it through the trip.\n\nAbout an hour after leaving our second gas station stop just outside Mississippi, I realized that I forgot to write down anything about the second gas station stop. My data collection process died after a single entry.\n\nI was initially disappointed that I wouldn't have any sort of data to work with at the end of the trip, but then I remembered that my phone was tracking every part of the whole trip through Google Maps. When we got to the first hotel, I searched Google to see if it was possible to export your location history from Google Maps and saw that it was, so I gave up on trying to keep my own log and outsourced all that to Google instead. I didn't know what exactly Google was tracking, but I figured it would at least have the date, time, and location of where we went, so that was good enough.\n\nRight after we got home from our trip last week, I exported my data and was shocked by how much detail Google actually had. The exported JSON files contained 100,000+ location entries going all the back to 2013 (!!!). Parsing and sifting through and working with all this data initially seemed overwhelming (especially since Google doesn't actually provide any formal documentation for these files!), but once I worked through a few tricky issues, it was surprisingly straightforward to make maps, calculate distances and times, and do all sorts of other fun things with the data.\n\nSo in this post I do three things:\n\n1. [Give a basic overview](#anatomy-of-google-takeout-location-history-data) of what exactly Google tracks in your Location History and how they store it across dozens of JSON files\n2. [Show](#loading-and-playing-with-your-location-history-in-r) how to load, process, and clean this data using R\n3. [Create](#road-trip-analysis) some neat plots and tables with details from our mega summer road trip around the US\n\n::: {.callout-note}\n### Who this post is for\n\nHere's what I assume you know:\n\n- You're familiar with [R](https://www.r-project.org/) and the [tidyverse](https://www.tidyverse.org/) (particularly [{dplyr}](https://dplyr.tidyverse.org/) and [{ggplot2}](https://ggplot2.tidyverse.org/)).\n- You're somewhat familiar with [{sf}](https://r-spatial.github.io/sf/) for working with geographic data. I have a [whole tutorial here](https://datavizs23.classes.andrewheiss.com/example/12-example.html) and a [simplified one here](https://www.andrewheiss.com/blog/2023/04/26/middle-earth-mapping-sf-r-gis/#lightning-quick-overview-of-sf-and-shapefiles) and the [{sf} documentation has a ton of helpful vignettes and blog posts](https://r-spatial.github.io/sf/), and there are also two free books about it: [*Spatial Data Science*](https://r-spatial.org/book/) and [*Geocomputation with R*](https://r.geocompx.org/). Also [check this fantastic post out](https://www.jessesadler.com/post/simple-feature-objects/) to learn more about the anatomy of a `geometry` column with {sf}.\n\n:::\n\n::: {.callout-note}\n### Follow along!\n\nIf you want to follow along with this post, I've created mostly-anonymized excerpts of the main JSON files for the first four days of this road trip that you can download:\n\n- [{{< fa file-zipper >}} `data.zip`](data.zip)\n\n:::\n\n\n# Packages and functions\n\nBefore officially getting started, let’s load all the packages we need and create some helpful functions and variables:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)     # ggplot, dplyr, and friends\nlibrary(jsonlite)      # Read JSON files\nlibrary(sf)            # Handle spatial data in a tidy way\nlibrary(tigris)        # Access deographic data from the US Census\nlibrary(ggrepel)       # Nicer non-overlapping labels\nlibrary(glue)          # Easier string interpolation\nlibrary(scales)        # Nicer labeling functions\nlibrary(patchwork)     # Combine plots nicely\nlibrary(ggspatial)     # Nicer map features like scale bars\nlibrary(leaflet)       # Make interactive maps\nlibrary(lutz)          # Look up time zones for lat/lon coordinates\nlibrary(gt)            # Make fancy tables\nlibrary(rcartocolor)   # Use CARTO colors (https://carto.com/carto-colors/)\nlibrary(ggnewscale)    # Use multiple scales for the same aesthetic in ggplot\n\n# Custom ggplot themes to make pretty plots\n# Get the font at https://fonts.google.com/specimen/Overpass\ntheme_roadtrip <- function() {\n  theme_minimal(base_family = \"Overpass Light\") +\n    theme(panel.grid.minor = element_blank(),\n      plot.title = element_text(family = \"Overpass\", face = \"bold\"),\n      axis.title = element_text(family = \"Overpass Medium\"),\n      axis.title.x = element_text(hjust = 0),\n      axis.title.y = element_text(hjust = 1),\n      strip.text = element_text(\n        family = \"Overpass ExtraBold\", face = \"plain\",\n        size = rel(1), hjust = 0),\n      strip.background = element_rect(fill = \"grey90\", color = NA))\n}\n\ntheme_roadtrip_map <- function() {\n  theme_void(base_family = \"Overpass Light\") +\n    theme(\n      plot.title = element_text(family = \"Overpass\", face = \"bold\", hjust = 0.5),\n      strip.text = element_text(\n        family = \"Overpass ExtraBold\", face = \"plain\",\n        size = rel(1.1), hjust = 0.5)\n    )\n}\n\n# Make labels use Overpass by default\nupdate_geom_defaults(\"label_repel\", \n                     list(family = \"Overpass\",\n                          fontface = \"plain\"))\nupdate_geom_defaults(\"label\", \n                     list(family = \"Overpass\",\n                          fontface = \"plain\"))\n\nupdate_geom_defaults(\"text_repel\", \n                     list(family = \"Overpass\",\n                          fontface = \"plain\"))\nupdate_geom_defaults(\"text\", \n                     list(family = \"Overpass\",\n                          fontface = \"plain\"))\n\n# CARTO Prism palette\n# https://carto.com/carto-colors/\nclrs <- rcartocolor::carto_pal(name = \"Prism\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nus_states <- states(resolution = \"20m\", year = 2022, cb = TRUE)\n\nlower_48 <- us_states %>% \n  filter(!(NAME %in% c(\"Alaska\", \"Hawaii\", \"Puerto Rico\")))\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"A bunch of helper functions that I've hidden because this chunk is long\"}\n#' Format difftime in minutes and hours\n#'\n#' This function takes a difftime input \\code{x} and formats the result as a \n#' string indicating the number of hours and minutes in the duration.\n#'\n#' @param x A difftime input.\n#' @return A character vector of formatted duration strings.\n#' @examples\n#' x <- as.difftime(c(93, 1007, 3056), units = \"secs\")\n#' fmt_duration(x)\nfmt_difftime <- function(x) {\n  n_seconds <- seconds(as.double(x, units = \"secs\"))\n  n_seconds <- seconds_to_period(n_seconds)\n  \n  out <- map_chr(n_seconds, \\(n) {\n    if (as.numeric(n) < 3600) {\n      # If this is less than an hour, don't format anything with hours\n      glue::glue(\"{MM} minutes\", MM = minute(n))\n    } else {\n      # I only want to format this as a number of hours. If the duration is\n      # longer than 24 hours, seconds_to_period() rolls over into days (i.e.\n      # seconds_to_period(60 * 60 * 24) returns \"1d 0H 0M 0S\"), and it shows\n      # zero hours. So we extract the day part of the period, multiply it by 24,\n      # and add it to the hour component that we want to display\n      extra_day_hours <- day(n) * 24\n      \n      glue::glue(\"{HH} hour{s} {MM} minutes\",\n        HH = scales::label_comma()(hour(n) + extra_day_hours),\n        MM = minute(n),\n        s = ifelse(hour(n) == 1, \"\", \"s\")\n      )\n    }\n  })\n  \n  return(out)\n}\n\nfmt_miles <- scales::label_number(accuracy = 10, suffix = \" miles\", big.mark = \",\")\n\nmiles_to_meters <- function(x) {\n  x * 1609.344\n}\n\nmeters_to_miles <- function(x) {\n  x / 1609.344\n}\n\nmeters_to_feet <- function(x) {\n  x * 3.28084\n}\n\nkm_to_miles <- function(x) {\n  meters_to_miles(x * 1000)\n}\n```\n:::\n\n\n\n# Anatomy of Google Takeout Location History data\n\nYou can use [Google Takeout](https://takeout.google.com/) to export your personal location history if you have it enabled in Google Maps, which you probably do—it's the default. (Though after looking at this post you might be tempted to disable it—it's surprising to see how much fine-grained data Google has about your location over time!)\n\nGo to [Google Takeout](https://takeout.google.com/) and create a new export. You can select data from any number of Google's different services, but here we only want Location History, so scroll all the way down to it, check its box, and then select \"Next Step\":\n\n![Location History in Google Takeout](img/google-takeout.png){width=60%}\n\nTell it to e-mail you a link to a one-time .zip export and then wait a couple minutes to get the link. Download it, unzip it, and you're ready to go!\n\n![Location History export options in Google Takeout](img/google-takeout-options.png){width=60%}\n\nYour Location History data includes a bunch of JSON files:\n\n```default\n.\n├── Settings.json\n├── Records.json\n└── Semantic Location History\n    ├── 2013\n    ├── ...\n    ├── 2022\n    │   ├── 2022_APRIL.json\n    │   ├── ...\n    │   └── ...\n    └── 2023\n        ├── 2023_APRIL.json\n        ├── ...\n        └── ...\n```\n\nFor whatever reason, Google doesn't provide any documentation for these files and their contents! Lots of the data and JSON entries are self-explanatory and fairly straightforward, but lots are not!. Fortunately [this community project for the Location History Format](https://locationhistoryformat.com/) provides excellent definitions, documentation, and JSON schemas for all these JSON files. \n\nBefore loading these files into R and playing with them, understanding what's in them is useful, so let's take a quick tour.\n\n## Settings\n\n::: {.callout-tip}\n### Complete documentation for `Settings.json`\n\n- [Full documentation](https://locationhistoryformat.com/reference/settings/)\n:::\n\n`Settings.json` is a small file that contains a bunch of device-specific settings and details, like the unique ID for your phone, the date and time when you added your phone to your account, and so on. It's not super important for working with your data—consider it extra metadata.\n\n\n## Records\n\n::: {.callout-tip}\n### Complete documentation for `Records.json`\n\n- [Basic overview](https://locationhistoryformat.com/guides/raw-location/)\n- [Full documentation](https://locationhistoryformat.com/reference/records/)\n:::\n\n`Records.json` *is* important. This contains an entry for every time Google Maps recorded your location somewhere. Here's what a typical entry looks like (each entry is nested under a `\"locations\"` property): \n\n```json\n{\n  \"locations\": [{\n    \"latitudeE7\": 300489450,\n    \"longitudeE7\": -899629451,\n    \"accuracy\": 9,\n    \"velocity\": 0,\n    \"heading\": 329,\n    \"altitude\": 1,\n    \"verticalAccuracy\": 4,\n    \"deviceTag\": 0,\n    \"platformType\": \"IOS\",\n    \"serverTimestamp\": \"2023-06-04T01:05:58.248Z\",\n    \"deviceTimestamp\": \"2023-06-04T01:05:57.559Z\",\n    \"batteryCharging\": false,\n    \"formFactor\": \"PHONE\",\n    \"timestamp\": \"2023-06-04T00:52:57Z\"\n  }]\n}\n```\n\n- Location details like `latitudeE7` and `longitudeE7`, multiplied by 10,000,000 so there are no decimals\n- Accuracy details like `accuracy`, or radius of the location measurement, in meters. Smaller numbers mean better precision.\n- Position details like `heading` (degrees east of north, from 0 to 359), `velocity` (meters per second), `altitude` (meters), and `verticalAccuracy` (accuracy of altitude in meters; smaller means better precision)\n- Device details like `deviceTag` (Google's internal ID for your device; I changed mine to 0 in this post for privacy reasons), `platformType` and `formFactor` (type of device), `batteryCharging` (whether your device was charging at the time), and some timestamps for the device time, server time, and UTC time.\n\nThis is pretty straightforward to work with, since it's essentially rectangular data, or data that can be thought of as rows and columns. Each location entry in the JSON file is a row; each property is a column (`accuracy` is 9, `altitude` is 1, and so on), like this:\n\n| rowid | latitudeE7 | longitudeE7 | ... | formFactor | timestamp            |\n|-------|------------|-------------|-----|------------|----------------------|\n| 54383 | 300489450  | -899629451  | ... | PHONE      | 2023-06-04T00:52:57Z |\n| 54384 | ...        | ...         | ... | ...        | ...                  |\n\n: Example dataset from Google Location History JSON\n\nThe only data manipulation we need to do is modify the latitude and longitude columns. Both of those have been multiplied by 10,000,000 so that there are no decimal points in the coordinates (probably to avoid [the weirdness inherent in floating point math](https://floating-point-gui.de/basic/)). There's actually a hint about this in the column names for `latitudeE7` and `longitudeE7`—in R and most other programming languages, `1e7` is computer notation for $10^7$. If we divide both those columns by 10,000,000, we'll get standard-looking geographic coordinates:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n300489450 / 10000000\n## [1] 30.05\n-899629451 / 1e7  # We can write it as 1e7 too\n## [1] -89.96\n```\n:::\n\n\nFor the sake of this post, the most important pieces of data here will be location (`latitudeE7` and `longitudeE7`), time (`timestamp`), and elevation (`altitude`). The velocity data might be cool to do something with some day, but I won't touch it for now.\n\n\n## Semantic location history\n\n::: {.callout-tip}\n### Complete documentation for semantic location history files\n\n- [Basic overview](https://locationhistoryformat.com/guides/semantic-location/)\n- [Full documentation](https://locationhistoryformat.com/reference/semantic/)\n:::\n\nThese month-specific JSON files are super neat and full of really rich data. Each entry is one of two types of events: activity segments (`activitySegment`) and place visits (`placeVisit`).\n\nHere's what the beginning of a typical activity segment entry looks like (with a *lot* of parts omitted for space—[click here for a complete example entry](data/example-activitySegment.json)): \n\n```json\n{\n  \"timelineObjects\": [\n    {\n      \"activitySegment\": {\n        \"startLocation\": {\n          \"latitudeE7\": 339703585,\n          \"longitudeE7\": -842416959,\n          \"sourceInfo\": {\n            \"deviceTag\": 0\n          }\n        },\n        \"endLocation\": {\n          \"latitudeE7\": 339786509,\n          \"longitudeE7\": -842006268,\n          \"sourceInfo\": {\n            \"deviceTag\": 0\n          }\n        },\n        \"duration\": {\n          \"startTimestamp\": \"2023-06-01T00:15:26.999Z\",\n          \"endTimestamp\": \"2023-06-01T00:28:47Z\"\n        },\n        \"distance\": 5483,\n        \"activityType\": \"IN_PASSENGER_VEHICLE\",\n        \"confidence\": \"HIGH\",\n        \"activities\": [\n          {\n            \"activityType\": \"IN_PASSENGER_VEHICLE\",\n            \"probability\": 91.4052665233612\n          },\n          {\n            \"activityType\": \"STILL\",\n            \"probability\": 6.64205327630043\n          },\n          ...\n        ],\n        ...\n      }\n    }\n  ]\n}\n```\n\nAnd here's the beginning typical place visit entry ([click here for a complete example entry](data/example-placeVisit.json))\n\n```json\n{\n  \"timelineObjects\": [\n    {\n      \"placeVisit\": {\n        \"location\": {\n          \"latitudeE7\": 323281024,\n          \"longitudeE7\": -863373283,\n          \"placeId\": \"ChIJQ0NgzsqAjogRISqopW4DZMc\",\n          \"address\": \"1030 W South Blvd, Montgomery, AL 36105, USA\",\n          \"name\": \"Chevron\",\n          \"sourceInfo\": {\n            \"deviceTag\": 0\n          },\n          \"locationConfidence\": 89.41639,\n          \"calibratedProbability\": 80.56358\n        },\n        \"duration\": {\n          \"startTimestamp\": \"2023-06-03T14:27:23.001Z\",\n          \"endTimestamp\": \"2023-06-03T14:50:24Z\"\n        },\n        \"placeConfidence\": \"MEDIUM_CONFIDENCE\",\n        ...\n      }\n    }\n  ]\n}\n\n```\n\nWorking with these gnarly JSON files is a lot trickier than working with `Records.json` because all this data is deeply nested within specific properties of the activity or place visit.\n\nTo help visualize all this nesting, here's what a single `placeVisit` entry looks like (screenshot via [this JSON tree visualizer](https://akhiljay.github.io/JSON-tree-visualizer/)), with the visit details + alternative places + child visits and *their* alternative locations and confidence levels + lots of other details:\n\n::: {.column-screen-inset-right}\n![JSON tree for one `placeVisit` entry](img/json-tree.png)\n:::\n\nYikes.\n\nFor this post, I don't care about all the alternative possible locations or possible modes of transportation or confidence levels or anything. I cleaned those up in my [Google Timeline](https://timeline.google.com/) before exporting the data, so I'm pretty confident everything is relatively correct. \n\n::: {.callout-tip collapse=\"true\"}\n### More on cleaning up your Google Timeline\n\nGoogle actually has a really nice web-based frontend for your whole location history at [Google Timeline](https://timeline.google.com). \n\n![My Google Timeline from June 4, 2023](img/google-timeline.png)\n\nBefore downloading my location data from this road trip, I checked my history for each day at Google Timeline to confirm that it was marking the right trips locations. It generally did a good job, but when an entry has lower confidence (the `confidence` entry in the JSON data), Google shows you its uncertainty. For instance, here it's not sure about two stops:\n\n![Google's uncertainty about two locations](img/timeline-confirm-location.png){width=60%}\n\nThose are both correct, so I clicked on the check to confirm.\n\nOther times, it gets things wrong. Like here, it thought I was on a motorcycle for this leg of the trip:\n\n![Google's incorrect guess that I was motorcycling instead of driving](img/timeline-motorcycle.png){width=60%}\n\nThat's obviously not correct, so I edited it to be \"Driving\" instead:\n\n![Switching motorcylcing to driving](img/timeline-fixed.png){width=60%}\n\nAnd other times, when cell reception is bad, it misses entire activities. Like here, where we went to [Devil's Tower](https://www.nps.gov/deto/index.htm) where there's no cell reception at all, Google saw that we left the hotel at 8:14 AM and somehow magically arrived at Devil's Tower at 9:21 AM. It failed to record how we did it, so I clicked on \"Add activity\" and told Google I was driving.\n\n![Missing activity](img/timeline-missing-activity.png){width=60%}\n\n:::\n\n\nHere's all I'll worry about here:\n\n**For `placeVisit`s:**\n\n- Location coordinates (`location` → `latitudeE7` and `location` → `longitudeE7`)\n- Location ID (`location` → `placeId`): Google's internal ID for the place\n- Location name (`location` → `name`)\n- Location address (`location` → `address`)\n- Start and end times (`duration` → `startTimestamp` and `duration` → `endTimestamp`)\n\n**For `activitySegment`s:**\n\n- Distance (`distance`)\n- Activity type (`activityType`)\n- Start and end coordinates (`startLocation` → (`latitudeE7` & `longitudeE7`) and `endLocation` → (`latitudeE7` & `longitudeE7`))\n- Start and end times (`duration` → `startTimestamp` and `duration` → `endTimestamp`)\n\n\n# Loading and playing with your location history in R\n\nWe can load all these JSON files with R using the `read_json()` function from {jsonlite}, but we need to do a little bit of fancy data wrangling with the more complex semantic location history JSON files.\n\n## `Records.json`\n\n### Loading and cleaning data\n\nLoading `Records.json` is easy. Because it is essentially rectangular data already, we can use `simplifyVector = TRUE` to have R convert the `locations` slot of the JSON file to a data frame automatically.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_locations_raw <- read_json(\"data/Records.json\", simplifyVector = TRUE) %>% \n  # Pull out the \"locations\" slot (this is the same as doing full_data$locations)\n  pluck(\"locations\") %>% \n  # Make this a tibble just so it prints nicer here on the blog\n  as_tibble() \nall_locations_raw\n## # A tibble: 2,288 × 15\n##    latitudeE7 longitudeE7 accuracy velocity heading altitude verticalAccuracy deviceTag platformType serverTimestamp          batteryCharging formFactor timestamp                source deviceTimestamp\n##         <int>       <int>    <int>    <int>   <int>    <int>            <int>     <int> <chr>        <chr>                    <lgl>           <chr>      <chr>                    <chr>  <chr>          \n##  1  338465853  -843051758        4       30     205      271                3         0 IOS          2023-06-03T12:00:21.140Z TRUE            PHONE      2023-06-03T12:00:21.001Z <NA>   <NA>           \n##  2  338361607  -843273246       25       32     238      272                3         0 IOS          2023-06-03T12:01:41.112Z TRUE            PHONE      2023-06-03T12:01:41Z     <NA>   <NA>           \n##  3  338283154  -843438356        4       29     228      270                3         0 IOS          2023-06-03T12:02:36.183Z TRUE            PHONE      2023-06-03T12:02:36.001Z <NA>   <NA>           \n##  4  338185757  -843621145        4       30     203      259                3         0 IOS          2023-06-03T12:03:46.098Z TRUE            PHONE      2023-06-03T12:03:46Z     <NA>   <NA>           \n##  5  338086421  -843782498        4       30     233      277                3         0 IOS          2023-06-03T12:04:51.107Z TRUE            PHONE      2023-06-03T12:04:51.001Z <NA>   <NA>           \n##  6  337970326  -843935971        4       27     192      269                3         0 IOS          2023-06-03T12:05:56.167Z TRUE            PHONE      2023-06-03T12:05:55.999Z <NA>   <NA>           \n##  7  337805263  -843911732        4       27     180      282                3         0 IOS          2023-06-03T12:07:03.134Z TRUE            PHONE      2023-06-03T12:07:03.001Z <NA>   <NA>           \n##  8  337672676  -843890003        4       23     125      291                3         0 IOS          2023-06-03T12:08:08.143Z TRUE            PHONE      2023-06-03T12:08:08Z     <NA>   <NA>           \n##  9  337553940  -843786019        4       27     181      310                3         0 IOS          2023-06-03T12:09:16.194Z TRUE            PHONE      2023-06-03T12:09:16.001Z <NA>   <NA>           \n## 10  337437364  -843914546        4       26     207      295                3         0 IOS          2023-06-03T12:10:24.118Z TRUE            PHONE      2023-06-03T12:10:24Z     <NA>   <NA>           \n## # ℹ 2,278 more rows\n```\n:::\n\n\nWe need to clean this data up a bit before using it:\n\n- Right now the latitude and longitude coordinates are multiplied by 10,000,000, and they're just numbers—R doesn't know that they're geographic coordinates. We need to divide them by $10^7$ and then use them to create an {sf}-enabled `geometry` column using `st_as_sf()` from {sf}.\n\n- Right now all the timestamps are in UTC (Greenwich Mean Time), not local time. Ordinarily converting UTC times to local time zones is really easy with `with_tz()` from {lubridate}:\n\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  # One of the times from the trip\n  time_utc <- ymd_hms(\"2023-06-03 14:27:23\")\n  time_utc\n  ## [1] \"2023-06-03 14:27:23 UTC\"\n  \n  # Convert it to US Central Daylight Time since we were in Alabama at the time\n  with_tz(time_utc, tzone = \"America/Chicago\")\n  ## [1] \"2023-06-03 09:27:23 CDT\"\n  ```\n  :::\n\n\n  However, this was a big road trip and we covered every possible time zone in the continental US (technically not Pacific Daylight Time, but Arizona doesn't use daylight saving time, so it's the same time as Pacific time during the summer), so we can't just convert all the timestamps to just one time zone. We need to figure out which US time zone each latitude/longitude point is in.\n  \n  I fretted a lot about the best way to do this! I eventually stumbled across [a project that has shapefiles for all the world's time zones](https://github.com/evansiroky/timezone-boundary-builder) and was about to start using that to look up which time zone each point fell inside, but then I discovered that there's already an R package that does this (and it uses the same time zone boundary project behind the scenes): [{lutz}](https://andyteucher.ca/lutz/) (**l**ook **u**p **t**ime **z**ones). We just have to use `tz_lookup()` and it'll identify the correct time zone for each point.\n  \n  But there's one more wrinkle! This is *surprisingly* difficult! You'd think we could just use something like `mutate(local_time = with_tz(timestamp, tzone = \"whatever\")` and make a local time column, but NOPE. R stores time zone details as an attribute for the entire column, so there's no way to have a column with times across multiple time zones ([see this issue here](https://github.com/tidyverse/lubridate/issues/359)). Notice how the `local_time` column here is the same regardless of time zone:\n\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  example_thing <- tribble(\n    ~timestamp, ~tz,\n    \"2023-06-01 00:00:00\", \"America/New_York\",\n    \"2023-06-01 01:00:00\", \"America/New_York\",\n    \"2023-06-01 00:00:00\", \"America/Phoenix\",\n    \"2023-06-01 01:00:00\", \"America/Phoenix\"\n  ) %>% \n    mutate(timestamp = ymd_hms(timestamp))\n  \n  # The local times are all the same (New York) because columns can only have one time zone\n  example_thing %>% \n    # Have to use rowwise() because with_tz() isn't vectorized (with good reason)\n    rowwise() %>% \n    mutate(local_time = with_tz(timestamp, tzone = tz))\n  ## # A tibble: 4 × 3\n  ## # Rowwise: \n  ##   timestamp           tz               local_time         \n  ##   <dttm>              <chr>            <dttm>             \n  ## 1 2023-06-01 00:00:00 America/New_York 2023-05-31 20:00:00\n  ## 2 2023-06-01 01:00:00 America/New_York 2023-05-31 21:00:00\n  ## 3 2023-06-01 00:00:00 America/Phoenix  2023-05-31 20:00:00\n  ## 4 2023-06-01 01:00:00 America/Phoenix  2023-05-31 21:00:00\n  ```\n  :::\n\n\n  So as a workaround, we can group by time zone, which lets us work on a smaller subset of the data for each time zone, thus getting around the \"one time zone per column\" rule. However, that still doesn't quite work, because when R is done with the grouping, it puts everything back together in one column, thus breaking the \"one time zone per column\" rule, and New York time takes over for the whole column again:\n\n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  example_thing %>% \n    group_by(tz) %>% \n    mutate(local_time = with_tz(timestamp, tz))\n  ## # A tibble: 4 × 3\n  ## # Groups:   tz [2]\n  ##   timestamp           tz               local_time         \n  ##   <dttm>              <chr>            <dttm>             \n  ## 1 2023-06-01 00:00:00 America/New_York 2023-05-31 20:00:00\n  ## 2 2023-06-01 01:00:00 America/New_York 2023-05-31 21:00:00\n  ## 3 2023-06-01 00:00:00 America/Phoenix  2023-05-31 20:00:00\n  ## 4 2023-06-01 01:00:00 America/Phoenix  2023-05-31 21:00:00\n  ```\n  :::\n\n  \n  To get around that, we can use `force_tz()` to convert each local time back to a fake version of UTC. Each timestamp all have the same time zone attribute (UTC), but the time will be US Eastern, Central, Mountain, or whatever. It's the local time as if it were UTC. It works!\n  \n\n  ::: {.cell layout-align=\"center\"}\n  \n  ```{.r .cell-code}\n  example_thing %>% \n    group_by(tz) %>% \n    mutate(local_time = force_tz(with_tz(timestamp, tz), \"UTC\"))\n  ## # A tibble: 4 × 3\n  ## # Groups:   tz [2]\n  ##   timestamp           tz               local_time         \n  ##   <dttm>              <chr>            <dttm>             \n  ## 1 2023-06-01 00:00:00 America/New_York 2023-05-31 20:00:00\n  ## 2 2023-06-01 01:00:00 America/New_York 2023-05-31 21:00:00\n  ## 3 2023-06-01 00:00:00 America/Phoenix  2023-05-31 17:00:00\n  ## 4 2023-06-01 01:00:00 America/Phoenix  2023-05-31 18:00:00\n  ```\n  :::\n\n  \n- Finally we'll add some extra columns for the day, month, and year based on the local time. The file I'm working with here only contains a few days from our trip, but if you're using your own data, you'll likely have years of entries, so these columns help with filtering (i.e. you can use `filter(year == 2017)` to see your whole location history for that year.)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_locations <- all_locations_raw %>% \n  # Scale down the location data (divide any column that ends in E7 by 10000000)\n  mutate(across(ends_with(\"E7\"), ~ . / 1e7)) %>% \n  # Create a geometry column with the coordinates\n  st_as_sf(coords = c(\"longitudeE7\", \"latitudeE7\"), crs = st_crs(\"EPSG:4326\")) %>% \n  # Make a column with the time zone for each point\n  mutate(tz = tz_lookup(., method = \"accurate\")) %>% \n  # Convert the timestamp to an actual UTC-based timestamp\n  mutate(timestamp = ymd_hms(timestamp, tz = \"UTC\")) %>% \n  # Create a version of the timestamp in local time, but in UTC\n  group_by(tz) %>% \n  mutate(timestamp_local = force_tz(with_tz(timestamp, tz), \"UTC\")) %>% \n  ungroup() %>% \n  # Add some helper columns for filtering, grouping, etc.\n  mutate(\n    year = year(timestamp_local),\n    month = month(timestamp_local),\n    day = day(timestamp_local)\n  ) %>% \n  mutate(\n    day_month = strftime(timestamp_local, \"%B %e\"),\n    # With %e, there's a leading space for single-digit numbers, so we remove\n    # any double spaces and replace them with single spaces \n    # (e.g., \"June  3\" becomes \"June 3\")\n    day_month = str_replace(day_month, \"  \", \" \"),\n    day_month = fct_inorder(day_month)\n  )\nall_locations\n## Simple feature collection with 2288 features and 19 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -111.6 ymin: 29.4 xmax: -84.31 ymax: 35.53\n## Geodetic CRS:  WGS 84\n## # A tibble: 2,288 × 20\n##    accuracy velocity heading altitude verticalAccuracy deviceTag platformType serverTimestamp          batteryCharging formFactor timestamp           source deviceTimestamp       geometry tz               timestamp_local      year month   day day_month\n##  *    <int>    <int>   <int>    <int>            <int>     <int> <chr>        <chr>                    <lgl>           <chr>      <dttm>              <chr>  <chr>              <POINT [°]> <chr>            <dttm>              <dbl> <dbl> <int> <fct>    \n##  1        4       30     205      271                3         0 IOS          2023-06-03T12:00:21.140Z TRUE            PHONE      2023-06-03 12:00:21 <NA>   <NA>            (-84.31 33.85) America/New_York 2023-06-03 08:00:21  2023     6     3 June 3   \n##  2       25       32     238      272                3         0 IOS          2023-06-03T12:01:41.112Z TRUE            PHONE      2023-06-03 12:01:41 <NA>   <NA>            (-84.33 33.84) America/New_York 2023-06-03 08:01:41  2023     6     3 June 3   \n##  3        4       29     228      270                3         0 IOS          2023-06-03T12:02:36.183Z TRUE            PHONE      2023-06-03 12:02:36 <NA>   <NA>            (-84.34 33.83) America/New_York 2023-06-03 08:02:36  2023     6     3 June 3   \n##  4        4       30     203      259                3         0 IOS          2023-06-03T12:03:46.098Z TRUE            PHONE      2023-06-03 12:03:46 <NA>   <NA>            (-84.36 33.82) America/New_York 2023-06-03 08:03:46  2023     6     3 June 3   \n##  5        4       30     233      277                3         0 IOS          2023-06-03T12:04:51.107Z TRUE            PHONE      2023-06-03 12:04:51 <NA>   <NA>            (-84.38 33.81) America/New_York 2023-06-03 08:04:51  2023     6     3 June 3   \n##  6        4       27     192      269                3         0 IOS          2023-06-03T12:05:56.167Z TRUE            PHONE      2023-06-03 12:05:55 <NA>   <NA>             (-84.39 33.8) America/New_York 2023-06-03 08:05:55  2023     6     3 June 3   \n##  7        4       27     180      282                3         0 IOS          2023-06-03T12:07:03.134Z TRUE            PHONE      2023-06-03 12:07:03 <NA>   <NA>            (-84.39 33.78) America/New_York 2023-06-03 08:07:03  2023     6     3 June 3   \n##  8        4       23     125      291                3         0 IOS          2023-06-03T12:08:08.143Z TRUE            PHONE      2023-06-03 12:08:08 <NA>   <NA>            (-84.39 33.77) America/New_York 2023-06-03 08:08:08  2023     6     3 June 3   \n##  9        4       27     181      310                3         0 IOS          2023-06-03T12:09:16.194Z TRUE            PHONE      2023-06-03 12:09:16 <NA>   <NA>            (-84.38 33.76) America/New_York 2023-06-03 08:09:16  2023     6     3 June 3   \n## 10        4       26     207      295                3         0 IOS          2023-06-03T12:10:24.118Z TRUE            PHONE      2023-06-03 12:10:24 <NA>   <NA>            (-84.39 33.74) America/New_York 2023-06-03 08:10:24  2023     6     3 June 3   \n## # ℹ 2,278 more rows\n```\n:::\n\n\nOver the 4 days I've included in this JSON file, Google recorded my location 2,288 times(!!).\n\n### Basic maps\n\nSince we converted the latitude and longitude coordinates into a `geometry` column, we can plot it really easily:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# I used https://www.openstreetmap.org/export to make this window\ntrip_window <- st_sfc(\n  st_point(c(-115.137, 24.567)),  # left (west), bottom (south)\n  st_point(c(-79.146, 37.475)),   # right (east), top (north)\n  crs = st_crs(\"EPSG:4326\")  # WGS 84\n) %>% \n  st_coordinates()\ntrip_window\n##            X     Y\n## [1,] -115.14 24.57\n## [2,]  -79.15 37.48\n\nggplot() +\n  geom_sf(data = lower_48) +\n  geom_sf(data = all_locations) +\n  coord_sf(\n    xlim = trip_window[, \"X\"],\n    ylim = trip_window[, \"Y\"]) +\n  theme_roadtrip_map()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic-map-points-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nThat looks like a solid thick black line, but it's not. It's actually 2,288 individual dots. We can confirm if we zoom in really close (this is the area around The Alamo in San Antonio, Texas):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_locations %>% \n  leaflet() %>% \n  addTiles() %>% \n  addCircles() %>% \n  # I got these coordinates from Google Maps\n  setView(lat = 29.425733271447523, lng = -98.48627553904525, zoom = 18)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-1b4ff99564eb6e8884a5\" style=\"width:100%;height:415.327564894932px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1b4ff99564eb6e8884a5\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addCircles\",\"args\":[[33.8465853,33.8361607,33.8283154,33.8185757,33.8086421,33.7970326,33.7805263,33.7672676,33.755394,33.7437364,33.7266033,33.7120551,33.6977384,33.6854827,33.6724931,33.6614919,33.6505909,33.6382219,33.6206107,33.6188275,33.6017875,33.5894309,33.575587,33.5612994,33.551666,33.5419701,33.5307047,33.5196752,33.5025841,33.4868779,33.4695842,33.4529994,33.4410196,33.4307704,33.4164157,33.400236,33.3845295,33.367116,33.3473453,33.329622,33.3141708,33.2946076,33.2756129,33.2570992,33.2388582,33.2211068,33.2070114,33.1947363,33.1800601,33.1635535,33.1469295,33.1313731,33.1133854,33.0953763,33.0804292,33.0661186,33.0536296,33.0401393,33.0241776,33.0100232,32.9975247,32.984959,32.9766727,32.9661492,32.9520121,32.9343297,32.9153437,32.8990072,32.8830232,32.8685804,32.8535169,32.8390878,32.8251834,32.8092655,32.7935376,32.7775912,32.761054,32.7444772,32.7263163,32.7074977,32.6889266,32.6724289,32.655765,32.6396942,32.6307417,32.62115,32.6111249,32.6023451,32.5912678,32.5778347,32.566639,32.5567551,32.5458052,32.5357867,32.5268961,32.5138636,32.5051784,32.4927251,32.4830665,32.4761401,32.472994,32.4659154,32.4543746,32.4479079,32.4456109,32.4450559,32.4421467,32.4368088,32.4369081,32.4282755,32.4253472,32.417796,32.4046326,32.3937649,32.383276,32.3772266,32.3708433,32.368239,32.3663068,32.3681836,32.3674677,32.3623099,32.3620472,32.3633132,32.3601972,32.3625554,32.3656225,32.3679243,32.365449,32.3490366,32.3348526,32.3281331,32.328181,32.3282387,32.328219,32.3281521,32.3281942,32.3283146,32.3284652,32.3284945,32.3284747,32.3285068,32.3284623,32.3284699,32.3283168,32.3284881,32.3282939,32.3283059,32.3284885,32.3283173,32.328255,32.3282621,32.3280175,32.3283076,32.3228458,32.3025838,32.2837481,32.2660126,32.2490936,32.2318429,32.2169014,32.2000606,32.181882,32.1638748,32.145883,32.1284689,32.1106098,32.0933267,32.0732255,32.0565843,32.0388402,32.0210906,32.0014736,31.9819484,31.9615367,31.94599,31.9284032,31.9098954,31.8919927,31.8740803,31.8587958,31.8456354,31.8275285,31.8072821,31.7872142,31.7708241,31.7520598,31.7338749,31.7160622,31.6990567,31.685201,31.6683284,31.6502702,31.6339555,31.6177417,31.6021115,31.5862065,31.5722019,31.5591425,31.5468064,31.5334551,31.5170671,31.5010555,31.4857736,31.4703785,31.4530374,31.4368718,31.4246471,31.4100812,31.394028,31.3774742,31.3629033,31.3511947,31.3421016,31.3316287,31.3188693,31.3076475,31.2942295,31.2793378,31.2651871,31.2513789,31.24066,31.2302515,31.2176633,31.202361,31.1876348,31.1727007,31.1615484,31.1514874,31.1420276,31.1317233,31.1210225,31.1109729,31.1047457,31.0951692,31.0828245,31.0691315,31.061016,31.0500195,31.0412343,31.0337267,31.0214083,31.0091086,30.9958549,30.98203,30.9725589,30.9655336,30.961153,30.9583572,30.9536361,30.9520923,30.946395,30.9410888,30.9349072,30.928652,30.9189927,30.9095054,30.905613,30.8946628,30.8835377,30.8722132,30.8603503,30.8421501,30.8246759,30.8062728,30.7899996,30.7746541,30.7557289,30.7410989,30.7278948,30.7088952,30.6892435,30.6709399,30.6520902,30.6339786,30.622899,30.6112068,30.5984575,30.5952165,30.5968347,30.5947506,30.5945862,30.5946134,30.593956,30.5942222,30.5953955,30.5953997,30.5953938,30.5942057,30.5944558,30.595026,30.5949843,30.5952165,30.5966323,30.586948,30.5760961,30.5650693,30.5534265,30.5438065,30.5351421,30.5256766,30.5145257,30.5057563,30.4990393,30.4948295,30.4888101,30.4806684,30.4719487,30.4635727,30.4592954,30.4574283,30.4554239,30.4462839,30.4397106,30.4384038,30.4381834,30.4379877,30.4371161,30.4348084,30.4328351,30.4358939,30.4442478,30.4474018,30.4554281,30.458571,30.4545417,30.4543823,30.4542241,30.4540025,30.4476636,30.4521596,30.4607795,30.4580429,30.4494179,30.4452661,30.4414173,30.4375919,30.4315039,30.4261591,30.4236737,30.4187226,30.4172202,30.4116514,30.4044444,30.403439,30.4040394,30.4006194,30.3902237,30.382794,30.3757163,30.3689249,30.3621521,30.3561502,30.3503511,30.3446993,30.3389576,30.333219,30.3333054,30.3273871,30.3210271,30.314124,30.30707,30.3021601,30.2974261,30.2975609,30.2989761,30.3045912,30.2907077,30.2724161,30.2553238,30.236162,30.2209636,30.2060746,30.1909248,30.1756789,30.1603898,30.1453435,30.1279953,30.1126541,30.0977123,30.0822151,30.0674338,30.0559491,30.0492333,30.0483896,30.0481172,30.0486619,30.0483953,30.0493447,30.0486958,30.0487032,30.0489771,30.0488432,30.0488832,30.0488515,30.0489484,30.0488609,30.0491397,30.0486922,30.0485854,30.0486399,30.0484413,30.0475104,30.0477322,30.0477151,30.0476216,30.0485587,30.0425982,30.033528,30.0274905,30.0179842,30.0059231,30.0024907,29.9910691,29.9782112,29.96631,29.9645202,29.9614949,29.9597695,29.9561512,29.9588282,29.9578756,29.9572829,29.9569766,29.9564419,29.956197,29.9569818,29.9578915,29.958136,29.9578768,29.9576923,29.9570057,29.9567951,29.9576175,29.9575051,29.9566267,29.9566282,29.9551868,29.9550549,29.955944,29.9571275,29.9567951,29.9593109,29.9620029,29.960799,29.9615694,29.9621612,29.9614436,29.9620029,29.9574772,29.959868,29.959701,29.9591854,29.9589734,29.9584065,29.9579042,29.9574824,29.9590051,29.9563931,29.957031,29.9565776,29.9563484,29.95623,29.9562698,29.9562665,29.9562579,29.9560295,29.9562264,29.9566011,29.9563931,29.9573154,29.9579891,29.9596762,29.9633068,29.9681582,29.9729652,29.9794238,29.9899345,30.0015705,30.0056644,30.0180968,30.0277624,30.0348076,30.0437517,30.044553,30.0482173,30.0488184,30.0481775,30.0485714,30.0488577,30.0488991,30.0483757,30.0490243,30.0489821,30.0489226,30.0491197,30.048945,30.0488652,30.048923,30.048872,30.0489176,30.0488804,30.0489307,30.0488966,30.0489278,30.0491186,30.0490468,30.0488489,30.0488619,30.0489528,30.0488882,30.0488068,30.0488706,30.0488852,30.0490002,30.0489248,30.0487611,30.0488768,30.0488171,30.0491572,30.0488308,30.0484679,30.0489697,30.0484701,30.0490594,30.0490268,30.049002,30.0492231,30.04832,30.0486199,30.0485211,30.0486766,30.04851,30.0485164,30.0485207,30.0485315,30.0485426,30.0486791,30.0488184,30.0466457,30.0457894,30.053524,30.0513113,30.0330897,30.0158572,30.0027887,29.9876518,29.9716765,29.9576357,29.9494325,29.9429562,29.9372376,29.9406198,29.9447873,29.9447244,29.9447195,29.9455162,29.9463288,29.9419702,29.9418763,29.9418411,29.9417632,29.9408523,29.9401584,29.9419311,29.9419878,29.9423854,29.9427192,29.9431043,29.9421209,29.942002,29.9430796,29.9422869,29.9418971,29.9419082,29.9418152,29.9420659,29.941895,29.9418865,29.9418865,29.942002,29.9449369,29.9501731,29.9578683,29.9613603,29.9646362,29.966494,29.9691236,29.9697512,29.9716122,29.9738942,29.9800474,29.9904125,29.9917045,29.9921273,29.9939539,29.9957089,29.9967826,29.9976885,29.9988265,30.0008335,30.008163,30.0095047,30.0082292,30.0067708,30.0088306,30.0194187,30.0306567,30.0414135,30.0529394,30.0639916,30.075206,30.0823303,30.0888533,30.0950689,30.1018521,30.107986,30.1102461,30.1122893,30.1143561,30.1163727,30.1184716,30.1208097,30.1231064,30.1264204,30.1336406,30.1405891,30.1475801,30.151914,30.1557399,30.1622492,30.1689298,30.1772475,30.187719,30.1972445,30.2105928,30.2275046,30.2442869,30.2632523,30.2830125,30.3041545,30.3222978,30.3382712,30.3540899,30.3712223,30.3833788,30.394535,30.4080512,30.4190201,30.4223517,30.4232489,30.4236348,30.424783,30.4272611,30.4384984,30.4394988,30.4405393,30.445572,30.4494212,30.4536966,30.4524923,30.4512944,30.4465134,30.4409137,30.4353813,30.4298946,30.4225949,30.4168324,30.4114911,30.4057936,30.3997036,30.3939256,30.3884027,30.3824092,30.376519,30.370966,30.3656092,30.3608347,30.3552631,30.3500071,30.3447489,30.3398202,30.3347094,30.3290675,30.3239067,30.3192156,30.316481,30.3161281,30.3164817,30.3164817,30.316481,30.3164848,30.3164925,30.3164799,30.3166402,30.3167719,30.3167404,30.3168353,30.3166172,30.3164813,30.3164633,30.3164701,30.3164606,30.3164489,30.3164493,30.316496,30.3164746,30.316627,30.3167314,30.3167313,30.3165209,30.316527,30.3165837,30.3165775,30.3165652,30.316524,30.3165701,30.3165512,30.316569,30.3165486,30.3165732,30.3165523,30.3155591,30.3119713,30.3065294,30.3003064,30.2939645,30.2845527,30.2771102,30.2708426,30.2635503,30.2549325,30.2474187,30.2471289,30.2472771,30.2474158,30.2475565,30.2477364,30.2478235,30.2479346,30.2504388,30.2525202,30.252378,30.2467353,30.240019,30.2357022,30.2357659,30.2358427,30.2360391,30.2361764,30.2339539,30.2310425,30.2315196,30.2321887,30.2363777,30.2364564,30.2365462,30.2415237,30.2468031,30.246761,30.2466271,30.2469025,30.2479421,30.2474105,30.2473069,30.2471401,30.2468592,30.2467995,30.2467505,30.2466962,30.2467297,30.2466341,30.2467456,30.2497215,30.2496946,30.247973,30.2477934,30.2477939,30.2476477,30.2440969,30.2456995,30.246735,30.2362666,30.2359139,30.2372353,30.2371048,30.237541,30.2314602,30.2239118,30.2163161,30.2161424,30.2159036,30.2159614,30.2140834,30.2100752,30.2057801,30.2017682,30.197492,30.1931017,30.1886284,30.1874868,30.1860665,30.1875058,30.1877115,30.1874878,30.187535,30.1876029,30.1875639,30.1875872,30.1875701,30.1874138,30.1875686,30.1877636,30.1877565,30.1877457,30.1877457,30.1878483,30.1877912,30.1875657,30.1875636,30.1875651,30.187591,30.1875951,30.1873983,30.1875739,30.1823432,30.1744131,30.1657838,30.1566318,30.1486442,30.1401289,30.1319062,30.1234119,30.1187278,30.1214583,30.1214864,30.1172225,30.1147067,30.1218259,30.1299332,30.1301227,30.1310018,30.1304445,30.1297697,30.1314254,30.1358468,30.1269188,30.1145907,30.1012817,30.0949458,30.0963041,30.0961663,30.0841568,30.0670281,30.0537339,30.0422234,30.0284751,30.0153574,30.0011909,29.9890124,29.9874866,29.989025,29.9890239,29.9890124,29.9890124,29.9890124,29.9890109,29.9891113,29.9891133,29.989034,29.9890386,29.9889321,29.9889256,29.9874489,29.9769762,29.9621112,29.9477574,29.9357698,29.9233092,29.9080018,29.8964045,29.8829088,29.8728625,29.8599723,29.8447456,29.8289724,29.8273439,29.8271901,29.8289584,29.8308363,29.8325583,29.8343155,29.8361249,29.8377596,29.8386866,29.8395933,29.8404937,29.8408012,29.8401336,29.8393227,29.8389926,29.8366096,29.8321052,29.8287807,29.8265652,29.8244758,29.8225147,29.8214048,29.8131636,29.808884,29.8044727,29.8006351,29.7975388,29.7905128,29.7951881,29.7901789,29.7828702,29.7766609,29.7714946,29.7708304,29.7715225,29.7704947,29.773934,29.7748058,29.778008,29.7755132,29.7743993,29.7691574,29.768883,29.7712489,29.778919,29.7766684,29.7775736,29.7785306,29.7828751,29.7840308,29.7845221,29.784567,29.784712,29.7847984,29.7849007,29.785005,29.7850723,29.7851231,29.7851504,29.7851202,29.7853172,29.7853951,29.7853823,29.7854904,29.7856053,29.7793483,29.7774685,29.7775085,29.7774571,29.777401,29.7773386,29.7790054,29.7788481,29.7815697,29.7779346,29.7729372,29.7708885,29.7736268,29.7765488,29.7757869,29.768006,29.7613835,29.7635525,29.7607735,29.7572391,29.7543711,29.7514918,29.7475192,29.7423644,29.7377858,29.7326898,29.7281244,29.7236123,29.7188598,29.7162013,29.7127331,29.7050657,29.6980038,29.6924337,29.6937858,29.6936303,29.6934933,29.6923798,29.6909907,29.6895921,29.6886854,29.691855,29.6923799,29.6920719,29.6904329,29.68872,29.6925165,29.6965352,29.6960631,29.6952933,29.694561,29.6951115,29.6952926,29.6952938,29.6953162,29.6952929,29.6953252,29.694988,29.6951832,29.6949994,29.6950198,29.6950108,29.6950055,29.6949877,29.6950163,29.6949249,29.6949961,29.6949708,29.6950051,29.6949905,29.694985,29.6949995,29.6949799,29.6949923,29.6949923,29.6949583,29.6949834,29.6939309,29.6950355,29.690861,29.6895042,29.6901981,29.6915756,29.6937939,29.6976423,29.6978369,29.6971457,29.6965373,29.6960463,29.6920662,29.6923088,29.6925511,29.6909345,29.6812728,29.6703971,29.6680619,29.666053,29.6638229,29.661334,29.6580477,29.6554521,29.6519818,29.6499565,29.6515075,29.6529857,29.6542449,29.6522375,29.6484697,29.6502838,29.6519585,29.6471379,29.6414476,29.6355497,29.6295354,29.6234628,29.6166257,29.6150693,29.6147526,29.6096299,29.6044961,29.5995464,29.5995156,29.5994571,29.5887632,29.5759157,29.5638083,29.5490237,29.5421814,29.5351037,29.5293553,29.5215814,29.5139625,29.5066623,29.4994738,29.4921952,29.4858184,29.4791777,29.4722598,29.4657127,29.4601318,29.4538347,29.4471473,29.4398762,29.4333161,29.4273955,29.4130703,29.4068638,29.4029223,29.4028277,29.4018215,29.4027972,29.4029548,29.4029489,29.4029915,29.4029375,29.4029872,29.4029251,29.40293,29.4029577,29.4029964,29.4030033,29.4029394,29.4028663,29.4028159,29.4029047,29.4029735,29.402971,29.402975,29.4030331,29.4029135,29.4029811,29.4030115,29.4030312,29.402827,29.4028474,29.4027223,29.4029174,29.402901,29.4029499,29.4028201,29.4027942,29.4027911,29.4028048,29.4028067,29.4027969,29.4027959,29.4029773,29.4028277,29.4028592,29.4018061,29.3971059,29.4091111,29.4198411,29.4215708,29.4215708,29.4226959,29.4228618,29.4233574,29.4238629,29.4238629,29.4228989,29.4229368,29.4232088,29.4224398,29.4236948,29.4239438,29.4242142,29.4245528,29.4249606,29.4250825,29.4252131,29.4237545,29.4259096,29.4255609,29.4257454,29.4257128,29.425811,29.4260218,29.4261176,29.4263047,29.4262991,29.4257508,29.4260027,29.4256512,29.4259096,29.4247173,29.4249482,29.424958,29.4236904,29.4231377,29.4247173,29.4228447,29.4228136,29.4228447,29.4228543,29.4223451,29.4214654,29.4244437,29.4383992,29.4375824,29.4346847,29.4436294,29.4598139,29.4764605,29.4848404,29.4994078,29.5183379,29.5340672,29.5470294,29.5640557,29.582609,29.6000422,29.6160879,29.6339853,29.6499316,29.6671681,29.6855317,29.703233,29.7195113,29.7331239,29.7479716,29.7621824,29.7747121,29.7871975,29.8061248,29.8246543,29.8378831,29.8553474,29.8740292,29.8888496,29.9050816,29.9166312,29.9275443,29.9436809,29.9604115,29.9785062,29.987382,30.0001081,30.0144879,30.030925,30.0436865,30.0534454,30.0563665,30.0678059,30.0698979,30.0705143,30.0729971,30.0848332,30.0953876,30.1094422,30.1183902,30.1288541,30.1462182,30.1635141,30.1718236,30.1798222,30.1851348,30.1910586,30.1981519,30.2061596,30.2170941,30.2311212,30.2455195,30.2562995,30.2667647,30.2792336,30.2910942,30.3041594,30.3185659,30.3368985,30.3576245,30.376199,30.3940374,30.4028829,30.411977,30.4261489,30.4326427,30.4475816,30.4661494,30.4853776,30.4971405,30.5093723,30.5078481,30.5093341,30.5092842,30.509353,30.5093762,30.5093762,30.5093762,30.5091158,30.5091379,30.509263,30.5089787,30.5091819,30.5091269,30.5091004,30.5090255,30.5090199,30.5091519,30.5090295,30.5090221,30.5090031,30.509008,30.5090656,30.5091015,30.5090948,30.5090794,30.5090517,30.5090143,30.5090114,30.5090218,30.5090334,30.5091114,30.5091279,30.509153,30.5090949,30.50916,30.5091342,30.5089669,30.5090961,30.5091137,30.5091224,30.5091075,30.5090916,30.5095308,30.5155731,30.5206869,30.5263948,30.5257386,30.521266,30.514133,30.5011709,30.502665,30.499565,30.4949795,30.4956101,30.4872253,30.4831199,30.4806895,30.4741044,30.4676042,30.4602505,30.4540554,30.4464342,30.4441357,30.4469813,30.4536219,30.4623732,30.4721759,30.4820104,30.4905107,30.4997449,30.5093935,30.5195377,30.5306249,30.5414408,30.5501126,30.5581459,30.5647478,30.56817,30.5714049,30.5737024,30.5759798,30.5782051,30.5862042,30.5905234,30.5983222,30.6084548,30.6158628,30.6159177,30.6159177,30.6159177,30.6159442,30.615945,30.6159507,30.6183986,30.6217144,30.6203113,30.6213548,30.6279375,30.6344472,30.6413469,30.647875,30.6594888,30.6647679,30.669116,30.6742839,30.6799182,30.686052,30.6920937,30.6974189,30.7032523,30.7090121,30.7117672,30.7123651,30.7084867,30.7059429,30.7008529,30.6962079,30.6926178,30.6837017,30.6775566,30.6815373,30.6875281,30.6897695,30.6926688,30.6971386,30.7012187,30.7081393,30.7225587,30.7279736,30.730748,30.7338141,30.7346181,30.7377856,30.742201,30.7476341,30.7407991,30.7334443,30.722359,30.7158168,30.7171441,30.7286475,30.7403671,30.7443231,30.7485107,30.7578267,30.7679732,30.7830614,30.7993252,30.8105303,30.8256231,30.8364127,30.846146,30.8576717,30.8691182,30.877842,30.8854459,30.8921306,30.8916212,30.8935258,30.8931056,30.891124,30.8850684,30.8886106,30.8953101,30.8954239,30.8923034,30.8886856,30.8848811,30.8786211,30.8696713,30.8651162,30.8621126,30.8612475,30.8638652,30.8733272,30.8769578,30.8799581,30.8846343,30.8895136,30.8901274,30.8907464,30.8913958,30.8919809,30.8954531,30.9053575,30.9072242,30.9023997,30.9117423,30.9236961,30.9362895,30.9496983,30.9626819,30.9750872,30.9862491,30.9966061,31.0067894,31.0187309,31.0291175,31.0425461,31.0559604,31.0680859,31.0802724,31.0933402,31.1062553,31.1192344,31.1342525,31.1498098,31.1643261,31.1792094,31.1954698,31.2123287,31.2291314,31.2450689,31.2610738,31.2744772,31.2887209,31.3044786,31.3196304,31.3407316,31.359863,31.3757457,31.3896056,31.3990416,31.3989884,31.3990272,31.3990265,31.3990258,31.3989941,31.3990038,31.3986705,31.399015,31.3991125,31.3991288,31.3991378,31.3989533,31.3990051,31.3989983,31.3989849,31.3990383,31.3989704,31.3989657,31.3989891,31.3989848,31.3990038,31.4014409,31.402124,31.4050046,31.411269,31.4223238,31.4317329,31.4443276,31.4605972,31.4747691,31.4887114,31.5046576,31.5193151,31.5338121,31.5477256,31.5613592,31.5786817,31.5947328,31.6087121,31.6269522,31.6416408,31.648432,31.6546877,31.659829,31.6655745,31.6711724,31.6779387,31.6856573,31.6976348,31.7099242,31.7255386,31.7393658,31.7540745,31.7684988,31.7822298,31.7969771,31.8135032,31.8248853,31.8315656,31.8483901,31.8644699,31.8819006,31.894479,31.9081803,31.9220112,31.9358082,31.9529987,31.9696143,31.9847475,31.9984339,32.0095213,32.0192349,32.0296916,32.0436333,32.0576482,32.0704691,32.083139,32.1089903,32.1227531,32.1352155,32.1465673,32.158499,32.1697046,32.1814462,32.1934507,32.2044362,32.2154614,32.2248038,32.2313629,32.2393833,32.2491167,32.2596715,32.2674543,32.2705449,32.2746968,32.2760694,32.2774765,32.2816896,32.2860913,32.2933042,32.3013663,32.3121074,32.3230633,32.3341045,32.3460087,32.3574034,32.3701118,32.3816616,32.3876021,32.3890064,32.3932268,32.39384,32.3950488,32.4019808,32.3996297,32.4000562,32.4017108,32.4019822,32.402006,32.4020007,32.4019826,32.4015237,32.401498,32.4014477,32.401465,32.4013086,32.4015204,32.401475,32.401423,32.4013926,32.4019865,32.401526,32.4014911,32.4015289,32.4015101,32.4015638,32.4014734,32.401478,32.401515,32.4014765,32.4017801,32.4015363,32.3985848,32.3901043,32.3828983,32.3730361,32.3656891,32.3541027,32.3421912,32.3282748,32.313231,32.2968492,32.2798912,32.2627632,32.2454408,32.2287909,32.2113132,32.1978597,32.1851649,32.1759155,32.178348,32.1883302,32.1896225,32.1901942,32.1812458,32.1748631,32.1748539,32.1747882,32.1749049,32.1748616,32.1753629,32.1751983,32.1750785,32.1754145,32.1751511,32.1748699,32.1751541,32.1750228,32.1749224,32.1749417,32.1749555,32.1749415,32.1749182,32.1750095,32.175166,32.1740686,32.1792362,32.1824583,32.192066,32.1919319,32.1875323,32.1807993,32.1750985,32.1804425,32.1933881,32.2068119,32.2215396,32.2386683,32.2570896,32.2755244,32.2938933,32.3123943,32.330629,32.3465337,32.3601542,32.3703024,32.370427,32.3829743,32.3939728,32.3963634,32.4030209,32.4137359,32.4146754,32.4146817,32.4227966,32.4312838,32.4407674,32.4512995,32.4656893,32.4812548,32.4859967,32.4918643,32.5003348,32.5155014,32.5319325,32.5513967,32.5690746,32.585922,32.604545,32.6221628,32.63993,32.6589936,32.6783401,32.6988503,32.718401,32.7390731,32.7589929,32.7802236,32.8002107,32.8181295,32.8321041,32.8421897,32.8465203,32.8594205,32.873199,32.8879281,32.9006235,32.9160909,32.9340374,32.9518378,32.9695445,32.9888458,33.0069707,33.0270578,33.0491246,33.0695959,33.0891425,33.1109744,33.1315089,33.1537521,33.1745248,33.1958054,33.2159867,33.2379765,33.2581503,33.2795075,33.2986757,33.3119484,33.3235671,33.3393592,33.3545015,33.3651651,33.3725843,33.3794427,33.3869677,33.3930092,33.3951118,33.4000425,33.4081553,33.4119601,33.4154804,33.4226033,33.4293714,33.4357546,33.4466682,33.4583673,33.4721752,33.4897897,33.5063839,33.5251106,33.544604,33.564614,33.5843942,33.6011374,33.6183707,33.6348775,33.6530081,33.6721243,33.6906493,33.7108951,33.7297246,33.7481566,33.7690489,33.7878213,33.8090325,33.8308589,33.8510288,33.8723171,33.8939875,33.9138599,33.929162,33.9431777,33.9586869,33.9736239,33.9884392,34.0021118,34.0183205,34.0336234,34.0487774,34.0668403,34.0850521,34.1014219,34.1200188,34.1381324,34.1568966,34.1735717,34.1922368,34.2125463,34.2327343,34.2516862,34.2694625,34.2883671,34.3090363,34.3269202,34.3442642,34.3610804,34.3797262,34.3985789,34.4177165,34.4353859,34.4545089,34.4720834,34.4894228,34.5077363,34.5251559,34.5423189,34.5596154,34.5778869,34.5924974,34.5945248,34.5944867,34.5944934,34.5944991,34.5945109,34.5944907,34.5944748,34.5944854,34.5944891,34.5946518,34.5946711,34.5947363,34.5947038,34.5947789,34.5947491,34.5947497,34.5947625,34.5947545,34.5947586,34.594742,34.5947335,34.5947335,34.5947786,34.5947756,34.5947205,34.5947176,34.5947213,34.5946146,34.5947492,34.594756,34.5947873,34.5947612,34.5947712,34.5947759,34.5948163,34.5946867,34.6017386,34.6016788,34.5958313,34.5891509,34.5896764,34.5888339,34.5917502,34.5966768,34.6047014,34.6149298,34.6262499,34.6405385,34.6444812,34.6487808,34.6514862,34.6590614,34.6754248,34.6952135,34.7144326,34.7342148,34.7525363,34.7703032,34.7895298,34.8091983,34.8292074,34.8474105,34.8646119,34.88414,34.9042143,34.921876,34.9420986,34.9607739,34.9799413,35.000891,35.0088318,35.0099364,35.008398,35.0044774,35.0047459,35.0049589,35.0051372,35.0053809,35.0053601,35.0059824,35.0066964,35.0050424,35.0049261,35.0048397,35.0048197,35.0079094,35.0114751,35.0194762,35.0290767,35.0387478,35.0480979,35.0566035,35.0645309,35.0726382,35.0814756,35.088602,35.0962417,35.1023702,35.1111509,35.113574,35.1021981,35.0954444,35.0829986,35.080734,35.0665656,35.0616827,35.0632863,35.0669839,35.0742183,35.0813559,35.0885385,35.0965258,35.1039106,35.1047132,35.1073164,35.1075969,35.1061973,35.1055435,35.105164,35.105784,35.1063613,35.1065287,35.1050557,35.106196,35.1058121,35.0986265,35.0900263,35.081275,35.0739654,35.0675105,35.0639599,35.0645294,35.0640966,35.0645294,35.0645294,35.0645294,35.0645294,35.0645294,35.0645322,35.0645486,35.0645577,35.0645296,35.0645222,35.0645523,35.0645284,35.064505,35.0645005,35.0645542,35.0634664,35.0644223,35.0652777,35.0640558,35.0592415,35.0558055,35.0523997,35.0488635,35.0448182,35.0401843,35.0358741,35.030635,35.0253887,35.0202859,35.0135096,35.0077361,35.0012449,34.9949984,34.9887588,34.9817781,34.9787718,34.9826159,34.9862387,34.9897118,34.9930999,34.9934584,34.9937824,35.0025274,35.017368,35.0332082,35.0391018,35.029908,35.0265375,35.0271522,35.0302848,35.0368259,35.047355,35.0605923,35.0738915,35.0744572,35.0751699,35.0758735,35.0763587,35.0727691,35.0652964,35.0644247,35.0684066,35.0759623,35.0902105,35.1033375,35.1154314,35.128837,35.1436452,35.1534231,35.1648985,35.18431,35.2018107,35.2190945,35.2345084,35.2490647,35.2654321,35.284429,35.3044611,35.3244826,35.345128,35.3557055,35.3640564,35.3711625,35.3757293,35.3814413,35.3862194,35.3889273,35.3909351,35.3956468,35.4004878,35.4050212,35.4127504,35.4220817,35.4307836,35.4394532,35.4475328,35.4549797,35.464288,35.4773664,35.483616,35.4892465,35.4952292,35.5039893,35.5126304,35.519325,35.5263163,35.5304126,35.5318327,35.5309028,35.5312918,35.5301682,35.5292555,35.5289845,35.5293723,35.5288397,35.5288977,35.5289845,35.5290159,35.5290302,35.5289874,35.5289909,35.5288933,35.5289843,35.528964,35.5289934,35.5290217,35.528932,35.5289492,35.5289703,35.5289723,35.5290658,35.5288293,35.5288409,35.5288004,35.5290036,35.5288503,35.5288727,35.5288727,35.5288727,35.5288727,35.5288727,35.5288419,35.5288419,35.5288452,35.5288557,35.5288365,35.5288345,35.5288391,35.5288479,35.5291518,35.5292278,35.5289354,35.5294794,35.5297754,35.5298036,35.5297781,35.5297754,35.5297754,35.5297666,35.529744,35.5300424,35.5299654,35.5339859,35.5309401,35.5278771,35.5217775,35.5141771,35.5111428,35.4994334,35.4963824,35.4904935,35.4830319,35.4717062,35.4574662,35.4394875,35.4266782,35.4117447,35.3926383,35.377855,35.367649,35.3532386,35.3371731,35.323655,35.3117692,35.302201,35.29322,35.2845946,35.2810577,35.2829158,35.2830549,35.2784036,35.2678001,35.2520653,35.2382046,35.2252827,35.2138626,35.2065143,35.201923,35.197377,35.19283,35.1898783,35.1904123,35.1899125,35.189917,35.1904394,35.1868323,35.1762627,35.1643605,35.1524732,35.1406332,35.1286086,35.1195993,35.1117762,35.1048929,35.1009459,35.0976543,35.0936916,35.0873559,35.0808512,35.0745756,35.0679109,35.0583592,35.0460352,35.0345984,35.0225393,35.0097146,35.0016478,34.9969775,34.9929113,34.9909038,34.9910128,34.9869085,34.9825768,34.9782519,34.9711568,34.9576821,34.9425257,34.9248805,34.913242,34.9085861,34.9063653,34.9091291,34.9145187,34.9253092,34.9385273,34.947186,34.9551148,34.9546357,34.9584739,34.9623448,34.966522,34.9700623,34.9711846,34.9722381,34.9733671,34.9787203,34.9866368,34.9940989,35.0017038,35.0069728,35.010289,35.0159626,35.0271007,35.0396161,35.038473,35.039775,35.0454316,35.0515274,35.0577443,35.0645163,35.0707673,35.0763362,35.0820775,35.0886579,35.0934724,35.0963778,35.0995505,35.1016518,35.1059921,35.1100548,35.1122864,35.1143879,35.1174734,35.1166029,35.1186637,35.1208743,35.1274509,35.1349042,35.1431939,35.1507018,35.1586973,35.1601679,35.1614299,35.1698075,35.178032,35.1865248,35.1949416,35.2026903,35.2018772,35.2025624,35.2020213,35.2062784,35.2097034,35.2146846,35.2186688,35.2179974,35.2210796,35.2159135,35.2150697,35.2113672],[-84.3051758,-84.3273246,-84.3438356,-84.3621145,-84.3782498,-84.3935971,-84.3911732,-84.3890003,-84.3786019,-84.3914546,-84.3937695,-84.4013967,-84.4049403,-84.4033858,-84.4144991,-84.4276159,-84.4421424,-84.4564173,-84.4613678,-84.4839758,-84.4887164,-84.5062481,-84.5248002,-84.5424602,-84.5646385,-84.5866331,-84.6059195,-84.6256142,-84.6374356,-84.6520712,-84.6677062,-84.680744,-84.69883,-84.7179306,-84.7318536,-84.7456314,-84.7562372,-84.7596283,-84.7612124,-84.7728107,-84.786625,-84.7947233,-84.8018032,-84.8058839,-84.807025,-84.8150928,-84.8312521,-84.8458617,-84.8593035,-84.8675704,-84.878876,-84.89168,-84.9028912,-84.9093494,-84.9206745,-84.9385745,-84.9570798,-84.9714897,-84.9836637,-84.9990069,-85.0169191,-85.0355808,-85.0572835,-85.0768118,-85.0936392,-85.1059977,-85.1170413,-85.1307989,-85.1454572,-85.1637588,-85.1798475,-85.196041,-85.21059,-85.2245422,-85.2382569,-85.2524358,-85.2679604,-85.2825737,-85.2971749,-85.3093569,-85.3197978,-85.3321764,-85.3447665,-85.3571857,-85.3746585,-85.3932607,-85.4146784,-85.4349643,-85.455994,-85.4738014,-85.4921056,-85.5117281,-85.5306126,-85.549378,-85.569207,-85.5869292,-85.6073163,-85.6252638,-85.6456535,-85.6678863,-85.6920666,-85.7143132,-85.7322202,-85.7566331,-85.7814344,-85.8047588,-85.8278582,-85.8514679,-85.8755536,-85.8989607,-85.9212944,-85.9424582,-85.9629879,-85.9827673,-86.0033713,-86.0237652,-86.0458941,-86.0677511,-86.0916638,-86.1166861,-86.1422597,-86.1670989,-86.1908249,-86.2140041,-86.2386041,-86.2623546,-86.2820335,-86.3044964,-86.3224878,-86.3217538,-86.3317209,-86.3372877,-86.337309,-86.3372514,-86.3372421,-86.337279,-86.3372613,-86.3373469,-86.3375387,-86.337604,-86.3375933,-86.3376304,-86.3375527,-86.3375601,-86.3373134,-86.3370365,-86.3372558,-86.3373273,-86.3375594,-86.3372971,-86.3374133,-86.3372955,-86.3376103,-86.3373611,-86.3360363,-86.3378592,-86.3437949,-86.3556782,-86.3689315,-86.3846975,-86.4015093,-86.4152339,-86.4258949,-86.4341185,-86.4398985,-86.4483872,-86.4608243,-86.4729043,-86.4831926,-86.4945197,-86.5071595,-86.5162411,-86.5245639,-86.5313289,-86.5409554,-86.5586452,-86.5729914,-86.5875195,-86.6036833,-86.617037,-86.631198,-86.6480807,-86.663473,-86.6687176,-86.6781064,-86.6949664,-86.7076299,-86.7183131,-86.7301998,-86.7425953,-86.7512885,-86.7614012,-86.7760449,-86.7925313,-86.8089401,-86.8247704,-86.8378959,-86.8516759,-86.8665498,-86.8805601,-86.8958161,-86.9122567,-86.9280967,-86.9418762,-86.9548371,-86.9694358,-86.9858835,-87.0004018,-87.014157,-87.0280989,-87.043812,-87.0625131,-87.082416,-87.1031732,-87.1233355,-87.1443056,-87.1627462,-87.1818657,-87.2013561,-87.2199459,-87.2382332,-87.2574129,-87.2769698,-87.2949576,-87.3129726,-87.3304072,-87.3491384,-87.3717501,-87.3927512,-87.412445,-87.433902,-87.4525246,-87.473308,-87.4974268,-87.5189197,-87.536606,-87.5562319,-87.5768553,-87.594903,-87.6148136,-87.6350677,-87.6530083,-87.6731667,-87.6907528,-87.7103101,-87.7325643,-87.755036,-87.7767482,-87.8001099,-87.8233921,-87.8459861,-87.8682104,-87.8879937,-87.9110178,-87.9342703,-87.9551257,-87.9750624,-87.9961459,-88.0159911,-88.0342458,-88.0531374,-88.0708034,-88.0797175,-88.0930434,-88.1042529,-88.1014838,-88.0964108,-88.0935321,-88.1072451,-88.120166,-88.1221407,-88.1262829,-88.1273447,-88.1225993,-88.1185497,-88.1295092,-88.1431364,-88.1545722,-88.1633546,-88.1627496,-88.164056,-88.1636184,-88.1635537,-88.1628771,-88.1636828,-88.163331,-88.1633528,-88.1633234,-88.1628456,-88.163215,-88.1632969,-88.1649383,-88.1633546,-88.1619295,-88.1608361,-88.1797522,-88.1952027,-88.2112692,-88.2266756,-88.2442671,-88.2622093,-88.2815951,-88.3007814,-88.3225486,-88.3438264,-88.3660706,-88.3856774,-88.4065173,-88.4266286,-88.4497887,-88.4747625,-88.4973883,-88.5185676,-88.5413461,-88.564724,-88.5896637,-88.613324,-88.6368922,-88.6591215,-88.6779027,-88.7012531,-88.7244214,-88.7472499,-88.7704739,-88.7928993,-88.8180255,-88.8432827,-88.8688573,-88.8924655,-88.9172109,-88.9400284,-88.9618745,-88.9842746,-89.003717,-89.027056,-89.051515,-89.0759015,-89.0987927,-89.11984,-89.1444275,-89.1670343,-89.1915449,-89.2126344,-89.2329846,-89.2553419,-89.2774605,-89.3011816,-89.3218668,-89.3446087,-89.3676817,-89.3896083,-89.4112535,-89.4310874,-89.4498428,-89.4715787,-89.4946979,-89.5175762,-89.5408976,-89.5615717,-89.5823447,-89.6048167,-89.6271631,-89.6473842,-89.6693493,-89.6917429,-89.7143931,-89.7359522,-89.7475451,-89.7543693,-89.7607462,-89.7692081,-89.7846152,-89.7991163,-89.8151302,-89.8312415,-89.8473986,-89.8633417,-89.8772868,-89.8907838,-89.9041046,-89.9179121,-89.9310769,-89.9460425,-89.9566957,-89.9626273,-89.9625546,-89.962393,-89.9626219,-89.9627502,-89.9625587,-89.962395,-89.9630299,-89.9625987,-89.962677,-89.962734,-89.9627376,-89.9627972,-89.9629582,-89.9626426,-89.9623835,-89.9623627,-89.9631403,-89.9628741,-89.9627189,-89.9627086,-89.9624403,-89.9626426,-89.9671227,-89.985174,-90.0038414,-90.0138086,-90.0218668,-90.0371769,-90.0504504,-90.0608208,-90.0715954,-90.0735287,-90.0706617,-90.0699522,-90.0643023,-90.0678069,-90.0664403,-90.0655456,-90.0650886,-90.0642548,-90.0645014,-90.0651399,-90.0662793,-90.0646745,-90.0636614,-90.0632259,-90.0647748,-90.061943,-90.0616739,-90.0620035,-90.0616871,-90.0618267,-90.0626007,-90.0625538,-90.0623514,-90.0620957,-90.061943,-90.0646779,-90.0681356,-90.0669614,-90.0678887,-90.0681413,-90.0678327,-90.0681356,-90.0657598,-90.0655122,-90.0652023,-90.0650869,-90.0653102,-90.0658132,-90.0662807,-90.0657676,-90.0657423,-90.0641243,-90.0652485,-90.0645903,-90.064378,-90.0644739,-90.0645501,-90.0645625,-90.0639758,-90.0636348,-90.0632474,-90.0629125,-90.0641243,-90.0622288,-90.0616412,-90.0594821,-90.0562782,-90.0566965,-90.0569814,-90.0575119,-90.0511178,-90.0389504,-90.0224293,-90.0135326,-90.0010175,-89.981357,-89.9647311,-89.9632848,-89.962454,-89.9627352,-89.9625872,-89.9624574,-89.9623103,-89.962923,-89.962505,-89.9627908,-89.9627186,-89.9627579,-89.9628913,-89.9629451,-89.9628887,-89.9628853,-89.96271,-89.9627974,-89.9627082,-89.9627847,-89.962808,-89.9628019,-89.9630248,-89.9626096,-89.962838,-89.9627637,-89.9627437,-89.9626747,-89.9626727,-89.9627372,-89.9628532,-89.9629666,-89.9628419,-89.9626405,-89.9629182,-89.9626114,-89.9631683,-89.9628093,-89.9623937,-89.9629519,-89.9624108,-89.9627089,-89.9628616,-89.9627755,-89.9628757,-89.9625818,-89.96242,-89.962486,-89.9626625,-89.9624686,-89.9624982,-89.9624987,-89.9624969,-89.9624559,-89.9624336,-89.9627352,-89.9616641,-89.9606972,-89.9492587,-89.9389775,-89.9395854,-89.9396195,-89.9387829,-89.9441833,-89.9494789,-89.9562612,-89.9603985,-89.9635606,-89.9662883,-89.9750522,-89.9848618,-89.9862646,-89.9861817,-89.9867016,-89.9917354,-89.9945534,-89.9944559,-89.9944988,-89.9944584,-89.994946,-89.9942526,-89.9942101,-89.9942279,-89.9941622,-89.9936257,-89.9936138,-89.9942406,-89.9943577,-89.9936628,-89.9940157,-89.9944837,-89.9945179,-89.9943001,-89.9944203,-89.9944512,-89.9944614,-89.9944614,-89.9943577,-89.9925906,-89.9937749,-89.9981088,-90.0000297,-90.0087078,-90.0153026,-90.0258363,-90.0297903,-90.0377756,-90.0478308,-90.0484011,-90.0492787,-90.0548469,-90.0746704,-90.0949567,-90.1164968,-90.1358715,-90.1583648,-90.178802,-90.2001345,-90.2194123,-90.2401839,-90.2610107,-90.2799665,-90.3003394,-90.3179435,-90.3345282,-90.3503932,-90.3674039,-90.3838005,-90.4003716,-90.4194594,-90.4422433,-90.4641129,-90.4858953,-90.5080018,-90.5329367,-90.5551955,-90.5792596,-90.6017002,-90.6250516,-90.6511461,-90.6773316,-90.7017946,-90.7258504,-90.7488196,-90.7719778,-90.7948869,-90.8187216,-90.8425152,-90.8671125,-90.8881606,-90.9096978,-90.9294647,-90.9467965,-90.960803,-90.9716418,-90.9821115,-90.9891039,-90.9929929,-91.0058096,-91.022132,-91.0356957,-91.0499163,-91.0674747,-91.0847928,-91.1018977,-91.1176707,-91.1324277,-91.1409507,-91.1447553,-91.1554755,-91.1688332,-91.1782614,-91.1949505,-91.2131674,-91.2315701,-91.2521378,-91.2743141,-91.2949088,-91.3154804,-91.3369397,-91.35804,-91.3788259,-91.399382,-91.4201578,-91.4415798,-91.4656116,-91.4889304,-91.5121529,-91.5333849,-91.5538016,-91.5759476,-91.5976994,-91.6182563,-91.6373315,-91.6556204,-91.6759974,-91.6954307,-91.714146,-91.733038,-91.7518937,-91.7726175,-91.7916227,-91.8137638,-91.8299357,-91.8304352,-91.8298949,-91.8298949,-91.8299357,-91.8298705,-91.8298617,-91.8298801,-91.8298644,-91.8293816,-91.8294105,-91.8294696,-91.8296983,-91.8300217,-91.8300072,-91.829992,-91.8300009,-91.8300312,-91.8300213,-91.8300567,-91.8300673,-91.829696,-91.8294919,-91.8295937,-91.8297877,-91.8299911,-91.8300591,-91.8300225,-91.8300301,-91.8300445,-91.8300122,-91.8300687,-91.8300673,-91.8300768,-91.8300789,-91.829913,-91.8331406,-91.8520597,-91.8757864,-91.8980121,-91.9206678,-91.9414434,-91.9633565,-91.9837103,-92.0062033,-92.0274162,-92.0490908,-92.0720054,-92.0954385,-92.1175512,-92.1422948,-92.1647347,-92.1879952,-92.2104338,-92.23263,-92.2570044,-92.2799836,-92.3009196,-92.3227777,-92.3460385,-92.369855,-92.3930233,-92.416748,-92.4395122,-92.4636154,-92.4884406,-92.5116732,-92.5346027,-92.5574678,-92.5806212,-92.6047091,-92.6263256,-92.6495533,-92.67262,-92.6967695,-92.7206257,-92.7427208,-92.766821,-92.7913635,-92.8161146,-92.8386609,-92.8605283,-92.882203,-92.9038067,-92.925017,-92.9477128,-92.9686132,-92.9895575,-93.0118692,-93.0345734,-93.0596318,-93.0852445,-93.1090749,-93.1330437,-93.1577254,-93.1802843,-93.1968796,-93.2162353,-93.2369146,-93.2549346,-93.2768914,-93.2943596,-93.3115448,-93.3293382,-93.3504942,-93.3735113,-93.3945224,-93.4187245,-93.4403088,-93.4628798,-93.4838998,-93.5054437,-93.5292619,-93.5527458,-93.5708579,-93.5694294,-93.5707539,-93.5708138,-93.5708582,-93.5708805,-93.5707004,-93.5706467,-93.5706896,-93.5706621,-93.5706603,-93.5707097,-93.5706535,-93.570816,-93.5707867,-93.5707867,-93.5707404,-93.5706859,-93.5707157,-93.5707579,-93.5707624,-93.570737,-93.57074,-93.5711306,-93.5707108,-93.5740212,-93.5925198,-93.6125311,-93.6338536,-93.6527072,-93.6721813,-93.6913851,-93.7110438,-93.7292393,-93.749806,-93.7727085,-93.794137,-93.8169854,-93.8371455,-93.8582232,-93.8825494,-93.906949,-93.9314545,-93.9552396,-93.9805135,-94.0030762,-94.0232799,-94.0418403,-94.0618811,-94.0840939,-94.1060243,-94.1272727,-94.1359692,-94.1346845,-94.1413547,-94.1529806,-94.167176,-94.1804731,-94.1946545,-94.2116156,-94.2087377,-94.2116243,-94.2116234,-94.2116156,-94.2116156,-94.2116156,-94.2116139,-94.2117519,-94.2117551,-94.2118634,-94.2118575,-94.2119861,-94.2115925,-94.2095567,-94.2192011,-94.2341754,-94.249152,-94.263924,-94.2791481,-94.2977948,-94.3120668,-94.3285319,-94.3409141,-94.3557119,-94.3729114,-94.389564,-94.414046,-94.4394899,-94.4644555,-94.4888806,-94.5116372,-94.5351353,-94.5593782,-94.582245,-94.6071342,-94.6317356,-94.6559948,-94.6791191,-94.7013396,-94.7250366,-94.7467271,-94.7691803,-94.7931695,-94.8177817,-94.8426686,-94.8668333,-94.8898485,-94.9149705,-94.9375484,-94.9598305,-94.9838035,-95.0084202,-95.0322528,-95.0539933,-95.0719397,-95.0914898,-95.1124667,-95.1310519,-95.152481,-95.1739733,-95.1968262,-95.2187536,-95.2378562,-95.2581779,-95.2780989,-95.2978893,-95.3186094,-95.3369838,-95.3547528,-95.3654825,-95.3783176,-95.3987233,-95.4181803,-95.4368887,-95.456835,-95.4760852,-95.4978813,-95.5170105,-95.5374993,-95.5621296,-95.5798086,-95.6020366,-95.6209502,-95.6424551,-95.6636837,-95.68478,-95.7065571,-95.7278614,-95.749733,-95.7721725,-95.7949697,-95.8142748,-95.8355775,-95.8578256,-95.8790387,-95.9007694,-95.922687,-95.9444572,-95.9646805,-95.985197,-96.0083862,-96.0289354,-96.0525542,-96.0768648,-96.0993793,-96.1218633,-96.1418891,-96.1635005,-96.1869689,-96.2092012,-96.2310186,-96.2551464,-96.2794462,-96.301387,-96.3267529,-96.349496,-96.3746647,-96.3972071,-96.4194199,-96.4432758,-96.4666653,-96.4906237,-96.5118669,-96.5300898,-96.5474582,-96.5692126,-96.5922388,-96.6133176,-96.6374208,-96.6595515,-96.6826387,-96.7042722,-96.7272217,-96.7490864,-96.7739688,-96.7970373,-96.8211438,-96.8442541,-96.8658778,-96.8868403,-96.9021006,-96.9019925,-96.9023357,-96.9022412,-96.902078,-96.9022007,-96.9020749,-96.90211,-96.9019903,-96.9018705,-96.9019047,-96.9018274,-96.9018151,-96.9018945,-96.9019142,-96.9019067,-96.901948,-96.9019511,-96.9019473,-96.9020088,-96.9019414,-96.9019361,-96.901965,-96.9019366,-96.9019079,-96.9019079,-96.9019532,-96.9019216,-96.9033236,-96.9019853,-96.9218103,-96.9452377,-96.9684542,-96.9945896,-97.0194329,-97.0423112,-97.0683249,-97.0949022,-97.1198866,-97.1465076,-97.1715961,-97.1970894,-97.2216314,-97.2473756,-97.2719717,-97.2949048,-97.3192436,-97.3433895,-97.3703273,-97.394405,-97.4198197,-97.4441272,-97.469735,-97.4958223,-97.521259,-97.5456938,-97.5715256,-97.5949492,-97.6195729,-97.6450595,-97.6680602,-97.6902169,-97.7112268,-97.7330134,-97.755595,-97.7766182,-97.7999637,-97.8248332,-97.8500171,-97.8728096,-97.8950279,-97.9187246,-97.9434237,-97.9677906,-97.9871022,-98.0070859,-98.0285542,-98.0465369,-98.067569,-98.0898309,-98.1117833,-98.1322127,-98.1521858,-98.1716649,-98.1910621,-98.2116798,-98.2304163,-98.249883,-98.2704789,-98.2910138,-98.3125984,-98.3336044,-98.3547187,-98.3776855,-98.3991346,-98.4184323,-98.4321544,-98.4393874,-98.4420916,-98.4421992,-98.4420801,-98.4416623,-98.4420462,-98.4417413,-98.4420015,-98.4420623,-98.4422044,-98.4421766,-98.4422474,-98.4422535,-98.4421892,-98.4422033,-98.4422172,-98.4421907,-98.4422605,-98.4422094,-98.4421037,-98.4422456,-98.4421811,-98.442065,-98.442127,-98.4422451,-98.4421795,-98.4421981,-98.4416654,-98.4421866,-98.4424071,-98.4422051,-98.4422228,-98.4416598,-98.4417097,-98.4419328,-98.4416862,-98.4417017,-98.4416858,-98.4416642,-98.4416702,-98.4424005,-98.4421992,-98.443969,-98.4617981,-98.4770016,-98.4795455,-98.4796453,-98.479866,-98.479866,-98.4829642,-98.4868792,-98.485969,-98.4877737,-98.4877737,-98.4868991,-98.4871962,-98.4877761,-98.4878587,-98.4880643,-98.4880638,-98.4882678,-98.4884631,-98.4884437,-98.4880377,-98.4871865,-98.4875204,-98.4862923,-98.4866655,-98.4866538,-98.4863014,-98.4863374,-98.4860623,-98.4860206,-98.4860618,-98.4858503,-98.4857535,-98.4856024,-98.4864695,-98.4862923,-98.4891968,-98.4887821,-98.4896166,-98.4900058,-98.4879643,-98.4891968,-98.4868861,-98.4869063,-98.4868861,-98.486889,-98.4849384,-98.4812999,-98.4813208,-98.4774843,-98.4911451,-98.5027438,-98.5147152,-98.5157777,-98.5192459,-98.5371072,-98.5481692,-98.5543431,-98.5650834,-98.5824599,-98.5912258,-98.5969658,-98.6000376,-98.6064138,-98.6130983,-98.6233851,-98.6317383,-98.6423054,-98.6542831,-98.6658279,-98.6810644,-98.697462,-98.7134223,-98.7297935,-98.7473862,-98.7532584,-98.7589568,-98.7738555,-98.7857385,-98.7959335,-98.8108815,-98.821281,-98.8378366,-98.8577869,-98.8738769,-98.888269,-98.8994705,-98.921338,-98.9406728,-98.9587903,-98.9740887,-98.9944201,-99.0158461,-99.0389721,-99.0568666,-99.0816714,-99.1047441,-99.1269278,-99.1464652,-99.1663313,-99.1827029,-99.2029636,-99.2223537,-99.2318541,-99.2416985,-99.2633593,-99.2862561,-99.3108562,-99.3353206,-99.3595658,-99.3834735,-99.4038053,-99.4236418,-99.4430977,-99.4635565,-99.4868859,-99.5063184,-99.5270998,-99.5503928,-99.5695393,-99.5821037,-99.5951339,-99.6067989,-99.6212006,-99.6435672,-99.6653031,-99.682719,-99.7033386,-99.719045,-99.7299048,-99.7391454,-99.7574828,-99.7732821,-99.7732322,-99.7730391,-99.7731956,-99.7732621,-99.7732839,-99.7732839,-99.7732839,-99.773128,-99.7731031,-99.772818,-99.7730711,-99.7728358,-99.7730955,-99.7731663,-99.7730089,-99.7730211,-99.7730237,-99.7730103,-99.7729978,-99.7730002,-99.7730147,-99.7730146,-99.7730367,-99.773026,-99.7730505,-99.7731059,-99.7729962,-99.7729884,-99.7728914,-99.7729698,-99.7730663,-99.77314,-99.7731381,-99.7731278,-99.773153,-99.7731318,-99.7730065,-99.7730784,-99.7731009,-99.773103,-99.7730981,-99.7730983,-99.7759383,-99.7950482,-99.8160683,-99.8395856,-99.8625217,-99.8855137,-99.9075319,-99.9274127,-99.9498017,-99.9722728,-99.994406,-100.0168538,-100.0376638,-100.0580438,-100.0790289,-100.1000557,-100.1207708,-100.1442924,-100.1676055,-100.192065,-100.2154674,-100.2390158,-100.2638933,-100.2856164,-100.3056967,-100.3260139,-100.3472252,-100.3702842,-100.3915278,-100.4123222,-100.4350974,-100.4573901,-100.4812851,-100.5059455,-100.5284941,-100.5512133,-100.573189,-100.5979841,-100.622992,-100.6453061,-100.665166,-100.6869609,-100.7089451,-100.7285376,-100.7439921,-100.7445242,-100.7445242,-100.7445242,-100.744506,-100.7444978,-100.7444867,-100.7565646,-100.7966809,-100.8183972,-100.8370042,-100.8548652,-100.8719909,-100.8902339,-100.9084917,-100.9440841,-100.9641545,-100.9842257,-101.0068776,-101.0288272,-101.0540171,-101.0793678,-101.1019804,-101.1266147,-101.152225,-101.1642136,-101.1659975,-101.1804691,-101.2040592,-101.2266571,-101.249588,-101.2759296,-101.3017722,-101.3262452,-101.3525032,-101.376332,-101.3984966,-101.4460223,-101.4711558,-101.4943204,-101.5160641,-101.5306587,-101.5536369,-101.578407,-101.6010098,-101.6253506,-101.649218,-101.6728631,-101.6962518,-101.7184191,-101.7392346,-101.7584218,-101.7827445,-101.8067369,-101.8270358,-101.845517,-101.8713383,-101.8950086,-101.9172642,-101.9407319,-101.9582454,-101.971627,-101.9933967,-102.0082217,-102.0320534,-102.0539409,-102.0737593,-102.0935717,-102.1186236,-102.1419664,-102.1668289,-102.1928225,-102.2187721,-102.2442502,-102.2713863,-102.2939639,-102.3187451,-102.3429559,-102.3661984,-102.3913297,-102.4152384,-102.4403164,-102.4623417,-102.4861099,-102.5119566,-102.5377683,-102.5635154,-102.5891976,-102.6136763,-102.6406794,-102.6645647,-102.6913158,-102.7180047,-102.7450755,-102.7723452,-102.8014074,-102.8279361,-102.8513567,-102.8705551,-102.8950112,-102.9113827,-102.9262664,-102.9446472,-102.9640745,-102.9845958,-103.0043405,-103.0232321,-103.0432241,-103.0621598,-103.0807928,-103.1006538,-103.120761,-103.1404019,-103.1600447,-103.1785119,-103.19711,-103.2170419,-103.2367489,-103.2558579,-103.2672297,-103.2788277,-103.2896513,-103.3007569,-103.3129078,-103.3254961,-103.3380585,-103.3499727,-103.3632944,-103.3779289,-103.3934179,-103.4106242,-103.4260419,-103.4342743,-103.4452066,-103.4600478,-103.4730434,-103.4807406,-103.4807125,-103.4807308,-103.4807305,-103.4807435,-103.4807479,-103.4808019,-103.4805504,-103.4803374,-103.480642,-103.4802668,-103.480595,-103.4803208,-103.4803114,-103.480313,-103.480316,-103.4803153,-103.4803055,-103.4803636,-103.4803283,-103.4807852,-103.4805067,-103.4828405,-103.4831861,-103.4845559,-103.4874748,-103.4926302,-103.4970634,-103.5029349,-103.5107439,-103.5193954,-103.5334609,-103.5450861,-103.5557711,-103.5663401,-103.5764977,-103.586454,-103.5990992,-103.6108469,-103.6210747,-103.6344287,-103.6511998,-103.6741456,-103.695326,-103.7127454,-103.7322656,-103.7513243,-103.7742627,-103.7883947,-103.7987173,-103.8093474,-103.8228043,-103.834747,-103.8475013,-103.8598937,-103.8717468,-103.8844753,-103.8987597,-103.9085771,-103.9143153,-103.9261402,-103.937288,-103.9493329,-103.9580212,-103.967479,-103.9770754,-103.9866481,-103.9985667,-104.0100948,-104.0205836,-104.0300895,-104.0404414,-104.0504848,-104.0597465,-104.0624948,-104.0649403,-104.0671888,-104.0694178,-104.0731224,-104.0733309,-104.0735255,-104.0737004,-104.0738513,-104.0709011,-104.0673599,-104.0644196,-104.0673857,-104.0703969,-104.0721834,-104.0764962,-104.0832042,-104.0878913,-104.0875694,-104.0960804,-104.1000816,-104.1009799,-104.1009927,-104.1010022,-104.1010107,-104.1010281,-104.1016559,-104.1081717,-104.1213328,-104.1348134,-104.1484301,-104.1631283,-104.1771887,-104.1928698,-104.2071161,-104.2146469,-104.2174755,-104.2204136,-104.2206072,-104.2210284,-104.2236905,-104.2224815,-104.2226138,-104.223376,-104.2236697,-104.2236715,-104.2236546,-104.2236238,-104.2245061,-104.2244499,-104.2242692,-104.2243675,-104.2247046,-104.2245047,-104.2241716,-104.2245711,-104.2246097,-104.2235774,-104.2243453,-104.2244567,-104.2245333,-104.2244863,-104.2244037,-104.2244845,-104.2244705,-104.2243978,-104.2245537,-104.223708,-104.2242713,-104.2222784,-104.2199164,-104.2241659,-104.2308082,-104.2357888,-104.2436249,-104.2516879,-104.2604626,-104.2679942,-104.2762071,-104.2845393,-104.2931107,-104.30177,-104.3100914,-104.3198605,-104.3367085,-104.3527269,-104.3709007,-104.3821137,-104.3872769,-104.3985121,-104.4093702,-104.4416286,-104.4489906,-104.4428878,-104.4433716,-104.4430743,-104.4430567,-104.4440577,-104.4438402,-104.4443092,-104.4439608,-104.4436341,-104.4431211,-104.4441338,-104.4442474,-104.4430955,-104.4431199,-104.4431141,-104.4430534,-104.4430856,-104.4421019,-104.4436713,-104.4460369,-104.4444136,-104.4320036,-104.4116854,-104.4024784,-104.3897497,-104.3831825,-104.3744657,-104.3583057,-104.3419751,-104.3250274,-104.3134358,-104.3048851,-104.2956658,-104.2864423,-104.277274,-104.2681193,-104.2589951,-104.2486139,-104.2394089,-104.2325111,-104.2374581,-104.2375767,-104.2382404,-104.2498904,-104.2551135,-104.2550073,-104.2617777,-104.2754274,-104.27829,-104.2900912,-104.3017202,-104.3146677,-104.3219041,-104.3259345,-104.3315647,-104.3516903,-104.3715856,-104.385474,-104.3981368,-104.4016051,-104.4130613,-104.4217846,-104.4210396,-104.4116825,-104.401789,-104.3953694,-104.3954724,-104.3957698,-104.3957208,-104.395654,-104.3955758,-104.3955206,-104.3954951,-104.3953337,-104.3967155,-104.3974939,-104.3979366,-104.398962,-104.4004542,-104.4101691,-104.4242627,-104.435633,-104.438786,-104.4387037,-104.4391991,-104.4397424,-104.4402442,-104.4408444,-104.4414675,-104.4419978,-104.4420651,-104.4414323,-104.4438796,-104.4473973,-104.4506864,-104.4540464,-104.4572428,-104.4606718,-104.4638804,-104.4661531,-104.4662913,-104.4795295,-104.4988867,-104.5066429,-104.5102925,-104.5132762,-104.5178435,-104.5225626,-104.522667,-104.5226828,-104.5227038,-104.5227155,-104.522719,-104.5227299,-104.5228932,-104.5229117,-104.5229754,-104.5230453,-104.5231543,-104.5233215,-104.5210497,-104.5192034,-104.5192384,-104.5192107,-104.5192498,-104.5192863,-104.5193208,-104.5300363,-104.5422975,-104.5540465,-104.562272,-104.5646522,-104.56699,-104.5694768,-104.571816,-104.5735822,-104.5743191,-104.5748517,-104.5755207,-104.5785855,-104.5835993,-104.5888887,-104.5942697,-104.5994231,-104.6149472,-104.6308828,-104.6485563,-104.6655628,-104.683767,-104.7055818,-104.7256375,-104.7445667,-104.7623826,-104.7781192,-104.7940044,-104.8083442,-104.8245243,-104.8403358,-104.8567315,-104.8708571,-104.8802175,-104.8901901,-104.9002424,-104.9097382,-104.9188265,-104.9283036,-104.9386104,-104.954073,-104.9692781,-104.9842228,-105.0003976,-105.0169443,-105.0337565,-105.049447,-105.0662604,-105.0817146,-105.0969935,-105.1131238,-105.1284952,-105.143627,-105.1588789,-105.1750193,-105.1880595,-105.1897594,-105.1896783,-105.1896348,-105.1896642,-105.1897732,-105.1897205,-105.1897539,-105.1897319,-105.1897388,-105.189236,-105.1892726,-105.1895044,-105.1895732,-105.1895312,-105.1895175,-105.1894584,-105.1894367,-105.1895062,-105.1895223,-105.1895353,-105.1894963,-105.1894963,-105.1895202,-105.1895206,-105.1895366,-105.1895341,-105.1897566,-105.1896717,-105.1894425,-105.1894914,-105.1894547,-105.189499,-105.1895001,-105.18953,-105.1895235,-105.1895696,-105.2021809,-105.2144095,-105.2292596,-105.2463828,-105.2632554,-105.2838143,-105.3041351,-105.3277184,-105.3515004,-105.37217,-105.3926457,-105.4081205,-105.4287241,-105.4501382,-105.4652788,-105.4779239,-105.4876269,-105.4991587,-105.5104087,-105.5219929,-105.5327205,-105.5431393,-105.554408,-105.5659291,-105.5776807,-105.5883706,-105.598466,-105.6004628,-105.6066064,-105.6163808,-105.6275905,-105.6379522,-105.6485825,-105.6600913,-105.6665102,-105.6886761,-105.7141361,-105.7395201,-105.76396,-105.787455,-105.8120677,-105.8370032,-105.8601041,-105.8852946,-105.9123952,-105.938766,-105.9622905,-105.9864583,-106.0129845,-106.0367368,-106.0609451,-106.08388,-106.1057031,-106.1273348,-106.1502963,-106.1713806,-106.1934782,-106.2148998,-106.236981,-106.2546074,-106.2736918,-106.2909539,-106.3109229,-106.3311974,-106.3499938,-106.3707573,-106.3843967,-106.4057939,-106.4234837,-106.4468143,-106.4699163,-106.4900091,-106.5087211,-106.5272397,-106.5459615,-106.5659069,-106.5856367,-106.6022565,-106.6137408,-106.6171446,-106.6266113,-106.6299411,-106.6369225,-106.6445859,-106.6482547,-106.6569724,-106.6721738,-106.6888226,-106.7070355,-106.7214987,-106.7385995,-106.7558941,-106.7704583,-106.7833569,-106.7870144,-106.784347,-106.783874,-106.784347,-106.784347,-106.784347,-106.784347,-106.784347,-106.7843476,-106.7843512,-106.7843455,-106.7843132,-106.7842909,-106.7843028,-106.7842815,-106.7842628,-106.7842693,-106.7842865,-106.7844497,-106.7843801,-106.7877795,-106.7904228,-106.810139,-106.8325785,-106.8547319,-106.8729047,-106.8910003,-106.9114444,-106.9304484,-106.9533564,-106.9763709,-106.998286,-107.0195949,-107.0377519,-107.0581303,-107.077736,-107.0973079,-107.1193144,-107.1408669,-107.165828,-107.1892484,-107.2120041,-107.2369223,-107.263826,-107.2893396,-107.3104488,-107.3282804,-107.3398191,-107.3632887,-107.3849161,-107.4080329,-107.4347263,-107.4606316,-107.4836605,-107.5069921,-107.5248612,-107.5410788,-107.5647503,-107.5913347,-107.6193395,-107.6446368,-107.665553,-107.6881254,-107.7109335,-107.7365035,-107.7588747,-107.7780265,-107.7979628,-107.8163515,-107.8367367,-107.8522361,-107.8728431,-107.8952501,-107.9017571,-107.9177444,-107.9341535,-107.9487997,-107.962748,-107.9784453,-107.9860025,-107.9901525,-107.9973378,-108.0099702,-108.0330681,-108.0537143,-108.0763233,-108.1007556,-108.1231595,-108.1473207,-108.1726033,-108.1966017,-108.2195331,-108.2431039,-108.2651444,-108.2871105,-108.3084434,-108.3277466,-108.3475778,-108.3662884,-108.3848992,-108.4054609,-108.4249344,-108.4506148,-108.4754274,-108.4983722,-108.5214713,-108.5442841,-108.566027,-108.5892538,-108.6138492,-108.6368058,-108.6586201,-108.6692899,-108.6798984,-108.6960385,-108.708639,-108.7088292,-108.7084008,-108.7084919,-108.708639,-108.7085743,-108.7086344,-108.7086269,-108.7085813,-108.7086513,-108.7085506,-108.7084987,-108.7085236,-108.7085372,-108.708529,-108.7085245,-108.7085763,-108.7084913,-108.7085179,-108.7083725,-108.7083491,-108.7084045,-108.7085246,-108.7083672,-108.7083338,-108.7083338,-108.7083338,-108.7083338,-108.7083338,-108.708365,-108.708365,-108.7083642,-108.7083646,-108.7084047,-108.7083713,-108.7083572,-108.7083419,-108.7086241,-108.7090767,-108.7084779,-108.7121336,-108.7199608,-108.7198517,-108.71987,-108.7199608,-108.7199608,-108.7199417,-108.7197694,-108.7220069,-108.7226758,-108.727051,-108.7431752,-108.7627521,-108.7833931,-108.8046059,-108.8253687,-108.8408765,-108.8632394,-108.8868336,-108.9091483,-108.9290446,-108.9466536,-108.9624511,-108.9813406,-108.9972173,-109.008916,-109.0268054,-109.0444331,-109.0566354,-109.0694042,-109.0843392,-109.1043799,-109.1264349,-109.1471803,-109.1675497,-109.1896357,-109.2099664,-109.2323404,-109.253031,-109.270439,-109.2858316,-109.3029523,-109.3194012,-109.3374409,-109.360508,-109.3824308,-109.4040486,-109.4256762,-109.4355546,-109.4332728,-109.4356427,-109.4356485,-109.4359636,-109.4482559,-109.4683685,-109.4866915,-109.5049764,-109.5231838,-109.5430148,-109.5668214,-109.5894389,-109.6098346,-109.6319443,-109.6548452,-109.6767561,-109.6981361,-109.7201402,-109.7413494,-109.7638727,-109.7850705,-109.8066882,-109.8265821,-109.8476253,-109.870105,-109.895343,-109.9215661,-109.9477268,-109.9717778,-109.9965851,-110.020602,-110.0450421,-110.0694705,-110.0919512,-110.109448,-110.1267058,-110.1366769,-110.1549151,-110.1795649,-110.2025611,-110.2259237,-110.2471948,-110.2637365,-110.2787473,-110.2972281,-110.3167429,-110.3399636,-110.3643883,-110.388822,-110.4151499,-110.4407725,-110.465612,-110.4889228,-110.5120145,-110.5355047,-110.5585834,-110.580425,-110.6026882,-110.6246409,-110.6461984,-110.6670588,-110.682879,-110.696588,-110.7168515,-110.7381446,-110.7595957,-110.7803991,-110.8016346,-110.8247808,-110.8461376,-110.8651937,-110.8846442,-110.9039787,-110.9241769,-110.9438851,-110.9655005,-110.9858347,-111.0059991,-111.0273753,-111.0483255,-111.0683291,-111.0892901,-111.110163,-111.1329721,-111.1553572,-111.1788029,-111.1991014,-111.2216992,-111.242191,-111.2640047,-111.2844899,-111.3053813,-111.3266125,-111.3474504,-111.3690012,-111.3898755,-111.4101438,-111.431626,-111.4554012,-111.4769146,-111.4997985,-111.5203655,-111.5418187,-111.5629336,-111.5812691,-111.5877524,-111.5953976,-111.5968955,-111.6042783],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]}],\"limits\":{\"lat\":[29.3971059,35.5339859],\"lng\":[-111.6042783,-84.3051758]},\"setView\":[[29.4257332714475,-98.4862755390452],18,[]]},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\\ \n\nWe can convert all these points into a single path (or a `LINESTRING` simple geographic feature instead of lots of `POINT`s) so that they can connect, using a combination of `st_combine()` to concatenate all the points and `st_cast()` to switch their format from a bunch of points to an official `LINESTRING`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbig_long_combined_route <- all_locations$geometry %>% \n  st_combine() %>% \n  st_cast(\"LINESTRING\")\nbig_long_combined_route\n## Geometry set for 1 feature \n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: -111.6 ymin: 29.4 xmax: -84.31 ymax: 35.53\n## Geodetic CRS:  WGS 84\n```\n:::\n\n\nNow instead of having two thousand+ points, it's just one single `LINESTRING` feature. It shows up as a line now:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = lower_48) +\n  geom_sf(data = big_long_combined_route) +\n  coord_sf(\n    xlim = trip_window[, \"X\"],\n    ylim = trip_window[, \"Y\"]) +\n  theme_roadtrip_map()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic-map-linestring-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nWe can confirm if we zoom in around the Alamo again too:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbig_long_combined_route %>% \n  leaflet() %>% \n  addTiles() %>% \n  addPolylines() %>% \n  setView(lat = 29.425733271447523, lng = -98.48627553904525, zoom = 18)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-8f836166d559454ecd73\" style=\"width:100%;height:415.327564894932px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8f836166d559454ecd73\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[-84.3051758,-84.3273246,-84.3438356,-84.3621145,-84.3782498,-84.3935971,-84.3911732,-84.3890003,-84.3786019,-84.3914546,-84.3937695,-84.4013967,-84.4049403,-84.4033858,-84.4144991,-84.4276159,-84.4421424,-84.4564173,-84.4613678,-84.4839758,-84.4887164,-84.5062481,-84.5248002,-84.5424602,-84.5646385,-84.5866331,-84.6059195,-84.6256142,-84.6374356,-84.6520712,-84.6677062,-84.680744,-84.69883,-84.7179306,-84.7318536,-84.7456314,-84.7562372,-84.7596283,-84.7612124,-84.7728107,-84.786625,-84.7947233,-84.8018032,-84.8058839,-84.807025,-84.8150928,-84.8312521,-84.8458617,-84.8593035,-84.8675704,-84.878876,-84.89168,-84.9028912,-84.9093494,-84.9206745,-84.9385745,-84.9570798,-84.9714897,-84.9836637,-84.9990069,-85.0169191,-85.0355808,-85.0572835,-85.0768118,-85.0936392,-85.1059977,-85.1170413,-85.1307989,-85.1454572,-85.1637588,-85.1798475,-85.196041,-85.21059,-85.2245422,-85.2382569,-85.2524358,-85.2679604,-85.2825737,-85.2971749,-85.3093569,-85.3197978,-85.3321764,-85.3447665,-85.3571857,-85.3746585,-85.3932607,-85.4146784,-85.4349643,-85.455994,-85.4738014,-85.4921056,-85.5117281,-85.5306126,-85.549378,-85.569207,-85.5869292,-85.6073163,-85.6252638,-85.6456535,-85.6678863,-85.6920666,-85.7143132,-85.7322202,-85.7566331,-85.7814344,-85.8047588,-85.8278582,-85.8514679,-85.8755536,-85.8989607,-85.9212944,-85.9424582,-85.9629879,-85.9827673,-86.0033713,-86.0237652,-86.0458941,-86.0677511,-86.0916638,-86.1166861,-86.1422597,-86.1670989,-86.1908249,-86.2140041,-86.2386041,-86.2623546,-86.2820335,-86.3044964,-86.3224878,-86.3217538,-86.3317209,-86.3372877,-86.337309,-86.3372514,-86.3372421,-86.337279,-86.3372613,-86.3373469,-86.3375387,-86.337604,-86.3375933,-86.3376304,-86.3375527,-86.3375601,-86.3373134,-86.3370365,-86.3372558,-86.3373273,-86.3375594,-86.3372971,-86.3374133,-86.3372955,-86.3376103,-86.3373611,-86.3360363,-86.3378592,-86.3437949,-86.3556782,-86.3689315,-86.3846975,-86.4015093,-86.4152339,-86.4258949,-86.4341185,-86.4398985,-86.4483872,-86.4608243,-86.4729043,-86.4831926,-86.4945197,-86.5071595,-86.5162411,-86.5245639,-86.5313289,-86.5409554,-86.5586452,-86.5729914,-86.5875195,-86.6036833,-86.617037,-86.631198,-86.6480807,-86.663473,-86.6687176,-86.6781064,-86.6949664,-86.7076299,-86.7183131,-86.7301998,-86.7425953,-86.7512885,-86.7614012,-86.7760449,-86.7925313,-86.8089401,-86.8247704,-86.8378959,-86.8516759,-86.8665498,-86.8805601,-86.8958161,-86.9122567,-86.9280967,-86.9418762,-86.9548371,-86.9694358,-86.9858835,-87.0004018,-87.014157,-87.0280989,-87.043812,-87.0625131,-87.082416,-87.1031732,-87.1233355,-87.1443056,-87.1627462,-87.1818657,-87.2013561,-87.2199459,-87.2382332,-87.2574129,-87.2769698,-87.2949576,-87.3129726,-87.3304072,-87.3491384,-87.3717501,-87.3927512,-87.412445,-87.433902,-87.4525246,-87.473308,-87.4974268,-87.5189197,-87.536606,-87.5562319,-87.5768553,-87.594903,-87.6148136,-87.6350677,-87.6530083,-87.6731667,-87.6907528,-87.7103101,-87.7325643,-87.755036,-87.7767482,-87.8001099,-87.8233921,-87.8459861,-87.8682104,-87.8879937,-87.9110178,-87.9342703,-87.9551257,-87.9750624,-87.9961459,-88.0159911,-88.0342458,-88.0531374,-88.0708034,-88.0797175,-88.0930434,-88.1042529,-88.1014838,-88.0964108,-88.0935321,-88.1072451,-88.120166,-88.1221407,-88.1262829,-88.1273447,-88.1225993,-88.1185497,-88.1295092,-88.1431364,-88.1545722,-88.1633546,-88.1627496,-88.164056,-88.1636184,-88.1635537,-88.1628771,-88.1636828,-88.163331,-88.1633528,-88.1633234,-88.1628456,-88.163215,-88.1632969,-88.1649383,-88.1633546,-88.1619295,-88.1608361,-88.1797522,-88.1952027,-88.2112692,-88.2266756,-88.2442671,-88.2622093,-88.2815951,-88.3007814,-88.3225486,-88.3438264,-88.3660706,-88.3856774,-88.4065173,-88.4266286,-88.4497887,-88.4747625,-88.4973883,-88.5185676,-88.5413461,-88.564724,-88.5896637,-88.613324,-88.6368922,-88.6591215,-88.6779027,-88.7012531,-88.7244214,-88.7472499,-88.7704739,-88.7928993,-88.8180255,-88.8432827,-88.8688573,-88.8924655,-88.9172109,-88.9400284,-88.9618745,-88.9842746,-89.003717,-89.027056,-89.051515,-89.0759015,-89.0987927,-89.11984,-89.1444275,-89.1670343,-89.1915449,-89.2126344,-89.2329846,-89.2553419,-89.2774605,-89.3011816,-89.3218668,-89.3446087,-89.3676817,-89.3896083,-89.4112535,-89.4310874,-89.4498428,-89.4715787,-89.4946979,-89.5175762,-89.5408976,-89.5615717,-89.5823447,-89.6048167,-89.6271631,-89.6473842,-89.6693493,-89.6917429,-89.7143931,-89.7359522,-89.7475451,-89.7543693,-89.7607462,-89.7692081,-89.7846152,-89.7991163,-89.8151302,-89.8312415,-89.8473986,-89.8633417,-89.8772868,-89.8907838,-89.9041046,-89.9179121,-89.9310769,-89.9460425,-89.9566957,-89.9626273,-89.9625546,-89.962393,-89.9626219,-89.9627502,-89.9625587,-89.962395,-89.9630299,-89.9625987,-89.962677,-89.962734,-89.9627376,-89.9627972,-89.9629582,-89.9626426,-89.9623835,-89.9623627,-89.9631403,-89.9628741,-89.9627189,-89.9627086,-89.9624403,-89.9626426,-89.9671227,-89.985174,-90.0038414,-90.0138086,-90.0218668,-90.0371769,-90.0504504,-90.0608208,-90.0715954,-90.0735287,-90.0706617,-90.0699522,-90.0643023,-90.0678069,-90.0664403,-90.0655456,-90.0650886,-90.0642548,-90.0645014,-90.0651399,-90.0662793,-90.0646745,-90.0636614,-90.0632259,-90.0647748,-90.061943,-90.0616739,-90.0620035,-90.0616871,-90.0618267,-90.0626007,-90.0625538,-90.0623514,-90.0620957,-90.061943,-90.0646779,-90.0681356,-90.0669614,-90.0678887,-90.0681413,-90.0678327,-90.0681356,-90.0657598,-90.0655122,-90.0652023,-90.0650869,-90.0653102,-90.0658132,-90.0662807,-90.0657676,-90.0657423,-90.0641243,-90.0652485,-90.0645903,-90.064378,-90.0644739,-90.0645501,-90.0645625,-90.0639758,-90.0636348,-90.0632474,-90.0629125,-90.0641243,-90.0622288,-90.0616412,-90.0594821,-90.0562782,-90.0566965,-90.0569814,-90.0575119,-90.0511178,-90.0389504,-90.0224293,-90.0135326,-90.0010175,-89.981357,-89.9647311,-89.9632848,-89.962454,-89.9627352,-89.9625872,-89.9624574,-89.9623103,-89.962923,-89.962505,-89.9627908,-89.9627186,-89.9627579,-89.9628913,-89.9629451,-89.9628887,-89.9628853,-89.96271,-89.9627974,-89.9627082,-89.9627847,-89.962808,-89.9628019,-89.9630248,-89.9626096,-89.962838,-89.9627637,-89.9627437,-89.9626747,-89.9626727,-89.9627372,-89.9628532,-89.9629666,-89.9628419,-89.9626405,-89.9629182,-89.9626114,-89.9631683,-89.9628093,-89.9623937,-89.9629519,-89.9624108,-89.9627089,-89.9628616,-89.9627755,-89.9628757,-89.9625818,-89.96242,-89.962486,-89.9626625,-89.9624686,-89.9624982,-89.9624987,-89.9624969,-89.9624559,-89.9624336,-89.9627352,-89.9616641,-89.9606972,-89.9492587,-89.9389775,-89.9395854,-89.9396195,-89.9387829,-89.9441833,-89.9494789,-89.9562612,-89.9603985,-89.9635606,-89.9662883,-89.9750522,-89.9848618,-89.9862646,-89.9861817,-89.9867016,-89.9917354,-89.9945534,-89.9944559,-89.9944988,-89.9944584,-89.994946,-89.9942526,-89.9942101,-89.9942279,-89.9941622,-89.9936257,-89.9936138,-89.9942406,-89.9943577,-89.9936628,-89.9940157,-89.9944837,-89.9945179,-89.9943001,-89.9944203,-89.9944512,-89.9944614,-89.9944614,-89.9943577,-89.9925906,-89.9937749,-89.9981088,-90.0000297,-90.0087078,-90.0153026,-90.0258363,-90.0297903,-90.0377756,-90.0478308,-90.0484011,-90.0492787,-90.0548469,-90.0746704,-90.0949567,-90.1164968,-90.1358715,-90.1583648,-90.178802,-90.2001345,-90.2194123,-90.2401839,-90.2610107,-90.2799665,-90.3003394,-90.3179435,-90.3345282,-90.3503932,-90.3674039,-90.3838005,-90.4003716,-90.4194594,-90.4422433,-90.4641129,-90.4858953,-90.5080018,-90.5329367,-90.5551955,-90.5792596,-90.6017002,-90.6250516,-90.6511461,-90.6773316,-90.7017946,-90.7258504,-90.7488196,-90.7719778,-90.7948869,-90.8187216,-90.8425152,-90.8671125,-90.8881606,-90.9096978,-90.9294647,-90.9467965,-90.960803,-90.9716418,-90.9821115,-90.9891039,-90.9929929,-91.0058096,-91.022132,-91.0356957,-91.0499163,-91.0674747,-91.0847928,-91.1018977,-91.1176707,-91.1324277,-91.1409507,-91.1447553,-91.1554755,-91.1688332,-91.1782614,-91.1949505,-91.2131674,-91.2315701,-91.2521378,-91.2743141,-91.2949088,-91.3154804,-91.3369397,-91.35804,-91.3788259,-91.399382,-91.4201578,-91.4415798,-91.4656116,-91.4889304,-91.5121529,-91.5333849,-91.5538016,-91.5759476,-91.5976994,-91.6182563,-91.6373315,-91.6556204,-91.6759974,-91.6954307,-91.714146,-91.733038,-91.7518937,-91.7726175,-91.7916227,-91.8137638,-91.8299357,-91.8304352,-91.8298949,-91.8298949,-91.8299357,-91.8298705,-91.8298617,-91.8298801,-91.8298644,-91.8293816,-91.8294105,-91.8294696,-91.8296983,-91.8300217,-91.8300072,-91.829992,-91.8300009,-91.8300312,-91.8300213,-91.8300567,-91.8300673,-91.829696,-91.8294919,-91.8295937,-91.8297877,-91.8299911,-91.8300591,-91.8300225,-91.8300301,-91.8300445,-91.8300122,-91.8300687,-91.8300673,-91.8300768,-91.8300789,-91.829913,-91.8331406,-91.8520597,-91.8757864,-91.8980121,-91.9206678,-91.9414434,-91.9633565,-91.9837103,-92.0062033,-92.0274162,-92.0490908,-92.0720054,-92.0954385,-92.1175512,-92.1422948,-92.1647347,-92.1879952,-92.2104338,-92.23263,-92.2570044,-92.2799836,-92.3009196,-92.3227777,-92.3460385,-92.369855,-92.3930233,-92.416748,-92.4395122,-92.4636154,-92.4884406,-92.5116732,-92.5346027,-92.5574678,-92.5806212,-92.6047091,-92.6263256,-92.6495533,-92.67262,-92.6967695,-92.7206257,-92.7427208,-92.766821,-92.7913635,-92.8161146,-92.8386609,-92.8605283,-92.882203,-92.9038067,-92.925017,-92.9477128,-92.9686132,-92.9895575,-93.0118692,-93.0345734,-93.0596318,-93.0852445,-93.1090749,-93.1330437,-93.1577254,-93.1802843,-93.1968796,-93.2162353,-93.2369146,-93.2549346,-93.2768914,-93.2943596,-93.3115448,-93.3293382,-93.3504942,-93.3735113,-93.3945224,-93.4187245,-93.4403088,-93.4628798,-93.4838998,-93.5054437,-93.5292619,-93.5527458,-93.5708579,-93.5694294,-93.5707539,-93.5708138,-93.5708582,-93.5708805,-93.5707004,-93.5706467,-93.5706896,-93.5706621,-93.5706603,-93.5707097,-93.5706535,-93.570816,-93.5707867,-93.5707867,-93.5707404,-93.5706859,-93.5707157,-93.5707579,-93.5707624,-93.570737,-93.57074,-93.5711306,-93.5707108,-93.5740212,-93.5925198,-93.6125311,-93.6338536,-93.6527072,-93.6721813,-93.6913851,-93.7110438,-93.7292393,-93.749806,-93.7727085,-93.794137,-93.8169854,-93.8371455,-93.8582232,-93.8825494,-93.906949,-93.9314545,-93.9552396,-93.9805135,-94.0030762,-94.0232799,-94.0418403,-94.0618811,-94.0840939,-94.1060243,-94.1272727,-94.1359692,-94.1346845,-94.1413547,-94.1529806,-94.167176,-94.1804731,-94.1946545,-94.2116156,-94.2087377,-94.2116243,-94.2116234,-94.2116156,-94.2116156,-94.2116156,-94.2116139,-94.2117519,-94.2117551,-94.2118634,-94.2118575,-94.2119861,-94.2115925,-94.2095567,-94.2192011,-94.2341754,-94.249152,-94.263924,-94.2791481,-94.2977948,-94.3120668,-94.3285319,-94.3409141,-94.3557119,-94.3729114,-94.389564,-94.414046,-94.4394899,-94.4644555,-94.4888806,-94.5116372,-94.5351353,-94.5593782,-94.582245,-94.6071342,-94.6317356,-94.6559948,-94.6791191,-94.7013396,-94.7250366,-94.7467271,-94.7691803,-94.7931695,-94.8177817,-94.8426686,-94.8668333,-94.8898485,-94.9149705,-94.9375484,-94.9598305,-94.9838035,-95.0084202,-95.0322528,-95.0539933,-95.0719397,-95.0914898,-95.1124667,-95.1310519,-95.152481,-95.1739733,-95.1968262,-95.2187536,-95.2378562,-95.2581779,-95.2780989,-95.2978893,-95.3186094,-95.3369838,-95.3547528,-95.3654825,-95.3783176,-95.3987233,-95.4181803,-95.4368887,-95.456835,-95.4760852,-95.4978813,-95.5170105,-95.5374993,-95.5621296,-95.5798086,-95.6020366,-95.6209502,-95.6424551,-95.6636837,-95.68478,-95.7065571,-95.7278614,-95.749733,-95.7721725,-95.7949697,-95.8142748,-95.8355775,-95.8578256,-95.8790387,-95.9007694,-95.922687,-95.9444572,-95.9646805,-95.985197,-96.0083862,-96.0289354,-96.0525542,-96.0768648,-96.0993793,-96.1218633,-96.1418891,-96.1635005,-96.1869689,-96.2092012,-96.2310186,-96.2551464,-96.2794462,-96.301387,-96.3267529,-96.349496,-96.3746647,-96.3972071,-96.4194199,-96.4432758,-96.4666653,-96.4906237,-96.5118669,-96.5300898,-96.5474582,-96.5692126,-96.5922388,-96.6133176,-96.6374208,-96.6595515,-96.6826387,-96.7042722,-96.7272217,-96.7490864,-96.7739688,-96.7970373,-96.8211438,-96.8442541,-96.8658778,-96.8868403,-96.9021006,-96.9019925,-96.9023357,-96.9022412,-96.902078,-96.9022007,-96.9020749,-96.90211,-96.9019903,-96.9018705,-96.9019047,-96.9018274,-96.9018151,-96.9018945,-96.9019142,-96.9019067,-96.901948,-96.9019511,-96.9019473,-96.9020088,-96.9019414,-96.9019361,-96.901965,-96.9019366,-96.9019079,-96.9019079,-96.9019532,-96.9019216,-96.9033236,-96.9019853,-96.9218103,-96.9452377,-96.9684542,-96.9945896,-97.0194329,-97.0423112,-97.0683249,-97.0949022,-97.1198866,-97.1465076,-97.1715961,-97.1970894,-97.2216314,-97.2473756,-97.2719717,-97.2949048,-97.3192436,-97.3433895,-97.3703273,-97.394405,-97.4198197,-97.4441272,-97.469735,-97.4958223,-97.521259,-97.5456938,-97.5715256,-97.5949492,-97.6195729,-97.6450595,-97.6680602,-97.6902169,-97.7112268,-97.7330134,-97.755595,-97.7766182,-97.7999637,-97.8248332,-97.8500171,-97.8728096,-97.8950279,-97.9187246,-97.9434237,-97.9677906,-97.9871022,-98.0070859,-98.0285542,-98.0465369,-98.067569,-98.0898309,-98.1117833,-98.1322127,-98.1521858,-98.1716649,-98.1910621,-98.2116798,-98.2304163,-98.249883,-98.2704789,-98.2910138,-98.3125984,-98.3336044,-98.3547187,-98.3776855,-98.3991346,-98.4184323,-98.4321544,-98.4393874,-98.4420916,-98.4421992,-98.4420801,-98.4416623,-98.4420462,-98.4417413,-98.4420015,-98.4420623,-98.4422044,-98.4421766,-98.4422474,-98.4422535,-98.4421892,-98.4422033,-98.4422172,-98.4421907,-98.4422605,-98.4422094,-98.4421037,-98.4422456,-98.4421811,-98.442065,-98.442127,-98.4422451,-98.4421795,-98.4421981,-98.4416654,-98.4421866,-98.4424071,-98.4422051,-98.4422228,-98.4416598,-98.4417097,-98.4419328,-98.4416862,-98.4417017,-98.4416858,-98.4416642,-98.4416702,-98.4424005,-98.4421992,-98.443969,-98.4617981,-98.4770016,-98.4795455,-98.4796453,-98.479866,-98.479866,-98.4829642,-98.4868792,-98.485969,-98.4877737,-98.4877737,-98.4868991,-98.4871962,-98.4877761,-98.4878587,-98.4880643,-98.4880638,-98.4882678,-98.4884631,-98.4884437,-98.4880377,-98.4871865,-98.4875204,-98.4862923,-98.4866655,-98.4866538,-98.4863014,-98.4863374,-98.4860623,-98.4860206,-98.4860618,-98.4858503,-98.4857535,-98.4856024,-98.4864695,-98.4862923,-98.4891968,-98.4887821,-98.4896166,-98.4900058,-98.4879643,-98.4891968,-98.4868861,-98.4869063,-98.4868861,-98.486889,-98.4849384,-98.4812999,-98.4813208,-98.4774843,-98.4911451,-98.5027438,-98.5147152,-98.5157777,-98.5192459,-98.5371072,-98.5481692,-98.5543431,-98.5650834,-98.5824599,-98.5912258,-98.5969658,-98.6000376,-98.6064138,-98.6130983,-98.6233851,-98.6317383,-98.6423054,-98.6542831,-98.6658279,-98.6810644,-98.697462,-98.7134223,-98.7297935,-98.7473862,-98.7532584,-98.7589568,-98.7738555,-98.7857385,-98.7959335,-98.8108815,-98.821281,-98.8378366,-98.8577869,-98.8738769,-98.888269,-98.8994705,-98.921338,-98.9406728,-98.9587903,-98.9740887,-98.9944201,-99.0158461,-99.0389721,-99.0568666,-99.0816714,-99.1047441,-99.1269278,-99.1464652,-99.1663313,-99.1827029,-99.2029636,-99.2223537,-99.2318541,-99.2416985,-99.2633593,-99.2862561,-99.3108562,-99.3353206,-99.3595658,-99.3834735,-99.4038053,-99.4236418,-99.4430977,-99.4635565,-99.4868859,-99.5063184,-99.5270998,-99.5503928,-99.5695393,-99.5821037,-99.5951339,-99.6067989,-99.6212006,-99.6435672,-99.6653031,-99.682719,-99.7033386,-99.719045,-99.7299048,-99.7391454,-99.7574828,-99.7732821,-99.7732322,-99.7730391,-99.7731956,-99.7732621,-99.7732839,-99.7732839,-99.7732839,-99.773128,-99.7731031,-99.772818,-99.7730711,-99.7728358,-99.7730955,-99.7731663,-99.7730089,-99.7730211,-99.7730237,-99.7730103,-99.7729978,-99.7730002,-99.7730147,-99.7730146,-99.7730367,-99.773026,-99.7730505,-99.7731059,-99.7729962,-99.7729884,-99.7728914,-99.7729698,-99.7730663,-99.77314,-99.7731381,-99.7731278,-99.773153,-99.7731318,-99.7730065,-99.7730784,-99.7731009,-99.773103,-99.7730981,-99.7730983,-99.7759383,-99.7950482,-99.8160683,-99.8395856,-99.8625217,-99.8855137,-99.9075319,-99.9274127,-99.9498017,-99.9722728,-99.994406,-100.0168538,-100.0376638,-100.0580438,-100.0790289,-100.1000557,-100.1207708,-100.1442924,-100.1676055,-100.192065,-100.2154674,-100.2390158,-100.2638933,-100.2856164,-100.3056967,-100.3260139,-100.3472252,-100.3702842,-100.3915278,-100.4123222,-100.4350974,-100.4573901,-100.4812851,-100.5059455,-100.5284941,-100.5512133,-100.573189,-100.5979841,-100.622992,-100.6453061,-100.665166,-100.6869609,-100.7089451,-100.7285376,-100.7439921,-100.7445242,-100.7445242,-100.7445242,-100.744506,-100.7444978,-100.7444867,-100.7565646,-100.7966809,-100.8183972,-100.8370042,-100.8548652,-100.8719909,-100.8902339,-100.9084917,-100.9440841,-100.9641545,-100.9842257,-101.0068776,-101.0288272,-101.0540171,-101.0793678,-101.1019804,-101.1266147,-101.152225,-101.1642136,-101.1659975,-101.1804691,-101.2040592,-101.2266571,-101.249588,-101.2759296,-101.3017722,-101.3262452,-101.3525032,-101.376332,-101.3984966,-101.4460223,-101.4711558,-101.4943204,-101.5160641,-101.5306587,-101.5536369,-101.578407,-101.6010098,-101.6253506,-101.649218,-101.6728631,-101.6962518,-101.7184191,-101.7392346,-101.7584218,-101.7827445,-101.8067369,-101.8270358,-101.845517,-101.8713383,-101.8950086,-101.9172642,-101.9407319,-101.9582454,-101.971627,-101.9933967,-102.0082217,-102.0320534,-102.0539409,-102.0737593,-102.0935717,-102.1186236,-102.1419664,-102.1668289,-102.1928225,-102.2187721,-102.2442502,-102.2713863,-102.2939639,-102.3187451,-102.3429559,-102.3661984,-102.3913297,-102.4152384,-102.4403164,-102.4623417,-102.4861099,-102.5119566,-102.5377683,-102.5635154,-102.5891976,-102.6136763,-102.6406794,-102.6645647,-102.6913158,-102.7180047,-102.7450755,-102.7723452,-102.8014074,-102.8279361,-102.8513567,-102.8705551,-102.8950112,-102.9113827,-102.9262664,-102.9446472,-102.9640745,-102.9845958,-103.0043405,-103.0232321,-103.0432241,-103.0621598,-103.0807928,-103.1006538,-103.120761,-103.1404019,-103.1600447,-103.1785119,-103.19711,-103.2170419,-103.2367489,-103.2558579,-103.2672297,-103.2788277,-103.2896513,-103.3007569,-103.3129078,-103.3254961,-103.3380585,-103.3499727,-103.3632944,-103.3779289,-103.3934179,-103.4106242,-103.4260419,-103.4342743,-103.4452066,-103.4600478,-103.4730434,-103.4807406,-103.4807125,-103.4807308,-103.4807305,-103.4807435,-103.4807479,-103.4808019,-103.4805504,-103.4803374,-103.480642,-103.4802668,-103.480595,-103.4803208,-103.4803114,-103.480313,-103.480316,-103.4803153,-103.4803055,-103.4803636,-103.4803283,-103.4807852,-103.4805067,-103.4828405,-103.4831861,-103.4845559,-103.4874748,-103.4926302,-103.4970634,-103.5029349,-103.5107439,-103.5193954,-103.5334609,-103.5450861,-103.5557711,-103.5663401,-103.5764977,-103.586454,-103.5990992,-103.6108469,-103.6210747,-103.6344287,-103.6511998,-103.6741456,-103.695326,-103.7127454,-103.7322656,-103.7513243,-103.7742627,-103.7883947,-103.7987173,-103.8093474,-103.8228043,-103.834747,-103.8475013,-103.8598937,-103.8717468,-103.8844753,-103.8987597,-103.9085771,-103.9143153,-103.9261402,-103.937288,-103.9493329,-103.9580212,-103.967479,-103.9770754,-103.9866481,-103.9985667,-104.0100948,-104.0205836,-104.0300895,-104.0404414,-104.0504848,-104.0597465,-104.0624948,-104.0649403,-104.0671888,-104.0694178,-104.0731224,-104.0733309,-104.0735255,-104.0737004,-104.0738513,-104.0709011,-104.0673599,-104.0644196,-104.0673857,-104.0703969,-104.0721834,-104.0764962,-104.0832042,-104.0878913,-104.0875694,-104.0960804,-104.1000816,-104.1009799,-104.1009927,-104.1010022,-104.1010107,-104.1010281,-104.1016559,-104.1081717,-104.1213328,-104.1348134,-104.1484301,-104.1631283,-104.1771887,-104.1928698,-104.2071161,-104.2146469,-104.2174755,-104.2204136,-104.2206072,-104.2210284,-104.2236905,-104.2224815,-104.2226138,-104.223376,-104.2236697,-104.2236715,-104.2236546,-104.2236238,-104.2245061,-104.2244499,-104.2242692,-104.2243675,-104.2247046,-104.2245047,-104.2241716,-104.2245711,-104.2246097,-104.2235774,-104.2243453,-104.2244567,-104.2245333,-104.2244863,-104.2244037,-104.2244845,-104.2244705,-104.2243978,-104.2245537,-104.223708,-104.2242713,-104.2222784,-104.2199164,-104.2241659,-104.2308082,-104.2357888,-104.2436249,-104.2516879,-104.2604626,-104.2679942,-104.2762071,-104.2845393,-104.2931107,-104.30177,-104.3100914,-104.3198605,-104.3367085,-104.3527269,-104.3709007,-104.3821137,-104.3872769,-104.3985121,-104.4093702,-104.4416286,-104.4489906,-104.4428878,-104.4433716,-104.4430743,-104.4430567,-104.4440577,-104.4438402,-104.4443092,-104.4439608,-104.4436341,-104.4431211,-104.4441338,-104.4442474,-104.4430955,-104.4431199,-104.4431141,-104.4430534,-104.4430856,-104.4421019,-104.4436713,-104.4460369,-104.4444136,-104.4320036,-104.4116854,-104.4024784,-104.3897497,-104.3831825,-104.3744657,-104.3583057,-104.3419751,-104.3250274,-104.3134358,-104.3048851,-104.2956658,-104.2864423,-104.277274,-104.2681193,-104.2589951,-104.2486139,-104.2394089,-104.2325111,-104.2374581,-104.2375767,-104.2382404,-104.2498904,-104.2551135,-104.2550073,-104.2617777,-104.2754274,-104.27829,-104.2900912,-104.3017202,-104.3146677,-104.3219041,-104.3259345,-104.3315647,-104.3516903,-104.3715856,-104.385474,-104.3981368,-104.4016051,-104.4130613,-104.4217846,-104.4210396,-104.4116825,-104.401789,-104.3953694,-104.3954724,-104.3957698,-104.3957208,-104.395654,-104.3955758,-104.3955206,-104.3954951,-104.3953337,-104.3967155,-104.3974939,-104.3979366,-104.398962,-104.4004542,-104.4101691,-104.4242627,-104.435633,-104.438786,-104.4387037,-104.4391991,-104.4397424,-104.4402442,-104.4408444,-104.4414675,-104.4419978,-104.4420651,-104.4414323,-104.4438796,-104.4473973,-104.4506864,-104.4540464,-104.4572428,-104.4606718,-104.4638804,-104.4661531,-104.4662913,-104.4795295,-104.4988867,-104.5066429,-104.5102925,-104.5132762,-104.5178435,-104.5225626,-104.522667,-104.5226828,-104.5227038,-104.5227155,-104.522719,-104.5227299,-104.5228932,-104.5229117,-104.5229754,-104.5230453,-104.5231543,-104.5233215,-104.5210497,-104.5192034,-104.5192384,-104.5192107,-104.5192498,-104.5192863,-104.5193208,-104.5300363,-104.5422975,-104.5540465,-104.562272,-104.5646522,-104.56699,-104.5694768,-104.571816,-104.5735822,-104.5743191,-104.5748517,-104.5755207,-104.5785855,-104.5835993,-104.5888887,-104.5942697,-104.5994231,-104.6149472,-104.6308828,-104.6485563,-104.6655628,-104.683767,-104.7055818,-104.7256375,-104.7445667,-104.7623826,-104.7781192,-104.7940044,-104.8083442,-104.8245243,-104.8403358,-104.8567315,-104.8708571,-104.8802175,-104.8901901,-104.9002424,-104.9097382,-104.9188265,-104.9283036,-104.9386104,-104.954073,-104.9692781,-104.9842228,-105.0003976,-105.0169443,-105.0337565,-105.049447,-105.0662604,-105.0817146,-105.0969935,-105.1131238,-105.1284952,-105.143627,-105.1588789,-105.1750193,-105.1880595,-105.1897594,-105.1896783,-105.1896348,-105.1896642,-105.1897732,-105.1897205,-105.1897539,-105.1897319,-105.1897388,-105.189236,-105.1892726,-105.1895044,-105.1895732,-105.1895312,-105.1895175,-105.1894584,-105.1894367,-105.1895062,-105.1895223,-105.1895353,-105.1894963,-105.1894963,-105.1895202,-105.1895206,-105.1895366,-105.1895341,-105.1897566,-105.1896717,-105.1894425,-105.1894914,-105.1894547,-105.189499,-105.1895001,-105.18953,-105.1895235,-105.1895696,-105.2021809,-105.2144095,-105.2292596,-105.2463828,-105.2632554,-105.2838143,-105.3041351,-105.3277184,-105.3515004,-105.37217,-105.3926457,-105.4081205,-105.4287241,-105.4501382,-105.4652788,-105.4779239,-105.4876269,-105.4991587,-105.5104087,-105.5219929,-105.5327205,-105.5431393,-105.554408,-105.5659291,-105.5776807,-105.5883706,-105.598466,-105.6004628,-105.6066064,-105.6163808,-105.6275905,-105.6379522,-105.6485825,-105.6600913,-105.6665102,-105.6886761,-105.7141361,-105.7395201,-105.76396,-105.787455,-105.8120677,-105.8370032,-105.8601041,-105.8852946,-105.9123952,-105.938766,-105.9622905,-105.9864583,-106.0129845,-106.0367368,-106.0609451,-106.08388,-106.1057031,-106.1273348,-106.1502963,-106.1713806,-106.1934782,-106.2148998,-106.236981,-106.2546074,-106.2736918,-106.2909539,-106.3109229,-106.3311974,-106.3499938,-106.3707573,-106.3843967,-106.4057939,-106.4234837,-106.4468143,-106.4699163,-106.4900091,-106.5087211,-106.5272397,-106.5459615,-106.5659069,-106.5856367,-106.6022565,-106.6137408,-106.6171446,-106.6266113,-106.6299411,-106.6369225,-106.6445859,-106.6482547,-106.6569724,-106.6721738,-106.6888226,-106.7070355,-106.7214987,-106.7385995,-106.7558941,-106.7704583,-106.7833569,-106.7870144,-106.784347,-106.783874,-106.784347,-106.784347,-106.784347,-106.784347,-106.784347,-106.7843476,-106.7843512,-106.7843455,-106.7843132,-106.7842909,-106.7843028,-106.7842815,-106.7842628,-106.7842693,-106.7842865,-106.7844497,-106.7843801,-106.7877795,-106.7904228,-106.810139,-106.8325785,-106.8547319,-106.8729047,-106.8910003,-106.9114444,-106.9304484,-106.9533564,-106.9763709,-106.998286,-107.0195949,-107.0377519,-107.0581303,-107.077736,-107.0973079,-107.1193144,-107.1408669,-107.165828,-107.1892484,-107.2120041,-107.2369223,-107.263826,-107.2893396,-107.3104488,-107.3282804,-107.3398191,-107.3632887,-107.3849161,-107.4080329,-107.4347263,-107.4606316,-107.4836605,-107.5069921,-107.5248612,-107.5410788,-107.5647503,-107.5913347,-107.6193395,-107.6446368,-107.665553,-107.6881254,-107.7109335,-107.7365035,-107.7588747,-107.7780265,-107.7979628,-107.8163515,-107.8367367,-107.8522361,-107.8728431,-107.8952501,-107.9017571,-107.9177444,-107.9341535,-107.9487997,-107.962748,-107.9784453,-107.9860025,-107.9901525,-107.9973378,-108.0099702,-108.0330681,-108.0537143,-108.0763233,-108.1007556,-108.1231595,-108.1473207,-108.1726033,-108.1966017,-108.2195331,-108.2431039,-108.2651444,-108.2871105,-108.3084434,-108.3277466,-108.3475778,-108.3662884,-108.3848992,-108.4054609,-108.4249344,-108.4506148,-108.4754274,-108.4983722,-108.5214713,-108.5442841,-108.566027,-108.5892538,-108.6138492,-108.6368058,-108.6586201,-108.6692899,-108.6798984,-108.6960385,-108.708639,-108.7088292,-108.7084008,-108.7084919,-108.708639,-108.7085743,-108.7086344,-108.7086269,-108.7085813,-108.7086513,-108.7085506,-108.7084987,-108.7085236,-108.7085372,-108.708529,-108.7085245,-108.7085763,-108.7084913,-108.7085179,-108.7083725,-108.7083491,-108.7084045,-108.7085246,-108.7083672,-108.7083338,-108.7083338,-108.7083338,-108.7083338,-108.7083338,-108.708365,-108.708365,-108.7083642,-108.7083646,-108.7084047,-108.7083713,-108.7083572,-108.7083419,-108.7086241,-108.7090767,-108.7084779,-108.7121336,-108.7199608,-108.7198517,-108.71987,-108.7199608,-108.7199608,-108.7199417,-108.7197694,-108.7220069,-108.7226758,-108.727051,-108.7431752,-108.7627521,-108.7833931,-108.8046059,-108.8253687,-108.8408765,-108.8632394,-108.8868336,-108.9091483,-108.9290446,-108.9466536,-108.9624511,-108.9813406,-108.9972173,-109.008916,-109.0268054,-109.0444331,-109.0566354,-109.0694042,-109.0843392,-109.1043799,-109.1264349,-109.1471803,-109.1675497,-109.1896357,-109.2099664,-109.2323404,-109.253031,-109.270439,-109.2858316,-109.3029523,-109.3194012,-109.3374409,-109.360508,-109.3824308,-109.4040486,-109.4256762,-109.4355546,-109.4332728,-109.4356427,-109.4356485,-109.4359636,-109.4482559,-109.4683685,-109.4866915,-109.5049764,-109.5231838,-109.5430148,-109.5668214,-109.5894389,-109.6098346,-109.6319443,-109.6548452,-109.6767561,-109.6981361,-109.7201402,-109.7413494,-109.7638727,-109.7850705,-109.8066882,-109.8265821,-109.8476253,-109.870105,-109.895343,-109.9215661,-109.9477268,-109.9717778,-109.9965851,-110.020602,-110.0450421,-110.0694705,-110.0919512,-110.109448,-110.1267058,-110.1366769,-110.1549151,-110.1795649,-110.2025611,-110.2259237,-110.2471948,-110.2637365,-110.2787473,-110.2972281,-110.3167429,-110.3399636,-110.3643883,-110.388822,-110.4151499,-110.4407725,-110.465612,-110.4889228,-110.5120145,-110.5355047,-110.5585834,-110.580425,-110.6026882,-110.6246409,-110.6461984,-110.6670588,-110.682879,-110.696588,-110.7168515,-110.7381446,-110.7595957,-110.7803991,-110.8016346,-110.8247808,-110.8461376,-110.8651937,-110.8846442,-110.9039787,-110.9241769,-110.9438851,-110.9655005,-110.9858347,-111.0059991,-111.0273753,-111.0483255,-111.0683291,-111.0892901,-111.110163,-111.1329721,-111.1553572,-111.1788029,-111.1991014,-111.2216992,-111.242191,-111.2640047,-111.2844899,-111.3053813,-111.3266125,-111.3474504,-111.3690012,-111.3898755,-111.4101438,-111.431626,-111.4554012,-111.4769146,-111.4997985,-111.5203655,-111.5418187,-111.5629336,-111.5812691,-111.5877524,-111.5953976,-111.5968955,-111.6042783],\"lat\":[33.8465853,33.8361607,33.8283154,33.8185757,33.8086421,33.7970326,33.7805263,33.7672676,33.755394,33.7437364,33.7266033,33.7120551,33.6977384,33.6854827,33.6724931,33.6614919,33.6505909,33.6382219,33.6206107,33.6188275,33.6017875,33.5894309,33.575587,33.5612994,33.551666,33.5419701,33.5307047,33.5196752,33.5025841,33.4868779,33.4695842,33.4529994,33.4410196,33.4307704,33.4164157,33.400236,33.3845295,33.367116,33.3473453,33.329622,33.3141708,33.2946076,33.2756129,33.2570992,33.2388582,33.2211068,33.2070114,33.1947363,33.1800601,33.1635535,33.1469295,33.1313731,33.1133854,33.0953763,33.0804292,33.0661186,33.0536296,33.0401393,33.0241776,33.0100232,32.9975247,32.984959,32.9766727,32.9661492,32.9520121,32.9343297,32.9153437,32.8990072,32.8830232,32.8685804,32.8535169,32.8390878,32.8251834,32.8092655,32.7935376,32.7775912,32.761054,32.7444772,32.7263163,32.7074977,32.6889266,32.6724289,32.655765,32.6396942,32.6307417,32.62115,32.6111249,32.6023451,32.5912678,32.5778347,32.566639,32.5567551,32.5458052,32.5357867,32.5268961,32.5138636,32.5051784,32.4927251,32.4830665,32.4761401,32.472994,32.4659154,32.4543746,32.4479079,32.4456109,32.4450559,32.4421467,32.4368088,32.4369081,32.4282755,32.4253472,32.417796,32.4046326,32.3937649,32.383276,32.3772266,32.3708433,32.368239,32.3663068,32.3681836,32.3674677,32.3623099,32.3620472,32.3633132,32.3601972,32.3625554,32.3656225,32.3679243,32.365449,32.3490366,32.3348526,32.3281331,32.328181,32.3282387,32.328219,32.3281521,32.3281942,32.3283146,32.3284652,32.3284945,32.3284747,32.3285068,32.3284623,32.3284699,32.3283168,32.3284881,32.3282939,32.3283059,32.3284885,32.3283173,32.328255,32.3282621,32.3280175,32.3283076,32.3228458,32.3025838,32.2837481,32.2660126,32.2490936,32.2318429,32.2169014,32.2000606,32.181882,32.1638748,32.145883,32.1284689,32.1106098,32.0933267,32.0732255,32.0565843,32.0388402,32.0210906,32.0014736,31.9819484,31.9615367,31.94599,31.9284032,31.9098954,31.8919927,31.8740803,31.8587958,31.8456354,31.8275285,31.8072821,31.7872142,31.7708241,31.7520598,31.7338749,31.7160622,31.6990567,31.685201,31.6683284,31.6502702,31.6339555,31.6177417,31.6021115,31.5862065,31.5722019,31.5591425,31.5468064,31.5334551,31.5170671,31.5010555,31.4857736,31.4703785,31.4530374,31.4368718,31.4246471,31.4100812,31.394028,31.3774742,31.3629033,31.3511947,31.3421016,31.3316287,31.3188693,31.3076475,31.2942295,31.2793378,31.2651871,31.2513789,31.24066,31.2302515,31.2176633,31.202361,31.1876348,31.1727007,31.1615484,31.1514874,31.1420276,31.1317233,31.1210225,31.1109729,31.1047457,31.0951692,31.0828245,31.0691315,31.061016,31.0500195,31.0412343,31.0337267,31.0214083,31.0091086,30.9958549,30.98203,30.9725589,30.9655336,30.961153,30.9583572,30.9536361,30.9520923,30.946395,30.9410888,30.9349072,30.928652,30.9189927,30.9095054,30.905613,30.8946628,30.8835377,30.8722132,30.8603503,30.8421501,30.8246759,30.8062728,30.7899996,30.7746541,30.7557289,30.7410989,30.7278948,30.7088952,30.6892435,30.6709399,30.6520902,30.6339786,30.622899,30.6112068,30.5984575,30.5952165,30.5968347,30.5947506,30.5945862,30.5946134,30.593956,30.5942222,30.5953955,30.5953997,30.5953938,30.5942057,30.5944558,30.595026,30.5949843,30.5952165,30.5966323,30.586948,30.5760961,30.5650693,30.5534265,30.5438065,30.5351421,30.5256766,30.5145257,30.5057563,30.4990393,30.4948295,30.4888101,30.4806684,30.4719487,30.4635727,30.4592954,30.4574283,30.4554239,30.4462839,30.4397106,30.4384038,30.4381834,30.4379877,30.4371161,30.4348084,30.4328351,30.4358939,30.4442478,30.4474018,30.4554281,30.458571,30.4545417,30.4543823,30.4542241,30.4540025,30.4476636,30.4521596,30.4607795,30.4580429,30.4494179,30.4452661,30.4414173,30.4375919,30.4315039,30.4261591,30.4236737,30.4187226,30.4172202,30.4116514,30.4044444,30.403439,30.4040394,30.4006194,30.3902237,30.382794,30.3757163,30.3689249,30.3621521,30.3561502,30.3503511,30.3446993,30.3389576,30.333219,30.3333054,30.3273871,30.3210271,30.314124,30.30707,30.3021601,30.2974261,30.2975609,30.2989761,30.3045912,30.2907077,30.2724161,30.2553238,30.236162,30.2209636,30.2060746,30.1909248,30.1756789,30.1603898,30.1453435,30.1279953,30.1126541,30.0977123,30.0822151,30.0674338,30.0559491,30.0492333,30.0483896,30.0481172,30.0486619,30.0483953,30.0493447,30.0486958,30.0487032,30.0489771,30.0488432,30.0488832,30.0488515,30.0489484,30.0488609,30.0491397,30.0486922,30.0485854,30.0486399,30.0484413,30.0475104,30.0477322,30.0477151,30.0476216,30.0485587,30.0425982,30.033528,30.0274905,30.0179842,30.0059231,30.0024907,29.9910691,29.9782112,29.96631,29.9645202,29.9614949,29.9597695,29.9561512,29.9588282,29.9578756,29.9572829,29.9569766,29.9564419,29.956197,29.9569818,29.9578915,29.958136,29.9578768,29.9576923,29.9570057,29.9567951,29.9576175,29.9575051,29.9566267,29.9566282,29.9551868,29.9550549,29.955944,29.9571275,29.9567951,29.9593109,29.9620029,29.960799,29.9615694,29.9621612,29.9614436,29.9620029,29.9574772,29.959868,29.959701,29.9591854,29.9589734,29.9584065,29.9579042,29.9574824,29.9590051,29.9563931,29.957031,29.9565776,29.9563484,29.95623,29.9562698,29.9562665,29.9562579,29.9560295,29.9562264,29.9566011,29.9563931,29.9573154,29.9579891,29.9596762,29.9633068,29.9681582,29.9729652,29.9794238,29.9899345,30.0015705,30.0056644,30.0180968,30.0277624,30.0348076,30.0437517,30.044553,30.0482173,30.0488184,30.0481775,30.0485714,30.0488577,30.0488991,30.0483757,30.0490243,30.0489821,30.0489226,30.0491197,30.048945,30.0488652,30.048923,30.048872,30.0489176,30.0488804,30.0489307,30.0488966,30.0489278,30.0491186,30.0490468,30.0488489,30.0488619,30.0489528,30.0488882,30.0488068,30.0488706,30.0488852,30.0490002,30.0489248,30.0487611,30.0488768,30.0488171,30.0491572,30.0488308,30.0484679,30.0489697,30.0484701,30.0490594,30.0490268,30.049002,30.0492231,30.04832,30.0486199,30.0485211,30.0486766,30.04851,30.0485164,30.0485207,30.0485315,30.0485426,30.0486791,30.0488184,30.0466457,30.0457894,30.053524,30.0513113,30.0330897,30.0158572,30.0027887,29.9876518,29.9716765,29.9576357,29.9494325,29.9429562,29.9372376,29.9406198,29.9447873,29.9447244,29.9447195,29.9455162,29.9463288,29.9419702,29.9418763,29.9418411,29.9417632,29.9408523,29.9401584,29.9419311,29.9419878,29.9423854,29.9427192,29.9431043,29.9421209,29.942002,29.9430796,29.9422869,29.9418971,29.9419082,29.9418152,29.9420659,29.941895,29.9418865,29.9418865,29.942002,29.9449369,29.9501731,29.9578683,29.9613603,29.9646362,29.966494,29.9691236,29.9697512,29.9716122,29.9738942,29.9800474,29.9904125,29.9917045,29.9921273,29.9939539,29.9957089,29.9967826,29.9976885,29.9988265,30.0008335,30.008163,30.0095047,30.0082292,30.0067708,30.0088306,30.0194187,30.0306567,30.0414135,30.0529394,30.0639916,30.075206,30.0823303,30.0888533,30.0950689,30.1018521,30.107986,30.1102461,30.1122893,30.1143561,30.1163727,30.1184716,30.1208097,30.1231064,30.1264204,30.1336406,30.1405891,30.1475801,30.151914,30.1557399,30.1622492,30.1689298,30.1772475,30.187719,30.1972445,30.2105928,30.2275046,30.2442869,30.2632523,30.2830125,30.3041545,30.3222978,30.3382712,30.3540899,30.3712223,30.3833788,30.394535,30.4080512,30.4190201,30.4223517,30.4232489,30.4236348,30.424783,30.4272611,30.4384984,30.4394988,30.4405393,30.445572,30.4494212,30.4536966,30.4524923,30.4512944,30.4465134,30.4409137,30.4353813,30.4298946,30.4225949,30.4168324,30.4114911,30.4057936,30.3997036,30.3939256,30.3884027,30.3824092,30.376519,30.370966,30.3656092,30.3608347,30.3552631,30.3500071,30.3447489,30.3398202,30.3347094,30.3290675,30.3239067,30.3192156,30.316481,30.3161281,30.3164817,30.3164817,30.316481,30.3164848,30.3164925,30.3164799,30.3166402,30.3167719,30.3167404,30.3168353,30.3166172,30.3164813,30.3164633,30.3164701,30.3164606,30.3164489,30.3164493,30.316496,30.3164746,30.316627,30.3167314,30.3167313,30.3165209,30.316527,30.3165837,30.3165775,30.3165652,30.316524,30.3165701,30.3165512,30.316569,30.3165486,30.3165732,30.3165523,30.3155591,30.3119713,30.3065294,30.3003064,30.2939645,30.2845527,30.2771102,30.2708426,30.2635503,30.2549325,30.2474187,30.2471289,30.2472771,30.2474158,30.2475565,30.2477364,30.2478235,30.2479346,30.2504388,30.2525202,30.252378,30.2467353,30.240019,30.2357022,30.2357659,30.2358427,30.2360391,30.2361764,30.2339539,30.2310425,30.2315196,30.2321887,30.2363777,30.2364564,30.2365462,30.2415237,30.2468031,30.246761,30.2466271,30.2469025,30.2479421,30.2474105,30.2473069,30.2471401,30.2468592,30.2467995,30.2467505,30.2466962,30.2467297,30.2466341,30.2467456,30.2497215,30.2496946,30.247973,30.2477934,30.2477939,30.2476477,30.2440969,30.2456995,30.246735,30.2362666,30.2359139,30.2372353,30.2371048,30.237541,30.2314602,30.2239118,30.2163161,30.2161424,30.2159036,30.2159614,30.2140834,30.2100752,30.2057801,30.2017682,30.197492,30.1931017,30.1886284,30.1874868,30.1860665,30.1875058,30.1877115,30.1874878,30.187535,30.1876029,30.1875639,30.1875872,30.1875701,30.1874138,30.1875686,30.1877636,30.1877565,30.1877457,30.1877457,30.1878483,30.1877912,30.1875657,30.1875636,30.1875651,30.187591,30.1875951,30.1873983,30.1875739,30.1823432,30.1744131,30.1657838,30.1566318,30.1486442,30.1401289,30.1319062,30.1234119,30.1187278,30.1214583,30.1214864,30.1172225,30.1147067,30.1218259,30.1299332,30.1301227,30.1310018,30.1304445,30.1297697,30.1314254,30.1358468,30.1269188,30.1145907,30.1012817,30.0949458,30.0963041,30.0961663,30.0841568,30.0670281,30.0537339,30.0422234,30.0284751,30.0153574,30.0011909,29.9890124,29.9874866,29.989025,29.9890239,29.9890124,29.9890124,29.9890124,29.9890109,29.9891113,29.9891133,29.989034,29.9890386,29.9889321,29.9889256,29.9874489,29.9769762,29.9621112,29.9477574,29.9357698,29.9233092,29.9080018,29.8964045,29.8829088,29.8728625,29.8599723,29.8447456,29.8289724,29.8273439,29.8271901,29.8289584,29.8308363,29.8325583,29.8343155,29.8361249,29.8377596,29.8386866,29.8395933,29.8404937,29.8408012,29.8401336,29.8393227,29.8389926,29.8366096,29.8321052,29.8287807,29.8265652,29.8244758,29.8225147,29.8214048,29.8131636,29.808884,29.8044727,29.8006351,29.7975388,29.7905128,29.7951881,29.7901789,29.7828702,29.7766609,29.7714946,29.7708304,29.7715225,29.7704947,29.773934,29.7748058,29.778008,29.7755132,29.7743993,29.7691574,29.768883,29.7712489,29.778919,29.7766684,29.7775736,29.7785306,29.7828751,29.7840308,29.7845221,29.784567,29.784712,29.7847984,29.7849007,29.785005,29.7850723,29.7851231,29.7851504,29.7851202,29.7853172,29.7853951,29.7853823,29.7854904,29.7856053,29.7793483,29.7774685,29.7775085,29.7774571,29.777401,29.7773386,29.7790054,29.7788481,29.7815697,29.7779346,29.7729372,29.7708885,29.7736268,29.7765488,29.7757869,29.768006,29.7613835,29.7635525,29.7607735,29.7572391,29.7543711,29.7514918,29.7475192,29.7423644,29.7377858,29.7326898,29.7281244,29.7236123,29.7188598,29.7162013,29.7127331,29.7050657,29.6980038,29.6924337,29.6937858,29.6936303,29.6934933,29.6923798,29.6909907,29.6895921,29.6886854,29.691855,29.6923799,29.6920719,29.6904329,29.68872,29.6925165,29.6965352,29.6960631,29.6952933,29.694561,29.6951115,29.6952926,29.6952938,29.6953162,29.6952929,29.6953252,29.694988,29.6951832,29.6949994,29.6950198,29.6950108,29.6950055,29.6949877,29.6950163,29.6949249,29.6949961,29.6949708,29.6950051,29.6949905,29.694985,29.6949995,29.6949799,29.6949923,29.6949923,29.6949583,29.6949834,29.6939309,29.6950355,29.690861,29.6895042,29.6901981,29.6915756,29.6937939,29.6976423,29.6978369,29.6971457,29.6965373,29.6960463,29.6920662,29.6923088,29.6925511,29.6909345,29.6812728,29.6703971,29.6680619,29.666053,29.6638229,29.661334,29.6580477,29.6554521,29.6519818,29.6499565,29.6515075,29.6529857,29.6542449,29.6522375,29.6484697,29.6502838,29.6519585,29.6471379,29.6414476,29.6355497,29.6295354,29.6234628,29.6166257,29.6150693,29.6147526,29.6096299,29.6044961,29.5995464,29.5995156,29.5994571,29.5887632,29.5759157,29.5638083,29.5490237,29.5421814,29.5351037,29.5293553,29.5215814,29.5139625,29.5066623,29.4994738,29.4921952,29.4858184,29.4791777,29.4722598,29.4657127,29.4601318,29.4538347,29.4471473,29.4398762,29.4333161,29.4273955,29.4130703,29.4068638,29.4029223,29.4028277,29.4018215,29.4027972,29.4029548,29.4029489,29.4029915,29.4029375,29.4029872,29.4029251,29.40293,29.4029577,29.4029964,29.4030033,29.4029394,29.4028663,29.4028159,29.4029047,29.4029735,29.402971,29.402975,29.4030331,29.4029135,29.4029811,29.4030115,29.4030312,29.402827,29.4028474,29.4027223,29.4029174,29.402901,29.4029499,29.4028201,29.4027942,29.4027911,29.4028048,29.4028067,29.4027969,29.4027959,29.4029773,29.4028277,29.4028592,29.4018061,29.3971059,29.4091111,29.4198411,29.4215708,29.4215708,29.4226959,29.4228618,29.4233574,29.4238629,29.4238629,29.4228989,29.4229368,29.4232088,29.4224398,29.4236948,29.4239438,29.4242142,29.4245528,29.4249606,29.4250825,29.4252131,29.4237545,29.4259096,29.4255609,29.4257454,29.4257128,29.425811,29.4260218,29.4261176,29.4263047,29.4262991,29.4257508,29.4260027,29.4256512,29.4259096,29.4247173,29.4249482,29.424958,29.4236904,29.4231377,29.4247173,29.4228447,29.4228136,29.4228447,29.4228543,29.4223451,29.4214654,29.4244437,29.4383992,29.4375824,29.4346847,29.4436294,29.4598139,29.4764605,29.4848404,29.4994078,29.5183379,29.5340672,29.5470294,29.5640557,29.582609,29.6000422,29.6160879,29.6339853,29.6499316,29.6671681,29.6855317,29.703233,29.7195113,29.7331239,29.7479716,29.7621824,29.7747121,29.7871975,29.8061248,29.8246543,29.8378831,29.8553474,29.8740292,29.8888496,29.9050816,29.9166312,29.9275443,29.9436809,29.9604115,29.9785062,29.987382,30.0001081,30.0144879,30.030925,30.0436865,30.0534454,30.0563665,30.0678059,30.0698979,30.0705143,30.0729971,30.0848332,30.0953876,30.1094422,30.1183902,30.1288541,30.1462182,30.1635141,30.1718236,30.1798222,30.1851348,30.1910586,30.1981519,30.2061596,30.2170941,30.2311212,30.2455195,30.2562995,30.2667647,30.2792336,30.2910942,30.3041594,30.3185659,30.3368985,30.3576245,30.376199,30.3940374,30.4028829,30.411977,30.4261489,30.4326427,30.4475816,30.4661494,30.4853776,30.4971405,30.5093723,30.5078481,30.5093341,30.5092842,30.509353,30.5093762,30.5093762,30.5093762,30.5091158,30.5091379,30.509263,30.5089787,30.5091819,30.5091269,30.5091004,30.5090255,30.5090199,30.5091519,30.5090295,30.5090221,30.5090031,30.509008,30.5090656,30.5091015,30.5090948,30.5090794,30.5090517,30.5090143,30.5090114,30.5090218,30.5090334,30.5091114,30.5091279,30.509153,30.5090949,30.50916,30.5091342,30.5089669,30.5090961,30.5091137,30.5091224,30.5091075,30.5090916,30.5095308,30.5155731,30.5206869,30.5263948,30.5257386,30.521266,30.514133,30.5011709,30.502665,30.499565,30.4949795,30.4956101,30.4872253,30.4831199,30.4806895,30.4741044,30.4676042,30.4602505,30.4540554,30.4464342,30.4441357,30.4469813,30.4536219,30.4623732,30.4721759,30.4820104,30.4905107,30.4997449,30.5093935,30.5195377,30.5306249,30.5414408,30.5501126,30.5581459,30.5647478,30.56817,30.5714049,30.5737024,30.5759798,30.5782051,30.5862042,30.5905234,30.5983222,30.6084548,30.6158628,30.6159177,30.6159177,30.6159177,30.6159442,30.615945,30.6159507,30.6183986,30.6217144,30.6203113,30.6213548,30.6279375,30.6344472,30.6413469,30.647875,30.6594888,30.6647679,30.669116,30.6742839,30.6799182,30.686052,30.6920937,30.6974189,30.7032523,30.7090121,30.7117672,30.7123651,30.7084867,30.7059429,30.7008529,30.6962079,30.6926178,30.6837017,30.6775566,30.6815373,30.6875281,30.6897695,30.6926688,30.6971386,30.7012187,30.7081393,30.7225587,30.7279736,30.730748,30.7338141,30.7346181,30.7377856,30.742201,30.7476341,30.7407991,30.7334443,30.722359,30.7158168,30.7171441,30.7286475,30.7403671,30.7443231,30.7485107,30.7578267,30.7679732,30.7830614,30.7993252,30.8105303,30.8256231,30.8364127,30.846146,30.8576717,30.8691182,30.877842,30.8854459,30.8921306,30.8916212,30.8935258,30.8931056,30.891124,30.8850684,30.8886106,30.8953101,30.8954239,30.8923034,30.8886856,30.8848811,30.8786211,30.8696713,30.8651162,30.8621126,30.8612475,30.8638652,30.8733272,30.8769578,30.8799581,30.8846343,30.8895136,30.8901274,30.8907464,30.8913958,30.8919809,30.8954531,30.9053575,30.9072242,30.9023997,30.9117423,30.9236961,30.9362895,30.9496983,30.9626819,30.9750872,30.9862491,30.9966061,31.0067894,31.0187309,31.0291175,31.0425461,31.0559604,31.0680859,31.0802724,31.0933402,31.1062553,31.1192344,31.1342525,31.1498098,31.1643261,31.1792094,31.1954698,31.2123287,31.2291314,31.2450689,31.2610738,31.2744772,31.2887209,31.3044786,31.3196304,31.3407316,31.359863,31.3757457,31.3896056,31.3990416,31.3989884,31.3990272,31.3990265,31.3990258,31.3989941,31.3990038,31.3986705,31.399015,31.3991125,31.3991288,31.3991378,31.3989533,31.3990051,31.3989983,31.3989849,31.3990383,31.3989704,31.3989657,31.3989891,31.3989848,31.3990038,31.4014409,31.402124,31.4050046,31.411269,31.4223238,31.4317329,31.4443276,31.4605972,31.4747691,31.4887114,31.5046576,31.5193151,31.5338121,31.5477256,31.5613592,31.5786817,31.5947328,31.6087121,31.6269522,31.6416408,31.648432,31.6546877,31.659829,31.6655745,31.6711724,31.6779387,31.6856573,31.6976348,31.7099242,31.7255386,31.7393658,31.7540745,31.7684988,31.7822298,31.7969771,31.8135032,31.8248853,31.8315656,31.8483901,31.8644699,31.8819006,31.894479,31.9081803,31.9220112,31.9358082,31.9529987,31.9696143,31.9847475,31.9984339,32.0095213,32.0192349,32.0296916,32.0436333,32.0576482,32.0704691,32.083139,32.1089903,32.1227531,32.1352155,32.1465673,32.158499,32.1697046,32.1814462,32.1934507,32.2044362,32.2154614,32.2248038,32.2313629,32.2393833,32.2491167,32.2596715,32.2674543,32.2705449,32.2746968,32.2760694,32.2774765,32.2816896,32.2860913,32.2933042,32.3013663,32.3121074,32.3230633,32.3341045,32.3460087,32.3574034,32.3701118,32.3816616,32.3876021,32.3890064,32.3932268,32.39384,32.3950488,32.4019808,32.3996297,32.4000562,32.4017108,32.4019822,32.402006,32.4020007,32.4019826,32.4015237,32.401498,32.4014477,32.401465,32.4013086,32.4015204,32.401475,32.401423,32.4013926,32.4019865,32.401526,32.4014911,32.4015289,32.4015101,32.4015638,32.4014734,32.401478,32.401515,32.4014765,32.4017801,32.4015363,32.3985848,32.3901043,32.3828983,32.3730361,32.3656891,32.3541027,32.3421912,32.3282748,32.313231,32.2968492,32.2798912,32.2627632,32.2454408,32.2287909,32.2113132,32.1978597,32.1851649,32.1759155,32.178348,32.1883302,32.1896225,32.1901942,32.1812458,32.1748631,32.1748539,32.1747882,32.1749049,32.1748616,32.1753629,32.1751983,32.1750785,32.1754145,32.1751511,32.1748699,32.1751541,32.1750228,32.1749224,32.1749417,32.1749555,32.1749415,32.1749182,32.1750095,32.175166,32.1740686,32.1792362,32.1824583,32.192066,32.1919319,32.1875323,32.1807993,32.1750985,32.1804425,32.1933881,32.2068119,32.2215396,32.2386683,32.2570896,32.2755244,32.2938933,32.3123943,32.330629,32.3465337,32.3601542,32.3703024,32.370427,32.3829743,32.3939728,32.3963634,32.4030209,32.4137359,32.4146754,32.4146817,32.4227966,32.4312838,32.4407674,32.4512995,32.4656893,32.4812548,32.4859967,32.4918643,32.5003348,32.5155014,32.5319325,32.5513967,32.5690746,32.585922,32.604545,32.6221628,32.63993,32.6589936,32.6783401,32.6988503,32.718401,32.7390731,32.7589929,32.7802236,32.8002107,32.8181295,32.8321041,32.8421897,32.8465203,32.8594205,32.873199,32.8879281,32.9006235,32.9160909,32.9340374,32.9518378,32.9695445,32.9888458,33.0069707,33.0270578,33.0491246,33.0695959,33.0891425,33.1109744,33.1315089,33.1537521,33.1745248,33.1958054,33.2159867,33.2379765,33.2581503,33.2795075,33.2986757,33.3119484,33.3235671,33.3393592,33.3545015,33.3651651,33.3725843,33.3794427,33.3869677,33.3930092,33.3951118,33.4000425,33.4081553,33.4119601,33.4154804,33.4226033,33.4293714,33.4357546,33.4466682,33.4583673,33.4721752,33.4897897,33.5063839,33.5251106,33.544604,33.564614,33.5843942,33.6011374,33.6183707,33.6348775,33.6530081,33.6721243,33.6906493,33.7108951,33.7297246,33.7481566,33.7690489,33.7878213,33.8090325,33.8308589,33.8510288,33.8723171,33.8939875,33.9138599,33.929162,33.9431777,33.9586869,33.9736239,33.9884392,34.0021118,34.0183205,34.0336234,34.0487774,34.0668403,34.0850521,34.1014219,34.1200188,34.1381324,34.1568966,34.1735717,34.1922368,34.2125463,34.2327343,34.2516862,34.2694625,34.2883671,34.3090363,34.3269202,34.3442642,34.3610804,34.3797262,34.3985789,34.4177165,34.4353859,34.4545089,34.4720834,34.4894228,34.5077363,34.5251559,34.5423189,34.5596154,34.5778869,34.5924974,34.5945248,34.5944867,34.5944934,34.5944991,34.5945109,34.5944907,34.5944748,34.5944854,34.5944891,34.5946518,34.5946711,34.5947363,34.5947038,34.5947789,34.5947491,34.5947497,34.5947625,34.5947545,34.5947586,34.594742,34.5947335,34.5947335,34.5947786,34.5947756,34.5947205,34.5947176,34.5947213,34.5946146,34.5947492,34.594756,34.5947873,34.5947612,34.5947712,34.5947759,34.5948163,34.5946867,34.6017386,34.6016788,34.5958313,34.5891509,34.5896764,34.5888339,34.5917502,34.5966768,34.6047014,34.6149298,34.6262499,34.6405385,34.6444812,34.6487808,34.6514862,34.6590614,34.6754248,34.6952135,34.7144326,34.7342148,34.7525363,34.7703032,34.7895298,34.8091983,34.8292074,34.8474105,34.8646119,34.88414,34.9042143,34.921876,34.9420986,34.9607739,34.9799413,35.000891,35.0088318,35.0099364,35.008398,35.0044774,35.0047459,35.0049589,35.0051372,35.0053809,35.0053601,35.0059824,35.0066964,35.0050424,35.0049261,35.0048397,35.0048197,35.0079094,35.0114751,35.0194762,35.0290767,35.0387478,35.0480979,35.0566035,35.0645309,35.0726382,35.0814756,35.088602,35.0962417,35.1023702,35.1111509,35.113574,35.1021981,35.0954444,35.0829986,35.080734,35.0665656,35.0616827,35.0632863,35.0669839,35.0742183,35.0813559,35.0885385,35.0965258,35.1039106,35.1047132,35.1073164,35.1075969,35.1061973,35.1055435,35.105164,35.105784,35.1063613,35.1065287,35.1050557,35.106196,35.1058121,35.0986265,35.0900263,35.081275,35.0739654,35.0675105,35.0639599,35.0645294,35.0640966,35.0645294,35.0645294,35.0645294,35.0645294,35.0645294,35.0645322,35.0645486,35.0645577,35.0645296,35.0645222,35.0645523,35.0645284,35.064505,35.0645005,35.0645542,35.0634664,35.0644223,35.0652777,35.0640558,35.0592415,35.0558055,35.0523997,35.0488635,35.0448182,35.0401843,35.0358741,35.030635,35.0253887,35.0202859,35.0135096,35.0077361,35.0012449,34.9949984,34.9887588,34.9817781,34.9787718,34.9826159,34.9862387,34.9897118,34.9930999,34.9934584,34.9937824,35.0025274,35.017368,35.0332082,35.0391018,35.029908,35.0265375,35.0271522,35.0302848,35.0368259,35.047355,35.0605923,35.0738915,35.0744572,35.0751699,35.0758735,35.0763587,35.0727691,35.0652964,35.0644247,35.0684066,35.0759623,35.0902105,35.1033375,35.1154314,35.128837,35.1436452,35.1534231,35.1648985,35.18431,35.2018107,35.2190945,35.2345084,35.2490647,35.2654321,35.284429,35.3044611,35.3244826,35.345128,35.3557055,35.3640564,35.3711625,35.3757293,35.3814413,35.3862194,35.3889273,35.3909351,35.3956468,35.4004878,35.4050212,35.4127504,35.4220817,35.4307836,35.4394532,35.4475328,35.4549797,35.464288,35.4773664,35.483616,35.4892465,35.4952292,35.5039893,35.5126304,35.519325,35.5263163,35.5304126,35.5318327,35.5309028,35.5312918,35.5301682,35.5292555,35.5289845,35.5293723,35.5288397,35.5288977,35.5289845,35.5290159,35.5290302,35.5289874,35.5289909,35.5288933,35.5289843,35.528964,35.5289934,35.5290217,35.528932,35.5289492,35.5289703,35.5289723,35.5290658,35.5288293,35.5288409,35.5288004,35.5290036,35.5288503,35.5288727,35.5288727,35.5288727,35.5288727,35.5288727,35.5288419,35.5288419,35.5288452,35.5288557,35.5288365,35.5288345,35.5288391,35.5288479,35.5291518,35.5292278,35.5289354,35.5294794,35.5297754,35.5298036,35.5297781,35.5297754,35.5297754,35.5297666,35.529744,35.5300424,35.5299654,35.5339859,35.5309401,35.5278771,35.5217775,35.5141771,35.5111428,35.4994334,35.4963824,35.4904935,35.4830319,35.4717062,35.4574662,35.4394875,35.4266782,35.4117447,35.3926383,35.377855,35.367649,35.3532386,35.3371731,35.323655,35.3117692,35.302201,35.29322,35.2845946,35.2810577,35.2829158,35.2830549,35.2784036,35.2678001,35.2520653,35.2382046,35.2252827,35.2138626,35.2065143,35.201923,35.197377,35.19283,35.1898783,35.1904123,35.1899125,35.189917,35.1904394,35.1868323,35.1762627,35.1643605,35.1524732,35.1406332,35.1286086,35.1195993,35.1117762,35.1048929,35.1009459,35.0976543,35.0936916,35.0873559,35.0808512,35.0745756,35.0679109,35.0583592,35.0460352,35.0345984,35.0225393,35.0097146,35.0016478,34.9969775,34.9929113,34.9909038,34.9910128,34.9869085,34.9825768,34.9782519,34.9711568,34.9576821,34.9425257,34.9248805,34.913242,34.9085861,34.9063653,34.9091291,34.9145187,34.9253092,34.9385273,34.947186,34.9551148,34.9546357,34.9584739,34.9623448,34.966522,34.9700623,34.9711846,34.9722381,34.9733671,34.9787203,34.9866368,34.9940989,35.0017038,35.0069728,35.010289,35.0159626,35.0271007,35.0396161,35.038473,35.039775,35.0454316,35.0515274,35.0577443,35.0645163,35.0707673,35.0763362,35.0820775,35.0886579,35.0934724,35.0963778,35.0995505,35.1016518,35.1059921,35.1100548,35.1122864,35.1143879,35.1174734,35.1166029,35.1186637,35.1208743,35.1274509,35.1349042,35.1431939,35.1507018,35.1586973,35.1601679,35.1614299,35.1698075,35.178032,35.1865248,35.1949416,35.2026903,35.2018772,35.2025624,35.2020213,35.2062784,35.2097034,35.2146846,35.2186688,35.2179974,35.2210796,35.2159135,35.2150697,35.2113672]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":false,\"fillColor\":\"#03F\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[29.3971059,35.5339859],\"lng\":[-111.6042783,-84.3051758]},\"setView\":[[29.4257332714475,-98.4862755390452],18,[]]},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\\ \n\nThe `big_long_combined_route` object we just made here isn't a data frame anymore—it's a list instead. It still works with `geom_sf()`, but because we collapsed all the points into one line, we lots lots of detail, like timestamps. We can keep some of those details if we use `group_by()` to separate lines per day (or hour or whatever grouping variable we want). For instance, earlier we created a column called `day`. Let's make a separate linestring for each day using `group_by()` and `nest()` and `map()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Combine all the points in the day into a connected linestring\ndaily_routes <- all_locations %>% \n  group_by(day_month) %>% \n  nest() %>% \n  mutate(path = map(data, ~st_cast(st_combine(.), \"LINESTRING\"))) %>% \n  unnest(path) %>% \n  st_set_geometry(\"path\")\ndaily_routes\n## Simple feature collection with 4 features and 2 fields\n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: -111.6 ymin: 29.4 xmax: -84.31 ymax: 35.53\n## Geodetic CRS:  WGS 84\n## # A tibble: 4 × 3\n## # Groups:   day_month [4]\n##   day_month data                                                                                                 path\n##   <fct>     <list>                                                                                   <LINESTRING [°]>\n## 1 June 3    <sf [521 × 19]> (-84.31 33.85, -84.33 33.84, -84.34 33.83, -84.36 33.82, -84.38 33.81, -84.39 33.8, -8...\n## 2 June 4    <sf [596 × 19]> (-89.96 30.05, -89.96 30.05, -89.96 30.05, -89.96 30.05, -89.96 30.05, -89.96 30.05, -...\n## 3 June 5    <sf [509 × 19]> (-98.44 29.4, -98.44 29.4, -98.44 29.4, -98.44 29.4, -98.44 29.4, -98.44 29.4, -98.44 ...\n## 4 June 6    <sf [662 × 19]> (-104.2 32.4, -104.2 32.4, -104.2 32.4, -104.2 32.4, -104.2 32.4, -104.2 32.4, -104.2 ...\n```\n:::\n\n\nNow we have a data frame with a row per day, and a corresponding path per day too:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = lower_48) +\n  geom_sf(data = daily_routes, aes(color = day_month),\n    linewidth = 1) +\n  geom_label_repel(\n    data = daily_routes,\n    aes(label = day_month, fill = day_month, geometry = path),\n    stat = \"sf_coordinates\", seed = 12345,\n    color = \"white\", size = 3, segment.color = \"grey30\", \n    min.segment.length = 0, box.padding = 1,\n    show.legend = FALSE, family = \"Overpass ExtraBold\"\n  ) +\n  scale_color_manual(values = clrs[c(2, 4, 7, 9)], name = NULL, guide = \"none\") +\n  scale_fill_manual(values = clrs[c(2, 4, 7, 9)], name = NULL, guide = \"none\") +\n  coord_sf(\n    xlim = trip_window[, \"X\"],\n    ylim = trip_window[, \"Y\"]) +\n  theme_roadtrip_map()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic-map-linestring-by-day-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Semantic location history\n\nWorking with `Records.json` is great and fairly straightforward (once we handle all the weird data cleaning issues and time zones!), but we can do even cooler things with the more detailed semantic location history data. As seen earlier, this data is far more complex, with all sorts of nested entries and predicted probabilities of modes of transportation or location stops, so we can't use the `simplifyVector` to get a basic data frame. Instead, we need to pull out each of the elements we're interested in and build our own data frame.\n\nAdditionally, the location history file includes both `placeVisit`s and `activitySegment`s in the same file, so to make life a little easier, we can filter the data after we read the file to only keep one of the types of events using `map()`\n\n### `placeVisit`s\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplace_visits_raw <- read_json(\n  \"data/Semantic Location History/2023/2023_JUNE_truncated.json\", \n  simplifyVector = FALSE\n) %>% \n  # Extract the timelineObjects JSON element\n  pluck(\"timelineObjects\") %>%\n  # Filter the list to only keep placeVisits\n  # { More verbose function-based approach: map(~ .x[[\"placeVisit\"]]) }\n  # Neat selection-based approach with just the name!\n  map(\"placeVisit\") %>% \n  # Discard all the empty elements (i.e. the activitySegments)\n  compact()\n```\n:::\n\n\nFor this post, I'm interested in looking at all the places we stopped for gas and bathroom breaks along the way. I'm not interested in hotel stops or tourist stops. I want to know how long we typically stopped for breaks. There are 24 entries in this list…\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlength(place_visits_raw)\n## [1] 24\n```\n:::\n\n\n…but not all of them are gas or bathroom breaks, so I manually looked through the data and copied the location IDs of the stops that weren't gas stops.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnot_driving_stops <- c(\n  \"ChIJnwDSTcsDnogRLyt_lqVprLY\",  # Hotel in New Orleans, LA\n  \"ChIJgcNDAhKmIIYRRA4mio_7VgE\",  # Parking in the French Quarter\n  \"ChIJv30_Xw-mIIYRpt26QbLBh58\",  # Louis Armstrong Park\n  \"ChIJ59n6fW8dnogRWi-5N6olcyU\",  # Chalmette Battlefield\n  \"ChIJ_7z4c1_2XIYR6b9p0NvEiVE\",  # Hotel in San Antonio, TX\n  \"ChIJX4k2TVVfXIYRIsTnhA-P-Rc\",  # The Alamo\n  \"ChIJAdu5Qad544YRhyJT8qzimi4\",  # Hotel in Carlsbad, NM\n  \"ChIJW9e4xBN544YRvbI7vfc91G4\",  # Carlsbad Caverns\n  \"ChIJERiZZMWOLYcRQbo78w80s34\"   # Hotel in Flagstaff, AZ\n)\n```\n:::\n\n\nCurrently, `place_visits_raw` is a huge nested list with the complete place information from Google. All we care about is a small subset of that data, so we can take the list, extract the parts we need, and build a data frame with `map() %>% list_rbind()` (the recommended replacement for {purrr}'s now-superseded `map_df()`). Like we did with `Records.json`, we'll also figure out the time zone for each point and make all the timestamps be local.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Computer friendly timezones like America/New_York work for computers, but I\n# want to sometimes show them as US-standard abbreviations like EDT (Eastern\n# Daylight Time), so here's a little lookup table we can use to join to bigger\n# datasets for better abbreviations\ntz_abbreviations <- tribble(\n  ~tz,                ~tz_abb,\n  \"America/New_York\", \"EDT\",\n  \"America/Chicago\",  \"CDT\",\n  \"America/Denver\",   \"MDT\",\n  \"America/Phoenix\",  \"MST\"\n)\n\nplace_visits <- place_visits_raw %>% \n  # Extract parts of the nested list\n  map(~{\n    tibble(\n      id = .x$location$placeId,\n      latitudeE7 = .x$location$latitudeE7 / 1e7,\n      longitudeE7 = .x$location$longitudeE7 / 1e7,\n      name = .x$location$name,\n      address = .x$location$address,\n      startTimestamp = ymd_hms(.x$duration$startTimestamp, tz = \"UTC\"),\n      endTimestamp = ymd_hms(.x$duration$endTimestamp, tz = \"UTC\")\n    )\n  }) %>% \n  list_rbind() %>% \n  # Calculate the duration of the stop\n  mutate(duration = endTimestamp - startTimestamp) %>% \n  # Make an indicator for if the stop was a gas or bathroom break\n  mutate(driving_stop = !(id %in% not_driving_stops)) %>% \n  # Make a geometry column\n  st_as_sf(coords = c(\"longitudeE7\", \"latitudeE7\"), crs = st_crs(\"EPSG:4326\")) %>% \n  # Make a column with the time zone for each point\n  mutate(tz = tz_lookup(., method = \"accurate\")) %>% \n  # Create a version of the timestamp in local time, but in UTC\n  group_by(tz) %>% \n  mutate(\n    startTimestamp_local = force_tz(with_tz(startTimestamp, tz), \"UTC\"),\n    endTimestamp_local = force_tz(with_tz(endTimestamp, tz), \"UTC\")\n  ) %>% \n  ungroup() %>% \n  # Add a column for direction\n  # In the real data, I have values for \"There\" (the trip from Atlanta to Utah)\n  # and \"Back again\" (the trip from Utah to Atlanta)\n  mutate(direction = \"There\") %>% \n  # Add some helper columns for filtering, grouping, etc.\n  mutate(\n    year = year(startTimestamp_local),\n    month = month(startTimestamp_local),\n    day = day(startTimestamp_local)\n  ) %>% \n  mutate(\n    day_month = strftime(startTimestamp_local, \"%B %e\"),\n    # With %e, there's a leading space for single-digit numbers, so we remove\n    # any double spaces and replace them with single spaces \n    # (e.g., \"June  3\" becomes \"June 3\")\n    day_month = str_replace(day_month, \"  \", \" \"),\n    day_month = fct_inorder(day_month)\n  ) %>% \n  # Bring in abbreviated time zones\n  left_join(tz_abbreviations, by = join_by(tz))\nplace_visits\n## Simple feature collection with 24 features and 16 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -111.6 ymin: 29.4 xmax: -86.34 ymax: 35.53\n## Geodetic CRS:  WGS 84\n## # A tibble: 24 × 17\n##    id                          name                            address                                            startTimestamp      endTimestamp        duration    driving_stop       geometry tz              startTimestamp_local endTimestamp_local  direction  year month   day day_month tz_abb\n##    <chr>                       <chr>                           <chr>                                              <dttm>              <dttm>              <drtn>      <lgl>           <POINT [°]> <chr>           <dttm>               <dttm>              <chr>     <dbl> <dbl> <int> <fct>     <chr> \n##  1 ChIJQ0NgzsqAjogRISqopW4DZMc Chevron                         1030 W South Blvd, Montgomery, AL 36105, USA       2023-06-03 14:27:23 2023-06-03 14:50:24  23.02 mins TRUE         (-86.34 32.33) America/Chicago 2023-06-03 09:27:23  2023-06-03 09:50:24 There      2023     6     3 June 3    CDT   \n##  2 ChIJMU2weFNKmogRNvJ9RoXN_Vk Walmart Supercenter             5245 Rangeline Service Rd, Mobile, AL 36619, USA   2023-06-03 17:12:34 2023-06-03 17:59:38  47.07 mins TRUE         (-88.16 30.59) America/Chicago 2023-06-03 12:12:34  2023-06-03 12:59:38 There      2023     6     3 June 3    CDT   \n##  3 ChIJnwDSTcsDnogRLyt_lqVprLY Comfort Suites New Orleans East 7051 Bullard Ave, New Orleans, LA 70128, USA       2023-06-03 19:45:22 2023-06-03 20:52:17  66.90 mins FALSE        (-89.96 30.05) America/Chicago 2023-06-03 14:45:22  2023-06-03 15:52:17 There      2023     6     3 June 3    CDT   \n##  4 ChIJgcNDAhKmIIYRRA4mio_7VgE P149 - Chartres St Garage       537 Chartres St, New Orleans, LA 70130, USA        2023-06-03 21:08:30 2023-06-03 22:31:08  82.64 mins FALSE        (-90.06 29.96) America/Chicago 2023-06-03 16:08:30  2023-06-03 17:31:08 There      2023     6     3 June 3    CDT   \n##  5 ChIJv30_Xw-mIIYRpt26QbLBh58 Louis Armstrong Park            701 N Rampart St, New Orleans, LA 70116, USA       2023-06-03 22:44:22 2023-06-03 22:59:51  15.48 mins FALSE        (-90.07 29.96) America/Chicago 2023-06-03 17:44:22  2023-06-03 17:59:51 There      2023     6     3 June 3    CDT   \n##  6 ChIJgcNDAhKmIIYRRA4mio_7VgE P149 - Chartres St Garage       537 Chartres St, New Orleans, LA 70130, USA        2023-06-03 23:10:10 2023-06-03 23:19:40   9.50 mins FALSE        (-90.06 29.96) America/Chicago 2023-06-03 18:10:10  2023-06-03 18:19:40 There      2023     6     3 June 3    CDT   \n##  7 ChIJnwDSTcsDnogRLyt_lqVprLY Comfort Suites New Orleans East 7051 Bullard Ave, New Orleans, LA 70128, USA       2023-06-03 23:37:50 2023-06-04 14:01:02 863.20 mins FALSE        (-89.96 30.05) America/Chicago 2023-06-03 18:37:50  2023-06-04 09:01:02 There      2023     6     3 June 3    CDT   \n##  8 ChIJ59n6fW8dnogRWi-5N6olcyU Chalmette Battlefield           1 Battlefield Rd, Chalmette, LA 70043, USA         2023-06-04 14:24:06 2023-06-04 15:54:20  90.25 mins FALSE        (-89.99 29.94) America/Chicago 2023-06-04 09:24:06  2023-06-04 10:54:20 There      2023     6     4 June 4    CDT   \n##  9 ChIJTZPVqVh9JIYRx10_jt-c4LE Exxon                           2939 Grand Point Hwy, Breaux Bridge, LA 70517, USA 2023-06-04 17:54:09 2023-06-04 18:31:35  37.45 mins TRUE         (-91.83 30.32) America/Chicago 2023-06-04 12:54:09  2023-06-04 13:31:35 There      2023     6     4 June 4    CDT   \n## 10 ChIJFWLuzkT3O4YRBX2lqNQDF4w Exxon                           1410 Gum Cove Rd, Vinton, LA 70668, USA            2023-06-04 20:02:26 2023-06-04 20:26:48  24.37 mins TRUE         (-93.57 30.19) America/Chicago 2023-06-04 15:02:26  2023-06-04 15:26:48 There      2023     6     4 June 4    CDT   \n## # ℹ 14 more rows\n```\n:::\n\n\n### `activitySegment`s\n\nWe'll go through the same data loading and cleaning process for the `activitySegments`. It's a little more complicated because we have pairs of timestamps and locations (start/end times, start/end locations), and the times and locations can be in different time zones, so we need to do the `group_by(tz)` trick twice with `group_by(tz_start)` and `group_by(tz_end)`. We also need to get two geometry columns, which requires a little data trickery, as you'll see below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nactivity_segments_raw <- read_json(\n  \"data/Semantic Location History/2023/2023_JUNE_truncated.json\", \n  simplifyVector = FALSE\n) %>% \n  # Extract the timelineObjects JSON element\n  pluck(\"timelineObjects\") %>%\n  # Filter the list to only keep activitySegments\n  map(\"activitySegment\") %>%\n  # Discard all the empty elements (i.e. the placeVisits)\n  compact()\n\nactivity_segments_not_clean <- activity_segments_raw %>% \n  # Extract parts of the nested list\n  map(~{\n    tibble(\n      distance_m = .x$distance,\n      activity_type = .x$activityType,\n      start_latitudeE7 = .x$startLocation$latitudeE7 / 1e7,\n      start_longitudeE7 = .x$startLocation$longitudeE7 / 1e7,\n      end_latitudeE7 = .x$endLocation$latitudeE7 / 1e7,\n      end_longitudeE7 = .x$endLocation$longitudeE7 / 1e7,\n      startTimestamp = ymd_hms(.x$duration$startTimestamp, tz = \"UTC\"),\n      endTimestamp = ymd_hms(.x$duration$endTimestamp, tz = \"UTC\")\n    )\n  }) %>% \n  list_rbind()\n\n# ↑ that needs to be a separate data frame so that we can refer to it to make a\n# geometry column for the end latitude/longitude\nactivity_segments <- activity_segments_not_clean %>% \n  # Calculate the duration and distance and speed of the segment\n  mutate(duration = endTimestamp - startTimestamp) %>% \n  mutate(distance_miles = meters_to_miles(distance_m)) %>% \n  mutate(\n    hours = as.numeric(duration) / 60,\n    avg_mph = distance_miles / hours\n  ) %>% \n  # Make two geometry columns\n  st_as_sf(coords = c(\"start_longitudeE7\", \"start_latitudeE7\"), crs = st_crs(\"EPSG:4326\")) %>% \n  rename(\"geometry_start\" = \"geometry\") %>% \n  mutate(geometry_end = st_geometry(\n    st_as_sf(\n      activity_segments_not_clean, \n      coords = c(\"end_longitudeE7\", \"end_latitudeE7\"), \n      crs = st_crs(\"EPSG:4326\"))\n    )\n  ) %>% \n  select(-end_longitudeE7, -end_latitudeE7) %>% \n  # Make a column with the time zone for each point\n  mutate(tz_start = tz_lookup(geometry_start, method = \"accurate\")) %>% \n  mutate(tz_end = tz_lookup(geometry_end, method = \"accurate\")) %>% \n  # Create a version of the timestamps in local time, but in UTC\n  group_by(tz_start) %>% \n  mutate(startTimestamp_local = force_tz(with_tz(startTimestamp, tz_start), \"UTC\")) %>% \n  ungroup() %>% \n  group_by(tz_end) %>% \n  mutate(endTimestamp_local = force_tz(with_tz(endTimestamp, tz_end), \"UTC\")) %>% \n  ungroup() %>% \n  # Add some helper columns for filtering, grouping, etc.\n  mutate(\n    year = year(startTimestamp_local),\n    month = month(startTimestamp_local),\n    day = day(startTimestamp_local)\n  ) %>% \n  mutate(\n    day_month = strftime(startTimestamp_local, \"%B %e\"),\n    # With %e, there's a leading space for single-digit numbers, so we remove\n    # any double spaces and replace them with single spaces \n    # (e.g., \"June  3\" becomes \"June 3\")\n    day_month = str_replace(day_month, \"  \", \" \"),\n    day_month = fct_inorder(day_month)\n  ) %>% \n  # Bring in abbreviated time zones for both the start and end time zones\n  left_join(\n    rename(tz_abbreviations, \"tz_start_abb\" = \"tz_abb\"), \n    by = join_by(tz_start == tz)\n  ) %>% \n  left_join(\n    rename(tz_abbreviations, \"tz_end_abb\" = \"tz_abb\"),\n    by = join_by(tz_end == tz)\n  ) %>% \n  # Create an id column so we can better reference individual activities \n  # Make it a character so it can combine with the place visit id column\n  mutate(id = as.character(1:n()))\nactivity_segments\n## Simple feature collection with 23 features and 19 fields\n## Active geometry column: geometry_start\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -108.7 ymin: 29.4 xmax: -86.34 ymax: 35.53\n## Geodetic CRS:  WGS 84\n## # A tibble: 23 × 21\n##    distance_m activity_type        startTimestamp      endTimestamp        duration    distance_miles hours avg_mph geometry_start   geometry_end tz_start        tz_end          startTimestamp_local endTimestamp_local   year month   day day_month tz_start_abb tz_end_abb id   \n##  *      <int> <chr>                <dttm>              <dttm>              <drtn>               <dbl> <dbl>   <dbl>    <POINT [°]>    <POINT [°]> <chr>           <chr>           <dttm>               <dttm>              <dbl> <dbl> <int> <fct>     <chr>        <chr>      <chr>\n##  1     272317 IN_PASSENGER_VEHICLE 2023-06-03 14:50:24 2023-06-03 17:12:34 142.17 mins        169.    2.37    71.4  (-86.34 32.33) (-88.16 30.59) America/Chicago America/Chicago 2023-06-03 09:50:24  2023-06-03 12:12:34  2023     6     3 June 3    CDT          CDT        1    \n##  2     195400 IN_PASSENGER_VEHICLE 2023-06-03 17:59:38 2023-06-03 19:45:22 105.75 mins        121.    1.76    68.9   (-88.16 30.6) (-89.96 30.05) America/Chicago America/Chicago 2023-06-03 12:59:38  2023-06-03 14:45:22  2023     6     3 June 3    CDT          CDT        2    \n##  3      15368 IN_PASSENGER_VEHICLE 2023-06-03 20:52:17 2023-06-03 21:08:30  16.22 mins          9.55  0.270   35.3  (-89.96 30.05) (-90.07 29.96) America/Chicago America/Chicago 2023-06-03 15:52:17  2023-06-03 16:08:30  2023     6     3 June 3    CDT          CDT        3    \n##  4       1026 WALKING              2023-06-03 22:31:08 2023-06-03 22:44:22  13.23 mins          0.638 0.221    2.89 (-90.06 29.96) (-90.07 29.96) America/Chicago America/Chicago 2023-06-03 17:31:08  2023-06-03 17:44:22  2023     6     3 June 3    CDT          CDT        4    \n##  5       1280 WALKING              2023-06-03 22:59:51 2023-06-03 23:10:10  10.32 mins          0.795 0.172    4.63 (-90.07 29.96) (-90.06 29.96) America/Chicago America/Chicago 2023-06-03 17:59:51  2023-06-03 18:10:10  2023     6     3 June 3    CDT          CDT        5    \n##  6      14611 IN_PASSENGER_VEHICLE 2023-06-03 23:19:40 2023-06-03 23:37:50  18.17 mins          9.08  0.303   30.0  (-90.06 29.96) (-89.96 30.05) America/Chicago America/Chicago 2023-06-03 18:19:40  2023-06-03 18:37:50  2023     6     3 June 3    CDT          CDT        6    \n##  7      14258 IN_PASSENGER_VEHICLE 2023-06-04 14:01:02 2023-06-04 14:24:06  23.07 mins          8.86  0.384   23.0  (-89.96 30.05) (-89.99 29.94) America/Chicago America/Chicago 2023-06-04 09:01:02  2023-06-04 09:24:06  2023     6     4 June 4    CDT          CDT        7    \n##  8     199631 IN_PASSENGER_VEHICLE 2023-06-04 15:54:20 2023-06-04 17:54:09 119.80 mins        124.    2.00    62.1  (-89.99 29.94) (-91.83 30.32) America/Chicago America/Chicago 2023-06-04 10:54:20  2023-06-04 12:54:09  2023     6     4 June 4    CDT          CDT        8    \n##  9     169541 IN_PASSENGER_VEHICLE 2023-06-04 18:31:35 2023-06-04 20:02:26  90.83 mins        105.    1.51    69.6  (-91.83 30.32) (-93.57 30.19) America/Chicago America/Chicago 2023-06-04 13:31:35  2023-06-04 15:02:26  2023     6     4 June 4    CDT          CDT        9    \n## 10      71377 IN_PASSENGER_VEHICLE 2023-06-04 20:26:48 2023-06-04 21:06:44  39.93 mins         44.4   0.666   66.6  (-93.57 30.19) (-94.21 29.99) America/Chicago America/Chicago 2023-06-04 15:26:48  2023-06-04 16:06:44  2023     6     4 June 4    CDT          CDT        10   \n## # ℹ 13 more rows\n```\n:::\n\n\n\n### Both combined\n\nAll these `placeVisit` and `activitySegment` entries were originally in the same JSON file since they actually fit together nicely—activity segments lead to place visits, which are then followed by more activity segments (i.e. you drive to a place, do stuff at that place, and drive to a different place, and so on). Because the two event types are structured so differently, we had to split them up and load and clean them separately. But it can be helpful to put them back together so there's a consistent timeline—it'll help with making plots below, and it creates a neat log of the whole trip.\n\nWe'll use `bind_rows()` to combine the two and then sort. It's kind of an ugly dataset, with lots of missing data in every other row since each type of entry has slightly different columns in it, but some columns are consistent throughout, like `duration` and the different timestamps, so it'll be helpful.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_stops_activities <- bind_rows(\n  list(visit = place_visits, segment = activity_segments),\n  .id = \"type\"\n) %>% \n  arrange(startTimestamp)\nall_stops_activities\n## Simple feature collection with 47 features and 26 fields\n## Active geometry column: geometry (with 23 geometries empty)\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -111.6 ymin: 29.4 xmax: -86.34 ymax: 35.53\n## Geodetic CRS:  WGS 84\n## # A tibble: 47 × 29\n##    type    id             name  address startTimestamp      endTimestamp        duration driving_stop       geometry tz              startTimestamp_local endTimestamp_local  direction  year month   day day_month tz_abb distance_m activity_type  distance_miles  hours avg_mph geometry_start\n##    <chr>   <chr>          <chr> <chr>   <dttm>              <dttm>              <drtn>   <lgl>           <POINT [°]> <chr>           <dttm>               <dttm>              <chr>     <dbl> <dbl> <int> <fct>     <chr>       <int> <chr>                   <dbl>  <dbl>   <dbl>    <POINT [°]>\n##  1 visit   ChIJQ0NgzsqAj… Chev… 1030 W… 2023-06-03 14:27:23 2023-06-03 14:50:24  23.02 … TRUE         (-86.34 32.33) America/Chicago 2023-06-03 09:27:23  2023-06-03 09:50:24 There      2023     6     3 June 3    CDT            NA <NA>                   NA     NA       NA             EMPTY\n##  2 segment 1              <NA>  <NA>    2023-06-03 14:50:24 2023-06-03 17:12:34 142.17 … NA                    EMPTY <NA>            2023-06-03 09:50:24  2023-06-03 12:12:34 <NA>       2023     6     3 June 3    <NA>       272317 IN_PASSENGER_…        169.     2.37    71.4  (-86.34 32.33)\n##  3 visit   ChIJMU2weFNKm… Walm… 5245 R… 2023-06-03 17:12:34 2023-06-03 17:59:38  47.07 … TRUE         (-88.16 30.59) America/Chicago 2023-06-03 12:12:34  2023-06-03 12:59:38 There      2023     6     3 June 3    CDT            NA <NA>                   NA     NA       NA             EMPTY\n##  4 segment 2              <NA>  <NA>    2023-06-03 17:59:38 2023-06-03 19:45:22 105.75 … NA                    EMPTY <NA>            2023-06-03 12:59:38  2023-06-03 14:45:22 <NA>       2023     6     3 June 3    <NA>       195400 IN_PASSENGER_…        121.     1.76    68.9   (-88.16 30.6)\n##  5 visit   ChIJnwDSTcsDn… Comf… 7051 B… 2023-06-03 19:45:22 2023-06-03 20:52:17  66.90 … FALSE        (-89.96 30.05) America/Chicago 2023-06-03 14:45:22  2023-06-03 15:52:17 There      2023     6     3 June 3    CDT            NA <NA>                   NA     NA       NA             EMPTY\n##  6 segment 3              <NA>  <NA>    2023-06-03 20:52:17 2023-06-03 21:08:30  16.22 … NA                    EMPTY <NA>            2023-06-03 15:52:17  2023-06-03 16:08:30 <NA>       2023     6     3 June 3    <NA>        15368 IN_PASSENGER_…          9.55   0.270   35.3  (-89.96 30.05)\n##  7 visit   ChIJgcNDAhKmI… P149… 537 Ch… 2023-06-03 21:08:30 2023-06-03 22:31:08  82.64 … FALSE        (-90.06 29.96) America/Chicago 2023-06-03 16:08:30  2023-06-03 17:31:08 There      2023     6     3 June 3    CDT            NA <NA>                   NA     NA       NA             EMPTY\n##  8 segment 4              <NA>  <NA>    2023-06-03 22:31:08 2023-06-03 22:44:22  13.23 … NA                    EMPTY <NA>            2023-06-03 17:31:08  2023-06-03 17:44:22 <NA>       2023     6     3 June 3    <NA>         1026 WALKING                 0.638  0.221    2.89 (-90.06 29.96)\n##  9 visit   ChIJv30_Xw-mI… Loui… 701 N … 2023-06-03 22:44:22 2023-06-03 22:59:51  15.48 … FALSE        (-90.07 29.96) America/Chicago 2023-06-03 17:44:22  2023-06-03 17:59:51 There      2023     6     3 June 3    CDT            NA <NA>                   NA     NA       NA             EMPTY\n## 10 segment 5              <NA>  <NA>    2023-06-03 22:59:51 2023-06-03 23:10:10  10.32 … NA                    EMPTY <NA>            2023-06-03 17:59:51  2023-06-03 18:10:10 <NA>       2023     6     3 June 3    <NA>         1280 WALKING                 0.795  0.172    4.63 (-90.07 29.96)\n## # ℹ 37 more rows\n## # ℹ 5 more variables: geometry_end <POINT [°]>, tz_start <chr>, tz_end <chr>, tz_start_abb <chr>, tz_end_abb <chr>\n```\n:::\n\n\n\n# Road trip analysis\n\nPhew, that was a lot of work getting this data all wrangled together and cleaned up. Let's analyze this trip!\n\n::: {.callout-caution}\n### Truncated vs. complete data\n\nAll the plots and tables below use the complete data from our road trip, with every day and every stop. Everything above only worked with the first four days (and even then, omitted the first 30 minutes of the first day for the sake of privacy). \n\n[I provided truncated raw JSON files](data.zip) for the sake of illustrating how to load and process and work with this kind of location data. But I want to analyze my actual full data, so I cleaned that up separately ([with this file](clean-data-real.R); [view at GitHub](https://github.com/andrewheiss/ath-quarto/blob/main/blog/2023/07/03/using-google-location-history-with-r-roadtrip/clean-data-real.R)). I'll load all those complete objects here. \n\nIf you're following along with my truncated data, never fear! These plots and tables will all still generally work, they'll just show the first few days and not the actual complete plots you see here.\n\n\n\n\n\n:::\n\n::: {.callout-note}\n### Folded code\n\nThere's been a lot of code in this post already, so I've folded all the remaining code chunks so it's easier to just see the plots and tables. You can see the underlying code if you click on the little toggle triangle.\n:::\n\n## Maps\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Find all the states that daily_routes crosses\nstates_crossed_through <- st_intersection(\n  st_transform(lower_48, st_crs(daily_routes)),\n  daily_routes\n)\n## Warning: attribute variables are assumed to be spatially constant throughout all geometries\n\n# Create a column that flags if the state is crossed through\nlower_48_highlighted <- lower_48 %>% \n  mutate(visited = NAME %in% unique(states_crossed_through$NAME))\n```\n:::\n\n\nIn total, we crossed through 17 different states over the course of our big circular 13-day drive. We made 76 different stops along the way, all marked with points in @fig-map-basic:\n\n\n::: {.cell .column-page-right layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Make a map!\nggplot() +\n  geom_sf(data = lower_48_highlighted, aes(fill = visited)) +\n  scale_fill_manual(values = c(\"grey98\", \"grey90\"), guide = \"none\") +\n  geom_sf(data = daily_routes, linewidth = 0.75) +\n  geom_sf(data = place_visits, size = 1.5) +\n  annotation_scale(\n    location = \"bl\", bar_cols = c(\"grey30\", \"white\"),\n    unit_category = \"imperial\", text_family = \"Overpass\"\n  ) +\n  labs(caption = \"Each point is a stop\") +\n  coord_sf(crs = st_crs(\"ESRI:102003\")) +  # Albers\n  theme_roadtrip_map()\n```\n\n::: {.cell-output-display}\n![Basic map of our mega road trip](index_files/figure-html/fig-map-basic-1.png){#fig-map-basic fig-align='center' width=100%}\n:::\n:::\n\n\nIn @fig-map-with-dates we can color each leg of the trip a different color to see how the driving was divided up over time:\n\n\n::: {.cell .column-page-right layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Use the same colors for each direction\ncolors_there <- rcartocolor::carto_pal(7, \"SunsetDark\")[c(1, 3, 2, 4, 6, 5, 7)]\ncolors_back_again <- rcartocolor::carto_pal(6, \"SunsetDark\")[c(1, 3, 2, 4, 6, 5)]\n\n# CARTO's Sunset Dark is neat, but the first yellow color is a little too light\n# to see comfortably, so we replace it with the yellow from the CARTO Prism\n# palette\ncolors_there[1] <- clrs[6]\ncolors_back_again[1] <- clrs[6]\n\n# Make a map!\nggplot() +\n  geom_sf(data = lower_48_highlighted, aes(fill = visited)) +\n  scale_fill_manual(values = c(\"grey98\", \"grey90\"), guide = \"none\") +\n  # Reset fill scale so that the labels can be filled\n  new_scale_fill() +\n  geom_sf(data = daily_routes, aes(color = day_month), linewidth = 0.75) +\n  scale_color_manual(values = c(colors_there, colors_back_again), guide = \"none\") +\n  geom_sf(data = place_visits, aes(color = day_month), size = 1.5) +\n  geom_label_repel(\n    data = daily_routes,\n    aes(label = day_month, fill = day_month, geometry = path),\n    stat = \"sf_coordinates\", seed = 1234,\n    size = 3, segment.color = \"grey30\", min.segment.length = 0,\n    show.legend = FALSE, family = \"Overpass ExtraBold\", color = \"white\"\n  ) +\n  scale_fill_manual(values = c(colors_there, colors_back_again), guide = \"none\") +\n  annotation_scale(\n    location = \"bl\", bar_cols = c(\"grey30\", \"white\"),\n    unit_category = \"imperial\", text_family = \"Overpass\"\n  ) +\n  labs(caption = \"Each point is a stop\") +\n  coord_sf(crs = st_crs(\"ESRI:102003\")) +  # Albers\n  theme_roadtrip_map()\n```\n\n::: {.cell-output-display}\n![Map of our mega road trip, by day](index_files/figure-html/fig-map-with-dates-1.png){#fig-map-with-dates fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Distance and time\n\n@tbl-distance-time-day answers a bunch of questions about distance and time:\n\n- **How many miles did we drive each day?** Roughly 500ish miles per day. The way out was longer than the way back (2,832 miles there vs. 2,390 miles back). In total we drove **5,222 miles** (!!!). This is *shockingly* close to the [5,260 miles that OpenStreetMap mapped out for me in this previous blog post](https://www.andrewheiss.com/blog/2023/06/01/geocoding-routing-openstreetmap-r/#summary-statistics), even with some changes to the route (i.e. we didn't end up going through Minnesota and went through Nebraska instead)\n- **How long did we spend driving each day?** Roughly 8.5 hours per day. The way out was 5 hours longer than the way back (though that's a little inflated because June 8 doesn't really count, as we were just driving around Capitol Reef National Park). In total we drove for **91 hours and 47 minutes**,\n- **What was the earliest time we started each day and the latest time we arrived each evening?** The earliest departure was 7:30 AM when we left Atlanta on June 3; the latest arrivals were when we got to Sioux Falls, South Dakota at 10:42 PM on June 22 and when we got to Flagstaff, Arizona on June 6 at 10:35 PM.\n\n\n::: {#tbl-distance-time-day .cell layout-align=\"center\" tbl-cap='Daily distance and time details'}\n\n```{.r .cell-code  code-fold=\"true\"}\ntime_distance_day <- activity_segments %>% \n  st_drop_geometry() %>% \n  filter(activity_type == \"IN_PASSENGER_VEHICLE\") %>% \n  group_by(direction, day_month) %>% \n  summarize(\n    total_distance = sum(distance_miles),\n    total_time = sum(duration),\n    start_time = min(startTimestamp_local),\n    start_tz = tz_start_abb[which.min(startTimestamp_local)],\n    end_time = max(endTimestamp_local),\n    end_tz = tz_end_abb[which.max(endTimestamp_local)]\n  ) %>% \n  mutate(\n    nice_start_time = paste(strftime(start_time, format = \"%I:%M %p\", tz = \"UTC\"), start_tz),\n    nice_end_time = paste(strftime(end_time, format = \"%I:%M %p\", tz = \"UTC\"), end_tz)\n  ) %>% \n  # Remove leading zeros from hour\n  mutate(across(c(nice_start_time, nice_end_time), ~str_replace(.x, \"^0\", \"\")))\n\ntime_distance_day %>% \n  select(direction, day_month, total_distance, total_time, nice_start_time, nice_end_time) %>% \n  group_by(direction) %>%\n  gt() %>% \n  summary_rows(\n    groups = everything(),\n    columns = c(total_distance, total_time),\n    fns = list(Subtotal = ~ sum(.)),\n    fmt = list(\n      ~fmt_number(., columns = total_distance, decimals = 0),\n      ~fmt(., columns = total_time, fns = fmt_difftime)\n    ),\n  ) %>% \n  grand_summary_rows(\n    columns = c(total_distance, total_time),\n    fns = list(Total = ~ sum(.)),\n    fmt = list(\n      ~fmt_number(., columns = total_distance, decimals = 0),\n      ~fmt(., columns = total_time, fns = fmt_difftime)\n    ),\n    missing_text = \"\"\n  ) %>% \n  tab_footnote(\n    footnote = \"This wasn't really a travel day; we spent the day hiking around Capitol Reef National Park and hanging out at my aunt's cabin in Grover, Utah.\",\n    locations = cells_body(\n      columns = day_month,\n      rows = day_month == \"June 8\"\n    )\n  ) %>% \n  cols_label(\n    day_month = \"Day\",\n    total_distance = \"Miles\",\n    total_time = \"Driving time\",\n    nice_start_time = \"Start time\",\n    nice_end_time = \"End time\"\n  ) %>% \n  cols_align(\n    columns = total_time,\n    align = \"left\"\n  ) %>% \n  fmt_number(columns = total_distance, decimals = 0) %>% \n  fmt(columns = total_time, fns = fmt_difftime) %>% \n  tab_style(\n    locations = cells_column_labels(),\n    style = list(\n      cell_text(weight = \"bold\")\n    )\n  ) %>% \n  tab_style(\n    locations = cells_row_groups(),\n    style = list(\n      cell_text(weight = \"bold\")\n    )\n  ) %>% \n  tab_style(\n    locations = list(cells_summary(), cells_stub_summary()),\n    style = list(\n      cell_fill(color = \"grey95\")\n    )\n  ) %>% \n  tab_style(\n    locations = list(\n      cells_grand_summary(), cells_stub_grand_summary(), \n      cells_column_labels(), cells_stubhead()),\n    style = list(\n      cell_text(weight = \"bold\"),\n      cell_fill(color = \"grey80\")\n    )\n  ) %>% \n  opt_horizontal_padding(scale = 2) %>% \n  opt_table_font(font = \"Jost\") %>% \n  tab_options(\n    row_group.as_column = TRUE,\n    footnotes.marks = \"standard\"\n  )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"pzveloiefp\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#pzveloiefp table {\n  font-family: Jost, system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#pzveloiefp thead, #pzveloiefp tbody, #pzveloiefp tfoot, #pzveloiefp tr, #pzveloiefp td, #pzveloiefp th {\n  border-style: none;\n}\n\n#pzveloiefp p {\n  margin: 0;\n  padding: 0;\n}\n\n#pzveloiefp .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#pzveloiefp .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#pzveloiefp .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#pzveloiefp .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 10px;\n  padding-right: 10px;\n  overflow-x: hidden;\n}\n\n#pzveloiefp .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#pzveloiefp .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#pzveloiefp .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#pzveloiefp .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#pzveloiefp .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#pzveloiefp .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 10px;\n  padding-right: 10px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#pzveloiefp .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#pzveloiefp .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#pzveloiefp .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#pzveloiefp .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 10px;\n  padding-right: 10px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#pzveloiefp .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n#pzveloiefp .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 10px;\n  padding-right: 10px;\n  vertical-align: top;\n}\n\n#pzveloiefp .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#pzveloiefp .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#pzveloiefp .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n#pzveloiefp .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#pzveloiefp .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n#pzveloiefp .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#pzveloiefp .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n#pzveloiefp .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n#pzveloiefp .gt_left {\n  text-align: left;\n}\n\n#pzveloiefp .gt_center {\n  text-align: center;\n}\n\n#pzveloiefp .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#pzveloiefp .gt_font_normal {\n  font-weight: normal;\n}\n\n#pzveloiefp .gt_font_bold {\n  font-weight: bold;\n}\n\n#pzveloiefp .gt_font_italic {\n  font-style: italic;\n}\n\n#pzveloiefp .gt_super {\n  font-size: 65%;\n}\n\n#pzveloiefp .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#pzveloiefp .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#pzveloiefp .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#pzveloiefp .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#pzveloiefp .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#pzveloiefp .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#pzveloiefp .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"\"></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Day\">Day</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Miles\">Miles</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Driving time\">Driving time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Start time\">Start time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"End time\">End time</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr class=\"gt_row_group_first\"><td headers=\"There stub_1_1 stub_1\" rowspan=\"7\" class=\"gt_row gt_left gt_stub_row_group\" style=\"font-weight: bold;\">There</td>\n<td headers=\"There stub_1_1 day_month\" class=\"gt_row gt_center\">June 3</td>\n<td headers=\"There stub_1_1 total_distance\" class=\"gt_row gt_right\">492</td>\n<td headers=\"There stub_1_1 total_time\" class=\"gt_row gt_left\">7 hours 26 minutes</td>\n<td headers=\"There stub_1_1 nice_start_time\" class=\"gt_row gt_left\">7:34 AM EDT</td>\n<td headers=\"There stub_1_1 nice_end_time\" class=\"gt_row gt_left\">6:37 PM CDT</td></tr>\n    <tr><td headers=\"There day_month_2 day_month\" class=\"gt_row gt_center\">June 4</td>\n<td headers=\"There day_month_2 total_distance\" class=\"gt_row gt_right\">544</td>\n<td headers=\"There day_month_2 total_time\" class=\"gt_row gt_left\">8 hours 16 minutes</td>\n<td headers=\"There day_month_2 nice_start_time\" class=\"gt_row gt_left\">9:01 AM CDT</td>\n<td headers=\"There day_month_2 nice_end_time\" class=\"gt_row gt_left\">8:30 PM CDT</td></tr>\n    <tr><td headers=\"There day_month_3 day_month\" class=\"gt_row gt_center\">June 5</td>\n<td headers=\"There day_month_3 total_distance\" class=\"gt_row gt_right\">442</td>\n<td headers=\"There day_month_3 total_time\" class=\"gt_row gt_left\">6 hours 56 minutes</td>\n<td headers=\"There day_month_3 nice_start_time\" class=\"gt_row gt_left\">9:06 AM CDT</td>\n<td headers=\"There day_month_3 nice_end_time\" class=\"gt_row gt_left\">6:10 PM MDT</td></tr>\n    <tr><td headers=\"There day_month_4 day_month\" class=\"gt_row gt_center\">June 6</td>\n<td headers=\"There day_month_4 total_distance\" class=\"gt_row gt_right\">626</td>\n<td headers=\"There day_month_4 total_time\" class=\"gt_row gt_left\">10 hours 5 minutes</td>\n<td headers=\"There day_month_4 nice_start_time\" class=\"gt_row gt_left\">8:24 AM MDT</td>\n<td headers=\"There day_month_4 nice_end_time\" class=\"gt_row gt_left\">10:35 PM MST</td></tr>\n    <tr><td headers=\"There day_month_5 day_month\" class=\"gt_row gt_center\">June 7</td>\n<td headers=\"There day_month_5 total_distance\" class=\"gt_row gt_right\">438</td>\n<td headers=\"There day_month_5 total_time\" class=\"gt_row gt_left\">8 hours 31 minutes</td>\n<td headers=\"There day_month_5 nice_start_time\" class=\"gt_row gt_left\">8:40 AM MST</td>\n<td headers=\"There day_month_5 nice_end_time\" class=\"gt_row gt_left\">8:46 PM MDT</td></tr>\n    <tr><td headers=\"There day_month_6 day_month\" class=\"gt_row gt_center\">June 8<span class=\"gt_footnote_marks gt_asterisk\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>*</sup></span></td>\n<td headers=\"There day_month_6 total_distance\" class=\"gt_row gt_right\">63</td>\n<td headers=\"There day_month_6 total_time\" class=\"gt_row gt_left\">2 hours 18 minutes</td>\n<td headers=\"There day_month_6 nice_start_time\" class=\"gt_row gt_left\">9:41 AM MDT</td>\n<td headers=\"There day_month_6 nice_end_time\" class=\"gt_row gt_left\">7:42 PM MDT</td></tr>\n    <tr><td headers=\"There day_month_7 day_month\" class=\"gt_row gt_center\">June 9</td>\n<td headers=\"There day_month_7 total_distance\" class=\"gt_row gt_right\">228</td>\n<td headers=\"There day_month_7 total_time\" class=\"gt_row gt_left\">4 hours 41 minutes</td>\n<td headers=\"There day_month_7 nice_start_time\" class=\"gt_row gt_left\">9:04 AM MDT</td>\n<td headers=\"There day_month_7 nice_end_time\" class=\"gt_row gt_left\">3:06 PM MDT</td></tr>\n    <tr><th id=\"summary_stub_There_1\" scope=\"row\" class=\"gt_row gt_left gt_stub gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\">Subtotal</th>\n<td headers=\"There summary_stub_There_1 day_month\" class=\"gt_row gt_center gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\"></td>\n<td headers=\"There summary_stub_There_1 total_distance\" class=\"gt_row gt_right gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\">2,832</td>\n<td headers=\"There summary_stub_There_1 total_time\" class=\"gt_row gt_left gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\">48 hours 14 minutes</td>\n<td headers=\"There summary_stub_There_1 nice_start_time\" class=\"gt_row gt_left gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\"></td>\n<td headers=\"There summary_stub_There_1 nice_end_time\" class=\"gt_row gt_left gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\"></td></tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"Back again stub_1_8 stub_1\" rowspan=\"6\" class=\"gt_row gt_left gt_stub_row_group\" style=\"font-weight: bold;\">Back again</td>\n<td headers=\"Back again stub_1_8 day_month\" class=\"gt_row gt_center\">June 20</td>\n<td headers=\"Back again stub_1_8 total_distance\" class=\"gt_row gt_right\">290</td>\n<td headers=\"Back again stub_1_8 total_time\" class=\"gt_row gt_left\">4 hours 50 minutes</td>\n<td headers=\"Back again stub_1_8 nice_start_time\" class=\"gt_row gt_left\">8:58 AM MDT</td>\n<td headers=\"Back again stub_1_8 nice_end_time\" class=\"gt_row gt_left\">9:17 PM MDT</td></tr>\n    <tr><td headers=\"Back again day_month_9 day_month\" class=\"gt_row gt_center\">June 21</td>\n<td headers=\"Back again day_month_9 total_distance\" class=\"gt_row gt_right\">408</td>\n<td headers=\"Back again day_month_9 total_time\" class=\"gt_row gt_left\">11 hours 36 minutes</td>\n<td headers=\"Back again day_month_9 nice_start_time\" class=\"gt_row gt_left\">8:16 AM MDT</td>\n<td headers=\"Back again day_month_9 nice_end_time\" class=\"gt_row gt_left\">10:04 PM MDT</td></tr>\n    <tr><td headers=\"Back again day_month_10 day_month\" class=\"gt_row gt_center\">June 22</td>\n<td headers=\"Back again day_month_10 total_distance\" class=\"gt_row gt_right\">525</td>\n<td headers=\"Back again day_month_10 total_time\" class=\"gt_row gt_left\">8 hours 27 minutes</td>\n<td headers=\"Back again day_month_10 nice_start_time\" class=\"gt_row gt_left\">8:14 AM MDT</td>\n<td headers=\"Back again day_month_10 nice_end_time\" class=\"gt_row gt_left\">10:42 PM CDT</td></tr>\n    <tr><td headers=\"Back again day_month_11 day_month\" class=\"gt_row gt_center\">June 23</td>\n<td headers=\"Back again day_month_11 total_distance\" class=\"gt_row gt_right\">459</td>\n<td headers=\"Back again day_month_11 total_time\" class=\"gt_row gt_left\">7 hours 27 minutes</td>\n<td headers=\"Back again day_month_11 nice_start_time\" class=\"gt_row gt_left\">8:11 AM CDT</td>\n<td headers=\"Back again day_month_11 nice_end_time\" class=\"gt_row gt_left\">8:22 PM CDT</td></tr>\n    <tr><td headers=\"Back again day_month_12 day_month\" class=\"gt_row gt_center\">June 24</td>\n<td headers=\"Back again day_month_12 total_distance\" class=\"gt_row gt_right\">446</td>\n<td headers=\"Back again day_month_12 total_time\" class=\"gt_row gt_left\">7 hours 9 minutes</td>\n<td headers=\"Back again day_month_12 nice_start_time\" class=\"gt_row gt_left\">9:09 AM CDT</td>\n<td headers=\"Back again day_month_12 nice_end_time\" class=\"gt_row gt_left\">9:16 PM CDT</td></tr>\n    <tr><td headers=\"Back again day_month_13 day_month\" class=\"gt_row gt_center\">June 25</td>\n<td headers=\"Back again day_month_13 total_distance\" class=\"gt_row gt_right\">262</td>\n<td headers=\"Back again day_month_13 total_time\" class=\"gt_row gt_left\">4 hours 1 minutes</td>\n<td headers=\"Back again day_month_13 nice_start_time\" class=\"gt_row gt_left\">7:49 AM CDT</td>\n<td headers=\"Back again day_month_13 nice_end_time\" class=\"gt_row gt_left\">12:51 PM EDT</td></tr>\n    <tr><th id=\"summary_stub_Back again_1\" scope=\"row\" class=\"gt_row gt_left gt_stub gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\">Subtotal</th>\n<td headers=\"Back again summary_stub_Back again_1 day_month\" class=\"gt_row gt_center gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\"></td>\n<td headers=\"Back again summary_stub_Back again_1 total_distance\" class=\"gt_row gt_right gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\">2,390</td>\n<td headers=\"Back again summary_stub_Back again_1 total_time\" class=\"gt_row gt_left gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\">43 hours 33 minutes</td>\n<td headers=\"Back again summary_stub_Back again_1 nice_start_time\" class=\"gt_row gt_left gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\"></td>\n<td headers=\"Back again summary_stub_Back again_1 nice_end_time\" class=\"gt_row gt_left gt_summary_row gt_first_summary_row gt_last_summary_row\" style=\"background-color: #F2F2F2;\"></td></tr>\n    <tr><th id=\"grand_summary_stub_1\" scope=\"row\" class=\"gt_row gt_left gt_stub gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\" style=\"font-weight: bold; background-color: #CCCCCC;\">Total</th>\n<td headers=\"grand_summary_stub_1 day_month\" class=\"gt_row gt_center gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\" style=\"font-weight: bold; background-color: #CCCCCC;\"></td>\n<td headers=\"grand_summary_stub_1 total_distance\" class=\"gt_row gt_right gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\" style=\"font-weight: bold; background-color: #CCCCCC;\">5,222</td>\n<td headers=\"grand_summary_stub_1 total_time\" class=\"gt_row gt_left gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\" style=\"font-weight: bold; background-color: #CCCCCC;\">91 hours 47 minutes</td>\n<td headers=\"grand_summary_stub_1 nice_start_time\" class=\"gt_row gt_left gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\" style=\"font-weight: bold; background-color: #CCCCCC;\"></td>\n<td headers=\"grand_summary_stub_1 nice_end_time\" class=\"gt_row gt_left gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\" style=\"font-weight: bold; background-color: #CCCCCC;\"></td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"6\"><span class=\"gt_footnote_marks gt_asterisk\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>*</sup></span> This wasn't really a travel day; we spent the day hiking around Capitol Reef National Park and hanging out at my aunt's cabin in Grover, Utah.</td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n:::\n:::\n\n\n@fig-timeline-by-day shows a timeline of each day's events.^[All the times are in local time, which causes some weirdness when crossing time zones. Instead of somehow expanding or shrinking these timelines during stretches where we gained or lost time because of time zone changes, I just put a dotted border around those stretches to point them out.] We typically started each day with some sort of sightseeing adventure (we didn't do this on the first day, since we left our house that day—instead, we ended that day with a walk through the French Quarter in New Orleans). Our longest touristy adventure was technically Capitol Reef National Park, since we spent the whole day there, but if we don't count that and instead look at the along-the-way stops, our longest adventures were Yellowstone, Nauvoo, and Carlsbad Caverns.\n\n\n::: {.cell .column-page-right layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Little dataset with names for the tourist stops we made\n# Gotta do some goofy things here because I don't want things double labeled though\n#\n# - Some IDs, like ChIJgcNDAhKmIIYRRA4mio_7VgE (a parking lot near the \n#   French Quarter) show up twice as placeVisits, but there should only be one \n#   label, so down below, after merging this into the timeline data, I use \n#   `group_by(visit_label) %>% slice(1)` to only keep the first visit for labeling\n# - Yellowstone, though, looks goofy if the first segment is labeled, so I want \n#   to label the second. That messes with the grouping/slicing approach, so I \n#   add a trailing space to the Yellowstone visits I don't want labeled \n#   (i.e. \"Yellowstone \") and then filter those out after grouping/slicing\n# - Nauvoo happened on two different days, but grouping/slicing only keeps the \n#   first. So I make the second day's visits use a different label with a space \n#   at the beginning and end of the label (i.e. \" Nauvoo \")\nsightseeing <- tribble(\n  ~id,                           ~visit_label,\n  \"ChIJgcNDAhKmIIYRRA4mio_7VgE\", \"The French\\nQuarter\",\n  \"ChIJv30_Xw-mIIYRpt26QbLBh58\", \"The French\\nQuarter\",  # Technically Louis Armstrong Park\n  \"ChIJ59n6fW8dnogRWi-5N6olcyU\", \"Chalmette\\nBattlefield\",\n  \"ChIJX4k2TVVfXIYRIsTnhA-P-Rc\", \"The Alamo\",\n  \"ChIJW9e4xBN544YRvbI7vfc91G4\", \"Carlsbad\\nCaverns\",\n  \"ChIJrSLbJJIQM4cR4l5HTswDY8k\", \"The Grand\\nCanyon\",\n  \"ChIJU6LnB_8ASocRB_9PSFPsO94\", \"Capitol Reef\\nNational Park\",\n  \"ChIJIw-BhQkZSocRncIWG0YMLJU\", \"Capitol Reef\\nNational Park\",  # Technically the visitor center\n  \"ChIJaSHejn29SYcR-YzTt_DNlTg\", \"Goblin\\nValley\",\n  \"ChIJVQ4oZOP4VFMREjDKbf7bHIE\", \"My sister's\\nhouse\",\n  \"ChIJp4yR8asLVFMRJJExTuHrYEs\", \"Rexburg\",  # Technically Porter Park\n  \"ChIJz6VI3AMLVFMREvSOw9M0VR4\", \"Rexburg\",  # Technically BYU-I\n  \"51\",                          \"Yellowstone\",  # Technically the drive to Old Faithful; Google missed this\n  \"ChIJ3zGqpb65UVMR0rTSaqVZ5kc\", \"Yellowstone \",\n  \"ChIJXy5ZgRvtUVMRoSJoWid8Owg\", \"Yellowstone \",  # Technically Old Faithful\n  \"ChIJOT5U8z8GM1MResed1BOdJKk\", \"Devil's\\nTower\",\n  \"ChIJ39Y-tdg1fYcRQcZcBb499do\", \"Mount\\nRushmore\",\n  \"ChIJg_2MNnKRk4cRQGXbuvgqba4\", \"Winter\\nQuarters\",\n  \"ChIJh53YJHIm54cRmpf8_ZA3CVw\", \"Nauvoo\",  # Technically the visitors center\n  \"ChIJDUPPu3Im54cRKj6BG8UkOko\", \"Nauvoo\",  # Technically the temple\n  \"ChIJg0abVHYm54cR85yQbfLjt2o\", \" Nauvoo \",  # Technically the family living center\n  \"ChIJm7cRetkl54cR-lEKk-eZnXA\", \" Nauvoo \",  # Technically the Smith family cemetery\n  \"ChIJZ6tHUwsm54cRbmWsF639PjY\", \" Nauvoo \"   # Technically Carthage Jail\n)\n\n\ntimeline_data <- all_stops_activities %>% \n  # Get rid of the geometry column since we're not doing anything map-related\n  st_drop_geometry() %>% \n  # Indicate if there was a time zone change during the activity\n  mutate(\n    tz_change = ifelse(is.na(tz_start) | tz_start_abb == tz_end_abb, NA, \"Time zone change\")\n  ) %>% \n  # Find the midpoint between the start and end times\n  mutate(time_mid = startTimestamp_local - ((startTimestamp_local - endTimestamp_local) / 2)) %>% \n  # Add column for the name of the tourist stop\n  left_join(sightseeing, by = join_by(id)) %>% \n  # Add column for more detailed type of stop\n  mutate(\n    stop_type = case_when(\n      type == \"visit\" & !is.na(visit_label) ~ \"Sightseeing\",\n      type == \"visit\" & is.na(visit_label) ~ \"Gas/bathroom/hotel stop\",\n      type == \"segment\" & id == \"51\" ~ \"Sightseeing\",\n      type == \"segment\" ~ \"Traveling\"\n    )\n  ) %>%\n  # After finishing at Capitol Reef we returned to my aunt's cabin in Grover to\n  # relax. I had to run back to the nearest town with 5G internet (Torrey) to\n  # respond to e-mails and Slack messages (since I was teaching two online\n  # classes throughout this whole road trip!), and that doesn't technically\n  # count as part of the road trip, so we need to remove everything after 5 PM\n  # on that day\n  filter(!(day == 8 & hour(endTimestamp_local) > 17)) %>% \n  # After arriving at the hotel in Rexburg, we made a late-night milkshake run\n  # after the kids were in bed, which Google picked up. That doesn't technically\n  # count as part of the road trip, so we need to remove everything after 6 PM\n  # on that day\n  filter(!(day == 20 & hour(endTimestamp_local) > 18)) %>% \n  # Set the timestamps for the final stop of the day (i.e. hotels) to NA and\n  # then remove those rows for plotting\n  group_by(day) %>% \n  mutate(\n    across(c(startTimestamp_local, endTimestamp_local), \n      ~if_else(row_number() == n(), NA, .x))\n  ) %>% \n  drop_na(startTimestamp_local)\n\n# Force all the timestamps to be on the same day for the sake of plotting\nday(timeline_data$startTimestamp_local) <- 1\nday(timeline_data$endTimestamp_local) <- 1\nday(timeline_data$time_mid) <- 1\n\n# Extract just the labels for plotting\nsightseeing_labels <- timeline_data %>% \n  filter(stop_type == \"Sightseeing\") %>% \n  group_by(visit_label) %>% \n  slice(1) %>% \n  filter(visit_label != \"Yellowstone \")\n\n# Timeline plot\nggplot(timeline_data) +\n  geom_rect(\n    aes(\n      xmin = startTimestamp_local, xmax = endTimestamp_local, \n      ymin = 0, ymax = 1, \n      fill = stop_type, color = tz_change, linetype = tz_change, linewidth = tz_change\n    )\n  ) +\n  geom_label(\n    data = sightseeing_labels,\n    aes(x = time_mid, y = 0.5, label = visit_label),\n    fill = colorspace::lighten(clrs[8], 0.1), color = \"white\", lineheight = 1,\n    inherit.aes = FALSE\n  ) +\n  # Phew fancy aesthetic and scale work here\n  scale_x_datetime(date_breaks = \"3 hours\", date_labels = \"%I:%M %p\") +\n  scale_y_continuous(expand = expansion(0, 0)) +\n  scale_fill_manual(values = c(clrs[6], clrs[8], clrs[2]), guide = guide_legend(order = 1)) +\n  scale_color_manual(values = c(\"black\", \"white\")) +\n  scale_linewidth_discrete(range = c(0.5, 0)) +\n  scale_linetype_manual(\n    values = c(\"21\"), breaks = \"Time zone change\",\n    guide = guide_legend(override.aes = list(fill = \"white\", color = \"black\", linewidth = 0.5), order = 10)\n  ) +\n  guides(color = \"none\", linewidth = \"none\") +\n  facet_wrap(vars(day_month), ncol = 2, dir = \"v\") +\n  labs(x = NULL, y = NULL, linetype = NULL, fill = NULL) +\n  theme_roadtrip() +\n  theme(\n    axis.text.y = element_blank(),\n    panel.grid.major.y = element_blank(),\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![Timeline of our grand road trip](index_files/figure-html/fig-timeline-by-day-1.png){#fig-timeline-by-day fig-align='center' width=100%}\n:::\n:::\n\n\n## Driving and breaks\n\nAs seen in @fig-timeline-by-day, we had a pretty good rhythm of driving and taking gas/bathroom breaks—we broke up long stretches of driving with stops for gas and bathrooms.\n\n@tbl-driving-longest-shortest shows the top three longest and shortest stretches of driving. The longest stretch was on the final day—we drove 4 hours from Nashville to Atlanta with no bathroom breaks. We apparently just desperately wanted to get home! We did the same push-through-to-the-last-stop approach a few other times too. The third longest stretch was actually our first on the way home, leaving Spanish Fork, Utah to my sister's house outside of Rexburg, Idaho, which we did in 3.5 hours, while the 2nd and 5th longest stretches involved pushing to our final destinations for the day (a hotel in Nauvoo, Illinois and my aunt's cabin in Grover, Utah). The only long stretch that broke this patter was the fourth longest one after Carlsbad Caverns—we spent more than 3 hours on a little state road going all the way from southern New Mexico to a gas station at I-20.\n\nThe shortest stretches involved going from a main sightseeing stop to a gas station (Mount Rushmore to some Holiday gas station), going between sightseeing stops (the Smith Family Cemetery in Nauvoo to Carthage Jail), or going from a hotel to a sightseeing stop (our hotel in Carlsbad to Carlsbad Caverns National Park).\n\nMy favorite short stop is number 4 here, on June 4. We got gas in Louisiana somewhere and then had to stop at another gas station in Texas 39 minutes later for an emergency break for little kids who suddenly needed to use the bathroom again. After that particular stop, we instituted a \"no drinking soda or juice in the car\" rule for the kids and suddenly—like magic—their bladders worked a lot more slowly and we stopped making such frequent stops.\n\n\n::: {#tbl-driving-longest-shortest .cell .column-page-right layout-align=\"center\" tbl-cap='Top five longest and shortest stretches of driving during the trip'}\n\n```{.r .cell-code  code-fold=\"true\"}\ndriving_data <- all_stops_activities %>% \n  # Get rid of the geometry column since we're not doing anything map-related\n  st_drop_geometry() %>% \n  # Find the previous and next place visits\n  mutate(\n    origin_name = lag(name),\n    origin_address = lag(address),\n    destination_name = lead(name),\n    destination_address = lead(address)\n  ) %>% \n  # lag() doesn't work for the first entry, so manually add it\n  mutate(\n    origin_name = ifelse(id == 1, \"Home\", origin_name),\n    origin_address = ifelse(id == 1, \"Atlanta, GA, USA\", origin_address)\n  ) %>% \n  # Only look at driving activities\n  filter(activity_type == \"IN_PASSENGER_VEHICLE\") %>% \n  # Get rid of empty, place-related columns\n  select(-c(name, address, driving_stop, tz, geometry_start, geometry_end))\n\n# Longest, shortest stretch of driving\ndriving_data %>% \n  filter(distance_miles > 10) %>%\n  mutate(duration_rank = rank(-duration)) %>% \n  mutate(top_bottom = case_when(\n    duration_rank %in% 1:5 ~ \"Longest stretches\",\n    duration_rank %in% seq(n() - 4, n(), by = 1) ~ \"Shortest stretches\"\n  )) %>% \n  filter(!is.na(top_bottom)) %>% \n  arrange(\n    top_bottom, \n    ifelse(top_bottom == \"Shortest stretches\", desc(duration_rank), duration_rank)\n  ) %>% \n  # Format time stuff nicely\n  mutate(\n    nice_time = fmt_difftime(duration),\n    nice_start_time = paste(strftime(startTimestamp_local, format = \"%I:%M %p\", tz = \"UTC\"), tz_start_abb),\n    nice_end_time = paste(strftime(endTimestamp_local, format = \"%I:%M %p\", tz = \"UTC\"), tz_end_abb)\n  ) %>% \n  # Remove leading zeros from hour\n  mutate(across(c(nice_start_time, nice_end_time), ~str_replace(.x, \"^0\", \"\"))) %>% \n  # Make nice origin and destination columns\n  mutate(\n    origin_nice = glue('{origin_name}<br><span class=\"smaller-address\">{origin_address}</span>'),\n    destination_nice = glue('{destination_name}<br><span class=\"smaller-address\">{destination_address}</span>')\n  ) %>% \n  select(\n    top_bottom, day_month, nice_time, nice_start_time, nice_end_time, \n    distance_miles, origin_nice, destination_nice\n  ) %>% \n  group_by(top_bottom) %>% \n  gt() %>% \n  cols_label(\n    nice_time = \"Driving time\",\n    day_month = \"Day\",\n    nice_start_time = \"Start time\",\n    nice_end_time = \"End time\",\n    distance_miles = \"Miles\",\n    origin_nice = \"Origin\",\n    destination_nice = \"Destination\"\n  ) %>% \n  tab_style(\n    locations = list(cells_column_labels(), cells_stubhead()),\n    style = list(\n      cell_text(weight = \"bold\"),\n      cell_fill(color = \"grey80\")\n    )\n  ) %>% \n  tab_style(\n    locations = cells_row_groups(),\n    style = list(\n      cell_text(weight = \"bold\"),\n      cell_fill(color = \"grey95\")\n    )\n  ) %>% \n  cols_align(\n    columns = c(day_month, origin_nice, destination_nice),\n    align = \"left\"\n  ) %>% \n  fmt_markdown(columns = c(origin_nice, destination_nice)) %>% \n  fmt_number(columns = distance_miles, decimals = 0) %>% \n  tab_footnote(\n    footnote = \"Stretches less than 10 miles omitted (like if we had lunch somewhere and drove down the street to get gas).\"\n  ) %>% \n  opt_css(\n    css = \"\n    .smaller-address {\n      font-size: 0.7em;\n    }\"\n  ) %>% \n  opt_table_font(font = \"Jost\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"dbgvzfontn\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#dbgvzfontn table {\n  font-family: Jost, system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#dbgvzfontn thead, #dbgvzfontn tbody, #dbgvzfontn tfoot, #dbgvzfontn tr, #dbgvzfontn td, #dbgvzfontn th {\n  border-style: none;\n}\n\n#dbgvzfontn p {\n  margin: 0;\n  padding: 0;\n}\n\n#dbgvzfontn .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#dbgvzfontn .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#dbgvzfontn .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#dbgvzfontn .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#dbgvzfontn .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#dbgvzfontn .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#dbgvzfontn .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#dbgvzfontn .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#dbgvzfontn .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#dbgvzfontn .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#dbgvzfontn .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#dbgvzfontn .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#dbgvzfontn .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#dbgvzfontn .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#dbgvzfontn .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dbgvzfontn .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#dbgvzfontn .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#dbgvzfontn .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#dbgvzfontn .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dbgvzfontn .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#dbgvzfontn .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dbgvzfontn .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#dbgvzfontn .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dbgvzfontn .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#dbgvzfontn .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dbgvzfontn .gt_left {\n  text-align: left;\n}\n\n#dbgvzfontn .gt_center {\n  text-align: center;\n}\n\n#dbgvzfontn .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#dbgvzfontn .gt_font_normal {\n  font-weight: normal;\n}\n\n#dbgvzfontn .gt_font_bold {\n  font-weight: bold;\n}\n\n#dbgvzfontn .gt_font_italic {\n  font-style: italic;\n}\n\n#dbgvzfontn .gt_super {\n  font-size: 65%;\n}\n\n#dbgvzfontn .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#dbgvzfontn .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#dbgvzfontn .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#dbgvzfontn .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#dbgvzfontn .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#dbgvzfontn .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#dbgvzfontn .gt_indent_5 {\n  text-indent: 25px;\n}\n\n.smaller-address {\n  font-size: 0.7em;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Day\">Day</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Driving time\">Driving time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Start time\">Start time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"End time\">End time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Miles\">Miles</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Origin\">Origin</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold; background-color: #CCCCCC;\" scope=\"col\" id=\"Destination\">Destination</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"7\" class=\"gt_group_heading\" style=\"font-weight: bold; background-color: #F2F2F2;\" scope=\"colgroup\" id=\"Longest stretches\">Longest stretches</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"Longest stretches  day_month\" class=\"gt_row gt_left\">June 25</td>\n<td headers=\"Longest stretches  nice_time\" class=\"gt_row gt_left\">4 hours 1 minutes</td>\n<td headers=\"Longest stretches  nice_start_time\" class=\"gt_row gt_left\">7:49 AM CDT</td>\n<td headers=\"Longest stretches  nice_end_time\" class=\"gt_row gt_left\">12:51 PM EDT</td>\n<td headers=\"Longest stretches  distance_miles\" class=\"gt_row gt_right\">262</td>\n<td headers=\"Longest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Quality Inn<br><span class=\"smaller-address\">2741 York Rd, Pleasant View, TN 37146, USA</span></p>\n</div></td>\n<td headers=\"Longest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Home<br><span class=\"smaller-address\">Atlanta, GA, USA</span></p>\n</div></td></tr>\n    <tr><td headers=\"Longest stretches  day_month\" class=\"gt_row gt_left\">June 23</td>\n<td headers=\"Longest stretches  nice_time\" class=\"gt_row gt_left\">3 hours 35 minutes</td>\n<td headers=\"Longest stretches  nice_start_time\" class=\"gt_row gt_left\">1:19 PM CDT</td>\n<td headers=\"Longest stretches  nice_end_time\" class=\"gt_row gt_left\">4:54 PM CDT</td>\n<td headers=\"Longest stretches  distance_miles\" class=\"gt_row gt_right\">198</td>\n<td headers=\"Longest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>McDonald’s<br><span class=\"smaller-address\">120 SE 7th St, Stuart, IA 50250, USA</span></p>\n</div></td>\n<td headers=\"Longest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Inn at Old Nauvoo<br><span class=\"smaller-address\">1875 Mulholland St, Nauvoo, IL 62354, USA</span></p>\n</div></td></tr>\n    <tr><td headers=\"Longest stretches  day_month\" class=\"gt_row gt_left\">June 20</td>\n<td headers=\"Longest stretches  nice_time\" class=\"gt_row gt_left\">3 hours 31 minutes</td>\n<td headers=\"Longest stretches  nice_start_time\" class=\"gt_row gt_left\">8:58 AM MDT</td>\n<td headers=\"Longest stretches  nice_end_time\" class=\"gt_row gt_left\">12:30 PM MDT</td>\n<td headers=\"Longest stretches  distance_miles\" class=\"gt_row gt_right\">244</td>\n<td headers=\"Longest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>My aunt’s house<br><span class=\"smaller-address\">Spanish Fork, UT, USA</span></p>\n</div></td>\n<td headers=\"Longest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>My sister’s house<br><span class=\"smaller-address\">Shelley, ID, USA</span></p>\n</div></td></tr>\n    <tr><td headers=\"Longest stretches  day_month\" class=\"gt_row gt_left\">June 6</td>\n<td headers=\"Longest stretches  nice_time\" class=\"gt_row gt_left\">3 hours 9 minutes</td>\n<td headers=\"Longest stretches  nice_start_time\" class=\"gt_row gt_left\">12:18 PM MDT</td>\n<td headers=\"Longest stretches  nice_end_time\" class=\"gt_row gt_left\">3:28 PM MDT</td>\n<td headers=\"Longest stretches  distance_miles\" class=\"gt_row gt_right\">191</td>\n<td headers=\"Longest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Carlsbad Caverns National Park<br><span class=\"smaller-address\">Carlsbad, NM 88220, USA</span></p>\n</div></td>\n<td headers=\"Longest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Conoco<br><span class=\"smaller-address\">1307 8th St, Vaughn, NM 88353, USA</span></p>\n</div></td></tr>\n    <tr><td headers=\"Longest stretches  day_month\" class=\"gt_row gt_left\">June 7</td>\n<td headers=\"Longest stretches  nice_time\" class=\"gt_row gt_left\">3 hours 7 minutes</td>\n<td headers=\"Longest stretches  nice_start_time\" class=\"gt_row gt_left\">5:39 PM MDT</td>\n<td headers=\"Longest stretches  nice_end_time\" class=\"gt_row gt_left\">8:46 PM MDT</td>\n<td headers=\"Longest stretches  distance_miles\" class=\"gt_row gt_right\">163</td>\n<td headers=\"Longest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Glazier’s Market<br><span class=\"smaller-address\">264 S 100 E, Kanab, UT 84741, USA</span></p>\n</div></td>\n<td headers=\"Longest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>My aunt’s cabin<br><span class=\"smaller-address\">Grover, UT, USA</span></p>\n</div></td></tr>\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"7\" class=\"gt_group_heading\" style=\"font-weight: bold; background-color: #F2F2F2;\" scope=\"colgroup\" id=\"Shortest stretches\">Shortest stretches</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"Shortest stretches  day_month\" class=\"gt_row gt_left\">June 22</td>\n<td headers=\"Shortest stretches  nice_time\" class=\"gt_row gt_left\">21 minutes</td>\n<td headers=\"Shortest stretches  nice_start_time\" class=\"gt_row gt_left\">3:35 PM MDT</td>\n<td headers=\"Shortest stretches  nice_end_time\" class=\"gt_row gt_left\">3:56 PM MDT</td>\n<td headers=\"Shortest stretches  distance_miles\" class=\"gt_row gt_right\">15</td>\n<td headers=\"Shortest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Mount Rushmore National Memorial<br><span class=\"smaller-address\">13000 SD-244, Keystone, SD 57751, USA</span></p>\n</div></td>\n<td headers=\"Shortest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Holiday Stationstores<br><span class=\"smaller-address\">Caregiver Cir, Rapid City, SD 57701, USA</span></p>\n</div></td></tr>\n    <tr><td headers=\"Shortest stretches  day_month\" class=\"gt_row gt_left\">June 24</td>\n<td headers=\"Shortest stretches  nice_time\" class=\"gt_row gt_left\">25 minutes</td>\n<td headers=\"Shortest stretches  nice_start_time\" class=\"gt_row gt_left\">12:20 PM CDT</td>\n<td headers=\"Shortest stretches  nice_end_time\" class=\"gt_row gt_left\">12:45 PM CDT</td>\n<td headers=\"Shortest stretches  distance_miles\" class=\"gt_row gt_right\">18</td>\n<td headers=\"Shortest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Smith Family Cemetery<br><span class=\"smaller-address\">Nauvoo, IL 62354, USA</span></p>\n</div></td>\n<td headers=\"Shortest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Carthage Jail<br><span class=\"smaller-address\">310 Buchanan St, Carthage, IL 62321, USA</span></p>\n</div></td></tr>\n    <tr><td headers=\"Shortest stretches  day_month\" class=\"gt_row gt_left\">June 6</td>\n<td headers=\"Shortest stretches  nice_time\" class=\"gt_row gt_left\">33 minutes</td>\n<td headers=\"Shortest stretches  nice_start_time\" class=\"gt_row gt_left\">8:24 AM MDT</td>\n<td headers=\"Shortest stretches  nice_end_time\" class=\"gt_row gt_left\">8:57 AM MDT</td>\n<td headers=\"Shortest stretches  distance_miles\" class=\"gt_row gt_right\">22</td>\n<td headers=\"Shortest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Stevens Inn<br><span class=\"smaller-address\">1829 S Canal St, Carlsbad, NM 88220, USA</span></p>\n</div></td>\n<td headers=\"Shortest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Carlsbad Caverns National Park<br><span class=\"smaller-address\">Carlsbad, NM 88220, USA</span></p>\n</div></td></tr>\n    <tr><td headers=\"Shortest stretches  day_month\" class=\"gt_row gt_left\">June 4</td>\n<td headers=\"Shortest stretches  nice_time\" class=\"gt_row gt_left\">39 minutes</td>\n<td headers=\"Shortest stretches  nice_start_time\" class=\"gt_row gt_left\">3:26 PM CDT</td>\n<td headers=\"Shortest stretches  nice_end_time\" class=\"gt_row gt_left\">4:06 PM CDT</td>\n<td headers=\"Shortest stretches  distance_miles\" class=\"gt_row gt_right\">44</td>\n<td headers=\"Shortest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Exxon<br><span class=\"smaller-address\">1410 Gum Cove Rd, Vinton, LA 70668, USA</span></p>\n</div></td>\n<td headers=\"Shortest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>Love’s Travel Stop<br><span class=\"smaller-address\">7495 Smith Rd, Beaumont, TX 77713, USA</span></p>\n</div></td></tr>\n    <tr><td headers=\"Shortest stretches  day_month\" class=\"gt_row gt_left\">June 20</td>\n<td headers=\"Shortest stretches  nice_time\" class=\"gt_row gt_left\">42 minutes</td>\n<td headers=\"Shortest stretches  nice_start_time\" class=\"gt_row gt_left\">2:14 PM MDT</td>\n<td headers=\"Shortest stretches  nice_end_time\" class=\"gt_row gt_left\">2:56 PM MDT</td>\n<td headers=\"Shortest stretches  distance_miles\" class=\"gt_row gt_right\">35</td>\n<td headers=\"Shortest stretches  origin_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>My sister’s house<br><span class=\"smaller-address\">Shelley, ID, USA</span></p>\n</div></td>\n<td headers=\"Shortest stretches  destination_nice\" class=\"gt_row gt_left\"><div class='gt_from_md'><p>AmericInn by Wyndham Rexburg BYUI<br><span class=\"smaller-address\">1098 Golden Beauty Dr, Rexburg, ID 83440, USA</span></p>\n</div></td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"7\"> Stretches less than 10 miles omitted (like if we had lunch somewhere and drove down the street to get gas).</td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n:::\n:::\n\n\nWhat about the stops? How long was a typical gas/bathroom break? @fig-stop-duration-dist shows the distribution of the duration of all the non-touristy stops, and it actually reveals a pretty neat trimodal distribution! We had three general types of stops:\n\n- **Fast** (*10ish minutes*): stops for switching drivers, getting gas right after a sightseeing visit, or letting one kid go to the bathroom\n- **Standard** (*25ish minutes*): stops where we got gas and had everyone go to the bathroom\n- **Meal** (*40ish minutes*): stops where we got gas, went to the bathroom, ate food (typically peanut butter sandwiches that we made in the hotel in the morning), and walked around to stretch\n\n\n::: {.cell .fig-cap-location-margin layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Cut duration into three categories\nplaces_hist_data <- place_visits %>% \n  filter(driving_stop == TRUE) %>% \n  mutate(range = cut(as.numeric(duration), breaks = c(0, 15, 35, 50)))\n\nggplot(places_hist_data, aes(x = as.numeric(duration), fill = range)) +\n  geom_histogram(binwidth = 5, boundary = 0, color = \"white\") +\n  annotate(geom = \"text\", x = 10, y = 7.75, label = \"Fast stop\") +\n  annotate(geom = \"segment\", x = 6, xend = 14, y = 7.35, yend = 7.35) +\n  annotate(geom = \"text\", x = 25, y = 7.75, label = \"Standard gas + bathroom\") +\n  annotate(geom = \"segment\", x = 16, xend = 34, y = 7.35, yend = 7.35) +\n  annotate(geom = \"text\", x = 42.5, y = 7.75, label = \"Gas + bathroom + meal\") +\n  annotate(geom = \"segment\", x = 36, xend = 49, y = 7.35, yend = 7.35) +\n  scale_y_continuous(breaks = seq(0, 6, by = 2)) +\n  scale_fill_manual(values = clrs[c(7, 2, 1)], guide = \"none\") +\n  labs(x = \"Minutes\", y = \"Count\") +\n  theme_roadtrip() +\n  theme(panel.grid.major.x = element_blank())\n```\n\n::: {.cell-output-display}\n![Distribution of non-sightseeing stops for the first four days of the trip](index_files/figure-html/fig-stop-duration-dist-1.png){#fig-stop-duration-dist fig-align='center' width=90%}\n:::\n:::\n\n\n\n## Elevation over time\n\nAnd finally, just for fun since Google tracked this data and we might as well do something neat with it, we can look at how much the elevation changed over the course of the trip. Atlanta is 1,000 feet above sea level, and Utah County is 4,500 feed above sea level, but the 3,500-foot increase in elevation was hardly uniform. We dropped down to below sea level in New Orleans, climbed up to above 4,000 feet in Carlsbad (it turns out that Carlsbad Caverns is on top of a big mountain), and then climbed rapidly up to the Grand Canyon and Southern Utah in general at 7,500ish feet until dropping down to 4,500 feet at our final destination in Utah.\n\nOn the way back, we stayed at around 4,500ish feet until Yellowstone, where we hit the highest elevation of the whole trip at 8,530 feet. We then gradually worked our way down toward sea level as we traveled further east, finally hitting 1,000ish feet at the Mississippi River at Nauvoo, Illinois, where we mostly stayed until getting home (with a little Appalachian spike near the end).\n\n\n::: {.cell .column-page-right layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nelevation_data <- all_locations %>% \n  mutate(elevation = meters_to_feet(altitude))\n\nelevation_stops <- tribble(\n  ~id,                       ~direction,  ~nudge_direction, ~stop_label,\n  \"ChIJv30_Xw-mIIYRpt26QbLBh58\", \"There\", \"up\", \"New Orleans,\\nLouisiana\",\n  \"ChIJX4k2TVVfXIYRIsTnhA-P-Rc\", \"There\", \"down\", \"San Antonio,\\nTexas\",\n  \"ChIJW9e4xBN544YRvbI7vfc91G4\", \"There\", \"down\", \"Carlsbad Caverns,\\nNew Mexico\",\n  \"ChIJrSLbJJIQM4cR4l5HTswDY8k\", \"There\", \"up\", \"The Grand Canyon,\\nArizona\",\n  \"ChIJU6LnB_8ASocRB_9PSFPsO94\", \"There\", \"up\", \"Capitol Reef,\\nUtah\",\n  \"ChIJz6VI3AMLVFMREvSOw9M0VR4\", \"Back again\", \"down\", \"Rexburg,\\nIdaho\",\n  \"ChIJSWHsxv8JTlMR82z8b6wF_BM\", \"Back again\", \"up\", \"Yellowstone,\\nWyoming\",\n  \"ChIJ39Y-tdg1fYcRQcZcBb499do\", \"Back again\", \"up\", \"Mount Rushmore,\\nSouth Dakota\",\n  \"ChIJDUPPu3Im54cRKj6BG8UkOko\", \"Back again\", \"down\", \"Nauvoo,\\nIllinois\",\n  \"ChIJtUcJ-n36ZIgRhzY2PM19eWA\", \"Back again\", \"up\", \"Nashville,\\nTennessee\"\n)\n\nstops_to_show <- place_visits %>% \n  st_drop_geometry() %>% \n  filter(id %in% elevation_stops$id) %>% \n  left_join(elevation_stops, by = join_by(id)) %>% \n  # Magical new join_by(closest(...)) syntax for inexact, approximate matching\n  # to get the closest elevation for the stop(!)\n  left_join(elevation_data, by = join_by(closest(startTimestamp_local >= timestamp))) %>% \n  # Get rid of duplicate ids\n  group_by(id) %>% \n  slice(1) %>% \n  ungroup()\n\nggplot(elevation_data, aes(x = timestamp_local, y = elevation)) +\n  geom_line(linewidth = 0.3) +\n  geom_text_repel(\n    data = filter(stops_to_show, nudge_direction == \"up\"),\n    aes(x = startTimestamp_local, label = stop_label),\n    nudge_y = 2500, direction = \"y\", lineheight = 1, family = \"Overpass ExtraBold\",\n    color = clrs[8], segment.color = clrs[7], seed = 1234\n  ) +\n  geom_text_repel(\n    data = filter(stops_to_show, nudge_direction == \"down\"),\n    aes(x = startTimestamp_local, label = stop_label),\n    nudge_y = -1000, lineheight = 1, family = \"Overpass ExtraBold\",\n    color = clrs[8], segment.color = clrs[7], seed = 1234\n  ) +\n  scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%B %e\") +\n  scale_y_continuous(\n    breaks = seq(0, 8000, by = 2000),\n    labels = label_comma(suffix = \" ft.\")\n  ) +\n  labs(x = NULL, y = \"Elevation\") +\n  facet_wrap(vars(direction), scales = \"free_x\") +\n  theme_roadtrip()\n```\n\n::: {.cell-output-display}\n![Elevation over the course of the trip](index_files/figure-html/fig-elevation-1.png){#fig-elevation fig-align='center' width=100%}\n:::\n:::\n\n\n\n# The end\n\nThis only scratches the surface of what you can do with your Google Location History data. There's a ton of other stuff in those JSON files, including second-by-second data of each `activitySegment` (though those entries seem to use Google's internal `ChIJ********` [Place IDs](https://developers.google.com/maps/documentation/places/web-service/place-id) and not latitude and longitude coordinates), sub-visits for `placeVisits`, and lots of other stuff. Smarter people than me can dig through and figure out that data!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"../../../../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<link href=\"../../../../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../../../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../../../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../../../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/leaflet-binding-2.1.2/leaflet.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}